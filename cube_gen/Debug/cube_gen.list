
cube_gen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9f4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800aba4  0800aba4  0001aba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac74  0800ac74  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac74  0800ac74  0001ac74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac7c  0800ac7c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac7c  0800ac7c  0001ac7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac80  0800ac80  0001ac80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800ac84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000088  0800ad0c  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  0800ad0c  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011936  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267c  00000000  00000000  000319ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00034070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b18  00000000  00000000  00034c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a626  00000000  00000000  000357b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011031  00000000  00000000  0005fdd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdedc  00000000  00000000  00070e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016ece3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003418  00000000  00000000  0016ed34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ab8c 	.word	0x0800ab8c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800ab8c 	.word	0x0800ab8c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <DWT_Delay_Init+0x58>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	4a13      	ldr	r2, [pc, #76]	; (80005fc <DWT_Delay_Init+0x58>)
 80005ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80005b2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <DWT_Delay_Init+0x58>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	4a10      	ldr	r2, [pc, #64]	; (80005fc <DWT_Delay_Init+0x58>)
 80005ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005be:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <DWT_Delay_Init+0x5c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <DWT_Delay_Init+0x5c>)
 80005c6:	f023 0301 	bic.w	r3, r3, #1
 80005ca:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <DWT_Delay_Init+0x5c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <DWT_Delay_Init+0x5c>)
 80005d2:	f043 0301 	orr.w	r3, r3, #1
 80005d6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <DWT_Delay_Init+0x5c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80005de:	bf00      	nop
    __ASM volatile ("NOP");
 80005e0:	bf00      	nop
    __ASM volatile ("NOP");
 80005e2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <DWT_Delay_Init+0x5c>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80005ec:	2300      	movs	r3, #0
 80005ee:	e000      	b.n	80005f2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80005f0:	2301      	movs	r3, #1
    }
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	e000edf0 	.word	0xe000edf0
 8000600:	e0001000 	.word	0xe0001000

08000604 <DWT_Delay_us>:
uint32_t DWT_Delay_Init(void);


// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <DWT_Delay_us+0x48>)
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000612:	f007 fcc7 	bl	8007fa4 <HAL_RCC_GetHCLKFreq>
 8000616:	4603      	mov	r3, r0
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <DWT_Delay_us+0x4c>)
 800061a:	fba2 2303 	umull	r2, r3, r2, r3
 800061e:	0c9b      	lsrs	r3, r3, #18
 8000620:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	68ba      	ldr	r2, [r7, #8]
 8000626:	fb02 f303 	mul.w	r3, r2, r3
 800062a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 800062c:	bf00      	nop
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <DWT_Delay_us+0x48>)
 8000630:	685a      	ldr	r2, [r3, #4]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	1ad2      	subs	r2, r2, r3
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	1acb      	subs	r3, r1, r3
 800063c:	429a      	cmp	r2, r3
 800063e:	d3f6      	bcc.n	800062e <DWT_Delay_us+0x2a>
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	e0001000 	.word	0xe0001000
 8000650:	431bde83 	.word	0x431bde83

08000654 <DWT_Delay_ms>:

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <DWT_Delay_ms+0x44>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8000662:	f007 fc9f 	bl	8007fa4 <HAL_RCC_GetHCLKFreq>
 8000666:	4603      	mov	r3, r0
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <DWT_Delay_ms+0x48>)
 800066a:	fba2 2303 	umull	r2, r3, r2, r3
 800066e:	099b      	lsrs	r3, r3, #6
 8000670:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	68ba      	ldr	r2, [r7, #8]
 8000676:	fb02 f303 	mul.w	r3, r2, r3
 800067a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 800067c:	bf00      	nop
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <DWT_Delay_ms+0x44>)
 8000680:	685a      	ldr	r2, [r3, #4]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	1ad2      	subs	r2, r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	429a      	cmp	r2, r3
 800068a:	d3f8      	bcc.n	800067e <DWT_Delay_ms+0x2a>
}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	e0001000 	.word	0xe0001000
 800069c:	10624dd3 	.word	0x10624dd3

080006a0 <LCD_DATA>:


//-----[ Alphanumeric LCD 16x2 Routines ]-----

void LCD_DATA(unsigned char Data)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
    if(Data & 1)
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d008      	beq.n	80006c6 <LCD_DATA+0x26>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 1);
 80006b4:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <LCD_DATA+0xc4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a2a      	ldr	r2, [pc, #168]	; (8000764 <LCD_DATA+0xc4>)
 80006ba:	8891      	ldrh	r1, [r2, #4]
 80006bc:	2201      	movs	r2, #1
 80006be:	4618      	mov	r0, r3
 80006c0:	f006 fe4e 	bl	8007360 <HAL_GPIO_WritePin>
 80006c4:	e007      	b.n	80006d6 <LCD_DATA+0x36>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 0);
 80006c6:	4b27      	ldr	r3, [pc, #156]	; (8000764 <LCD_DATA+0xc4>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a26      	ldr	r2, [pc, #152]	; (8000764 <LCD_DATA+0xc4>)
 80006cc:	8891      	ldrh	r1, [r2, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f006 fe45 	bl	8007360 <HAL_GPIO_WritePin>
    if(Data & 2)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	f003 0302 	and.w	r3, r3, #2
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d008      	beq.n	80006f2 <LCD_DATA+0x52>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 1);
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <LCD_DATA+0xc4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <LCD_DATA+0xc4>)
 80006e6:	88d1      	ldrh	r1, [r2, #6]
 80006e8:	2201      	movs	r2, #1
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 fe38 	bl	8007360 <HAL_GPIO_WritePin>
 80006f0:	e007      	b.n	8000702 <LCD_DATA+0x62>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 0);
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <LCD_DATA+0xc4>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a1b      	ldr	r2, [pc, #108]	; (8000764 <LCD_DATA+0xc4>)
 80006f8:	88d1      	ldrh	r1, [r2, #6]
 80006fa:	2200      	movs	r2, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f006 fe2f 	bl	8007360 <HAL_GPIO_WritePin>
    if(Data & 4)
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	f003 0304 	and.w	r3, r3, #4
 8000708:	2b00      	cmp	r3, #0
 800070a:	d008      	beq.n	800071e <LCD_DATA+0x7e>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 1);
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <LCD_DATA+0xc4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a14      	ldr	r2, [pc, #80]	; (8000764 <LCD_DATA+0xc4>)
 8000712:	8911      	ldrh	r1, [r2, #8]
 8000714:	2201      	movs	r2, #1
 8000716:	4618      	mov	r0, r3
 8000718:	f006 fe22 	bl	8007360 <HAL_GPIO_WritePin>
 800071c:	e007      	b.n	800072e <LCD_DATA+0x8e>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 0);
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <LCD_DATA+0xc4>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a10      	ldr	r2, [pc, #64]	; (8000764 <LCD_DATA+0xc4>)
 8000724:	8911      	ldrh	r1, [r2, #8]
 8000726:	2200      	movs	r2, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f006 fe19 	bl	8007360 <HAL_GPIO_WritePin>
    if(Data & 8)
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	f003 0308 	and.w	r3, r3, #8
 8000734:	2b00      	cmp	r3, #0
 8000736:	d008      	beq.n	800074a <LCD_DATA+0xaa>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 1);
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <LCD_DATA+0xc4>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a09      	ldr	r2, [pc, #36]	; (8000764 <LCD_DATA+0xc4>)
 800073e:	8951      	ldrh	r1, [r2, #10]
 8000740:	2201      	movs	r2, #1
 8000742:	4618      	mov	r0, r3
 8000744:	f006 fe0c 	bl	8007360 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
}
 8000748:	e007      	b.n	800075a <LCD_DATA+0xba>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <LCD_DATA+0xc4>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a05      	ldr	r2, [pc, #20]	; (8000764 <LCD_DATA+0xc4>)
 8000750:	8951      	ldrh	r1, [r2, #10]
 8000752:	2200      	movs	r2, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f006 fe03 	bl	8007360 <HAL_GPIO_WritePin>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	0800abdc 	.word	0x0800abdc

08000768 <LCD_CMD>:
void LCD_CMD(unsigned char a_CMD)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
    // Select Command Register
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 0);
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <LCD_CMD+0x60>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <LCD_CMD+0x60>)
 8000778:	89d1      	ldrh	r1, [r2, #14]
 800077a:	2200      	movs	r2, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f006 fdef 	bl	8007360 <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
    LCD_DATA(a_CMD);
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff8b 	bl	80006a0 <LCD_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <LCD_CMD+0x60>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <LCD_CMD+0x60>)
 8000790:	8991      	ldrh	r1, [r2, #12]
 8000792:	2201      	movs	r2, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f006 fde3 	bl	8007360 <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <LCD_CMD+0x60>)
 800079c:	8a1b      	ldrh	r3, [r3, #16]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff30 	bl	8000604 <DWT_Delay_us>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <LCD_CMD+0x60>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <LCD_CMD+0x60>)
 80007aa:	8991      	ldrh	r1, [r2, #12]
 80007ac:	2200      	movs	r2, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f006 fdd6 	bl	8007360 <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 80007b4:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <LCD_CMD+0x60>)
 80007b6:	8a1b      	ldrh	r3, [r3, #16]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff23 	bl	8000604 <DWT_Delay_us>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	0800abdc 	.word	0x0800abdc

080007cc <LCD_Clear>:
void LCD_Clear()
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
    LCD_CMD(0);
 80007d0:	2000      	movs	r0, #0
 80007d2:	f7ff ffc9 	bl	8000768 <LCD_CMD>
    LCD_CMD(1);
 80007d6:	2001      	movs	r0, #1
 80007d8:	f7ff ffc6 	bl	8000768 <LCD_CMD>
    DWT_Delay_us(70);
 80007dc:	2046      	movs	r0, #70	; 0x46
 80007de:	f7ff ff11 	bl	8000604 <DWT_Delay_us>
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <LCD_Set_Cursor>:
void LCD_Set_Cursor(unsigned char r, unsigned char c)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b084      	sub	sp, #16
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	460a      	mov	r2, r1
 80007f0:	71fb      	strb	r3, [r7, #7]
 80007f2:	4613      	mov	r3, r2
 80007f4:	71bb      	strb	r3, [r7, #6]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d111      	bne.n	8000820 <LCD_Set_Cursor+0x3a>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 80007fc:	79bb      	ldrb	r3, [r7, #6]
 80007fe:	337f      	adds	r3, #127	; 0x7f
 8000800:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	091b      	lsrs	r3, r3, #4
 8000806:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	f003 030f 	and.w	r3, r3, #15
 800080e:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 8000810:	7bbb      	ldrb	r3, [r7, #14]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ffa8 	bl	8000768 <LCD_CMD>
      LCD_CMD(Low4);
 8000818:	7b7b      	ldrb	r3, [r7, #13]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ffa4 	bl	8000768 <LCD_CMD>
    }
    if(r == 2)
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b02      	cmp	r3, #2
 8000824:	d111      	bne.n	800084a <LCD_Set_Cursor+0x64>
    {
      Temp  = 0xC0 + c - 1;
 8000826:	79bb      	ldrb	r3, [r7, #6]
 8000828:	3b41      	subs	r3, #65	; 0x41
 800082a:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	091b      	lsrs	r3, r3, #4
 8000830:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	f003 030f 	and.w	r3, r3, #15
 8000838:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 800083a:	7bbb      	ldrb	r3, [r7, #14]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff93 	bl	8000768 <LCD_CMD>
      LCD_CMD(Low4);
 8000842:	7b7b      	ldrb	r3, [r7, #13]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff8f 	bl	8000768 <LCD_CMD>
    }
    DWT_Delay_ms(2);
 800084a:	2002      	movs	r0, #2
 800084c:	f7ff ff02 	bl	8000654 <DWT_Delay_ms>
}
 8000850:	bf00      	nop
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <LCD_Init>:
void LCD_Init()
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
	// Initialize The DWT Delay Function Which Will Be Used Later On
	DWT_Delay_Init();
 800086e:	f7ff fe99 	bl	80005a4 <DWT_Delay_Init>
    // IO Pin Configurations
	if(LCD16x2_CfgParam.LCD_GPIO == GPIOA)
 8000872:	4b70      	ldr	r3, [pc, #448]	; (8000a34 <LCD_Init+0x1dc>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800087a:	d10c      	bne.n	8000896 <LCD_Init+0x3e>
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087c:	4b6e      	ldr	r3, [pc, #440]	; (8000a38 <LCD_Init+0x1e0>)
 800087e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000880:	4a6d      	ldr	r2, [pc, #436]	; (8000a38 <LCD_Init+0x1e0>)
 8000882:	f043 0301 	orr.w	r3, r3, #1
 8000886:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000888:	4b6b      	ldr	r3, [pc, #428]	; (8000a38 <LCD_Init+0x1e0>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	e034      	b.n	8000900 <LCD_Init+0xa8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOB)
 8000896:	4b67      	ldr	r3, [pc, #412]	; (8000a34 <LCD_Init+0x1dc>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a68      	ldr	r2, [pc, #416]	; (8000a3c <LCD_Init+0x1e4>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d10c      	bne.n	80008ba <LCD_Init+0x62>
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a0:	4b65      	ldr	r3, [pc, #404]	; (8000a38 <LCD_Init+0x1e0>)
 80008a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a4:	4a64      	ldr	r2, [pc, #400]	; (8000a38 <LCD_Init+0x1e0>)
 80008a6:	f043 0302 	orr.w	r3, r3, #2
 80008aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ac:	4b62      	ldr	r3, [pc, #392]	; (8000a38 <LCD_Init+0x1e0>)
 80008ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b0:	f003 0302 	and.w	r3, r3, #2
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	e022      	b.n	8000900 <LCD_Init+0xa8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOC)
 80008ba:	4b5e      	ldr	r3, [pc, #376]	; (8000a34 <LCD_Init+0x1dc>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a60      	ldr	r2, [pc, #384]	; (8000a40 <LCD_Init+0x1e8>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d10c      	bne.n	80008de <LCD_Init+0x86>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80008c4:	4b5c      	ldr	r3, [pc, #368]	; (8000a38 <LCD_Init+0x1e0>)
 80008c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c8:	4a5b      	ldr	r2, [pc, #364]	; (8000a38 <LCD_Init+0x1e0>)
 80008ca:	f043 0304 	orr.w	r3, r3, #4
 80008ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d0:	4b59      	ldr	r3, [pc, #356]	; (8000a38 <LCD_Init+0x1e0>)
 80008d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d4:	f003 0304 	and.w	r3, r3, #4
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	e010      	b.n	8000900 <LCD_Init+0xa8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOD)
 80008de:	4b55      	ldr	r3, [pc, #340]	; (8000a34 <LCD_Init+0x1dc>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a58      	ldr	r2, [pc, #352]	; (8000a44 <LCD_Init+0x1ec>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d10b      	bne.n	8000900 <LCD_Init+0xa8>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80008e8:	4b53      	ldr	r3, [pc, #332]	; (8000a38 <LCD_Init+0x1e0>)
 80008ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ec:	4a52      	ldr	r2, [pc, #328]	; (8000a38 <LCD_Init+0x1e0>)
 80008ee:	f043 0308 	orr.w	r3, r3, #8
 80008f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f4:	4b50      	ldr	r3, [pc, #320]	; (8000a38 <LCD_Init+0x1e0>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f8:	f003 0308 	and.w	r3, r3, #8
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, GPIO_PIN_RESET);
 8000900:	4b4c      	ldr	r3, [pc, #304]	; (8000a34 <LCD_Init+0x1dc>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a4b      	ldr	r2, [pc, #300]	; (8000a34 <LCD_Init+0x1dc>)
 8000906:	8891      	ldrh	r1, [r2, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f006 fd28 	bl	8007360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, GPIO_PIN_RESET);
 8000910:	4b48      	ldr	r3, [pc, #288]	; (8000a34 <LCD_Init+0x1dc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a47      	ldr	r2, [pc, #284]	; (8000a34 <LCD_Init+0x1dc>)
 8000916:	88d1      	ldrh	r1, [r2, #6]
 8000918:	2200      	movs	r2, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f006 fd20 	bl	8007360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, GPIO_PIN_RESET);
 8000920:	4b44      	ldr	r3, [pc, #272]	; (8000a34 <LCD_Init+0x1dc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a43      	ldr	r2, [pc, #268]	; (8000a34 <LCD_Init+0x1dc>)
 8000926:	8911      	ldrh	r1, [r2, #8]
 8000928:	2200      	movs	r2, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f006 fd18 	bl	8007360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, GPIO_PIN_RESET);
 8000930:	4b40      	ldr	r3, [pc, #256]	; (8000a34 <LCD_Init+0x1dc>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a3f      	ldr	r2, [pc, #252]	; (8000a34 <LCD_Init+0x1dc>)
 8000936:	8951      	ldrh	r1, [r2, #10]
 8000938:	2200      	movs	r2, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f006 fd10 	bl	8007360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 8000940:	4b3c      	ldr	r3, [pc, #240]	; (8000a34 <LCD_Init+0x1dc>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a3b      	ldr	r2, [pc, #236]	; (8000a34 <LCD_Init+0x1dc>)
 8000946:	89d1      	ldrh	r1, [r2, #14]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f006 fd08 	bl	8007360 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 8000950:	4b38      	ldr	r3, [pc, #224]	; (8000a34 <LCD_Init+0x1dc>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a37      	ldr	r2, [pc, #220]	; (8000a34 <LCD_Init+0x1dc>)
 8000956:	8991      	ldrh	r1, [r2, #12]
 8000958:	2200      	movs	r2, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f006 fd00 	bl	8007360 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 8000960:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <LCD_Init+0x1dc>)
 8000962:	889a      	ldrh	r2, [r3, #4]
 8000964:	4b33      	ldr	r3, [pc, #204]	; (8000a34 <LCD_Init+0x1dc>)
 8000966:	88db      	ldrh	r3, [r3, #6]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 8000968:	4313      	orrs	r3, r2
 800096a:	b29a      	uxth	r2, r3
 800096c:	4b31      	ldr	r3, [pc, #196]	; (8000a34 <LCD_Init+0x1dc>)
 800096e:	891b      	ldrh	r3, [r3, #8]
 8000970:	4313      	orrs	r3, r2
 8000972:	b29a      	uxth	r2, r3
 8000974:	4b2f      	ldr	r3, [pc, #188]	; (8000a34 <LCD_Init+0x1dc>)
 8000976:	895b      	ldrh	r3, [r3, #10]
 8000978:	4313      	orrs	r3, r2
 800097a:	b29a      	uxth	r2, r3
 800097c:	4b2d      	ldr	r3, [pc, #180]	; (8000a34 <LCD_Init+0x1dc>)
 800097e:	89db      	ldrh	r3, [r3, #14]
 8000980:	4313      	orrs	r3, r2
 8000982:	b29a      	uxth	r2, r3
			LCD16x2_CfgParam.EN_PIN;
 8000984:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <LCD_Init+0x1dc>)
 8000986:	899b      	ldrh	r3, [r3, #12]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 8000988:	4313      	orrs	r3, r2
 800098a:	b29b      	uxth	r3, r3
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 800098c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD16x2_CfgParam.LCD_GPIO, &GPIO_InitStruct);
 800099a:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <LCD_Init+0x1dc>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f107 0214 	add.w	r2, r7, #20
 80009a2:	4611      	mov	r1, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f006 fa57 	bl	8006e58 <HAL_GPIO_Init>

	// The Init. Procedure As Described In The Datasheet
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 80009aa:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <LCD_Init+0x1dc>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a21      	ldr	r2, [pc, #132]	; (8000a34 <LCD_Init+0x1dc>)
 80009b0:	89d1      	ldrh	r1, [r2, #14]
 80009b2:	2200      	movs	r2, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f006 fcd3 	bl	8007360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 80009ba:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <LCD_Init+0x1dc>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a1d      	ldr	r2, [pc, #116]	; (8000a34 <LCD_Init+0x1dc>)
 80009c0:	8991      	ldrh	r1, [r2, #12]
 80009c2:	2200      	movs	r2, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f006 fccb 	bl	8007360 <HAL_GPIO_WritePin>
    LCD_DATA(0x00);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff fe68 	bl	80006a0 <LCD_DATA>
    DWT_Delay_ms(150);
 80009d0:	2096      	movs	r0, #150	; 0x96
 80009d2:	f7ff fe3f 	bl	8000654 <DWT_Delay_ms>
    LCD_CMD(0x03);
 80009d6:	2003      	movs	r0, #3
 80009d8:	f7ff fec6 	bl	8000768 <LCD_CMD>
    DWT_Delay_ms(5);
 80009dc:	2005      	movs	r0, #5
 80009de:	f7ff fe39 	bl	8000654 <DWT_Delay_ms>
    LCD_CMD(0x03);
 80009e2:	2003      	movs	r0, #3
 80009e4:	f7ff fec0 	bl	8000768 <LCD_CMD>
    DWT_Delay_us(150);
 80009e8:	2096      	movs	r0, #150	; 0x96
 80009ea:	f7ff fe0b 	bl	8000604 <DWT_Delay_us>
    LCD_CMD(0x03);
 80009ee:	2003      	movs	r0, #3
 80009f0:	f7ff feba 	bl	8000768 <LCD_CMD>
    LCD_CMD(0x02);
 80009f4:	2002      	movs	r0, #2
 80009f6:	f7ff feb7 	bl	8000768 <LCD_CMD>
    LCD_CMD(0x02);
 80009fa:	2002      	movs	r0, #2
 80009fc:	f7ff feb4 	bl	8000768 <LCD_CMD>
    LCD_CMD(0x08);
 8000a00:	2008      	movs	r0, #8
 8000a02:	f7ff feb1 	bl	8000768 <LCD_CMD>
    LCD_CMD(0x00);
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff feae 	bl	8000768 <LCD_CMD>
    LCD_CMD(0x0C);
 8000a0c:	200c      	movs	r0, #12
 8000a0e:	f7ff feab 	bl	8000768 <LCD_CMD>
    LCD_CMD(0x00);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff fea8 	bl	8000768 <LCD_CMD>
    LCD_CMD(0x06);
 8000a18:	2006      	movs	r0, #6
 8000a1a:	f7ff fea5 	bl	8000768 <LCD_CMD>
    LCD_CMD(0x00);
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f7ff fea2 	bl	8000768 <LCD_CMD>
    LCD_CMD(0x01);
 8000a24:	2001      	movs	r0, #1
 8000a26:	f7ff fe9f 	bl	8000768 <LCD_CMD>
}
 8000a2a:	bf00      	nop
 8000a2c:	3728      	adds	r7, #40	; 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	0800abdc 	.word	0x0800abdc
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	48000400 	.word	0x48000400
 8000a40:	48000800 	.word	0x48000800
 8000a44:	48000c00 	.word	0x48000c00

08000a48 <LCD_Write_Char>:
void LCD_Write_Char(char Data)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
   char Low4,High4;
   Low4  = Data & 0x0F;
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	f003 030f 	and.w	r3, r3, #15
 8000a58:	73fb      	strb	r3, [r7, #15]
   High4 = Data & 0xF0;
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	f023 030f 	bic.w	r3, r3, #15
 8000a60:	73bb      	strb	r3, [r7, #14]

   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 1);
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <LCD_Write_Char+0xb0>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a24      	ldr	r2, [pc, #144]	; (8000af8 <LCD_Write_Char+0xb0>)
 8000a68:	89d1      	ldrh	r1, [r2, #14]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f006 fc77 	bl	8007360 <HAL_GPIO_WritePin>

   LCD_DATA(High4>>4);
 8000a72:	7bbb      	ldrb	r3, [r7, #14]
 8000a74:	091b      	lsrs	r3, r3, #4
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fe11 	bl	80006a0 <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <LCD_Write_Char+0xb0>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a1d      	ldr	r2, [pc, #116]	; (8000af8 <LCD_Write_Char+0xb0>)
 8000a84:	8991      	ldrh	r1, [r2, #12]
 8000a86:	2201      	movs	r2, #1
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f006 fc69 	bl	8007360 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <LCD_Write_Char+0xb0>)
 8000a90:	8a1b      	ldrh	r3, [r3, #16]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fdb6 	bl	8000604 <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <LCD_Write_Char+0xb0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a16      	ldr	r2, [pc, #88]	; (8000af8 <LCD_Write_Char+0xb0>)
 8000a9e:	8991      	ldrh	r1, [r2, #12]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f006 fc5c 	bl	8007360 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <LCD_Write_Char+0xb0>)
 8000aaa:	8a1b      	ldrh	r3, [r3, #16]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fda9 	bl	8000604 <DWT_Delay_us>

   LCD_DATA(Low4);
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fdf3 	bl	80006a0 <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <LCD_Write_Char+0xb0>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <LCD_Write_Char+0xb0>)
 8000ac0:	8991      	ldrh	r1, [r2, #12]
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f006 fc4b 	bl	8007360 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <LCD_Write_Char+0xb0>)
 8000acc:	8a1b      	ldrh	r3, [r3, #16]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fd98 	bl	8000604 <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <LCD_Write_Char+0xb0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <LCD_Write_Char+0xb0>)
 8000ada:	8991      	ldrh	r1, [r2, #12]
 8000adc:	2200      	movs	r2, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f006 fc3e 	bl	8007360 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <LCD_Write_Char+0xb0>)
 8000ae6:	8a1b      	ldrh	r3, [r3, #16]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fd8b 	bl	8000604 <DWT_Delay_us>
}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	0800abdc 	.word	0x0800abdc

08000afc <LCD_Write_String>:
void LCD_Write_String(char *str)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
    int i;
    for(i=0;str[i]!='\0';i++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	e009      	b.n	8000b1e <LCD_Write_String+0x22>
       LCD_Write_Char(str[i]);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	4413      	add	r3, r2
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff98 	bl	8000a48 <LCD_Write_Char>
    for(i=0;str[i]!='\0';i++)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	4413      	add	r3, r2
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1ef      	bne.n	8000b0a <LCD_Write_String+0xe>
}
 8000b2a:	bf00      	nop
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <test_byte_order>:

/*************************   B Y T E   O R D E R   ****************************/


static int test_byte_order(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
    if (*(uint32_t*)endianness != 0x31323334UL)
        return CWP_RC_WRONG_BYTE_ORDER;
#else

#ifdef COMPILE_FOR_LITTLE_ENDIAN
    const char *endianness = "1234";
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <test_byte_order+0x28>)
 8000b3c:	607b      	str	r3, [r7, #4]
    if (*(uint32_t*)endianness != 0x34333231UL)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <test_byte_order+0x2c>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d002      	beq.n	8000b4e <test_byte_order+0x1a>
        return CWP_RC_WRONG_BYTE_ORDER;
 8000b48:	f06f 0304 	mvn.w	r3, #4
 8000b4c:	e000      	b.n	8000b50 <test_byte_order+0x1c>
#endif
#endif
    return CWP_RC_OK;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	0800aba4 	.word	0x0800aba4
 8000b60:	34333231 	.word	0x34333231

08000b64 <cw_pack_context_init>:
/*******************************   P A C K   **********************************/



int cw_pack_context_init (cw_pack_context* pack_context, void* data, unsigned long length, pack_overflow_handler hpo)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	603b      	str	r3, [r7, #0]
    pack_context->start = pack_context->current = (uint8_t*)data;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	605a      	str	r2, [r3, #4]
    pack_context->end = pack_context->start + length;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	441a      	add	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	609a      	str	r2, [r3, #8]
    pack_context->be_compatible = false;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	731a      	strb	r2, [r3, #12]
    pack_context->err_no = 0;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]
    pack_context->handle_pack_overflow = hpo;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	619a      	str	r2, [r3, #24]
    pack_context->handle_flush = NULL;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	61da      	str	r2, [r3, #28]
    pack_context->return_code = test_byte_order();
 8000ba4:	f7ff ffc6 	bl	8000b34 <test_byte_order>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	611a      	str	r2, [r3, #16]
    return pack_context->return_code;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	691b      	ldr	r3, [r3, #16]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <cw_pack_unsigned>:

/*  Packing routines  --------------------------------------------------------------------------------  */


void cw_pack_unsigned(cw_pack_context* pack_context, uint64_t i)
{
 8000bba:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bbe:	b0a2      	sub	sp, #136	; 0x88
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8000bc4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if (pack_context->return_code)
 8000bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f040 81b9 	bne.w	8000f44 <cw_pack_unsigned+0x38a>
        return;

    if (i < 128)
 8000bd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000bd6:	2a80      	cmp	r2, #128	; 0x80
 8000bd8:	f173 0300 	sbcs.w	r3, r3, #0
 8000bdc:	d224      	bcs.n	8000c28 <cw_pack_unsigned+0x6e>
        tryMove0(i);
 8000bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d115      	bne.n	8000c16 <cw_pack_unsigned+0x5c>
 8000bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d104      	bne.n	8000bfc <cw_pack_unsigned+0x42>
 8000bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bf4:	f06f 0201 	mvn.w	r2, #1
 8000bf8:	611a      	str	r2, [r3, #16]
 8000bfa:	e1a4      	b.n	8000f46 <cw_pack_unsigned+0x38c>
 8000bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	2101      	movs	r1, #1
 8000c02:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000c04:	4798      	blx	r3
 8000c06:	6578      	str	r0, [r7, #84]	; 0x54
 8000c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <cw_pack_unsigned+0x5c>
 8000c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c12:	611a      	str	r2, [r3, #16]
 8000c14:	e197      	b.n	8000f46 <cw_pack_unsigned+0x38c>
 8000c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	1c59      	adds	r1, r3, #1
 8000c1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c1e:	6011      	str	r1, [r2, #0]
 8000c20:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	e18e      	b.n	8000f46 <cw_pack_unsigned+0x38c>

    if (i < 256)
 8000c28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000c2c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000c30:	f173 0300 	sbcs.w	r3, r3, #0
 8000c34:	d23e      	bcs.n	8000cb4 <cw_pack_unsigned+0xfa>
        tryMove1(0xcc, i);
 8000c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000c3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c42:	3302      	adds	r3, #2
 8000c44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d91e      	bls.n	8000c92 <cw_pack_unsigned+0xd8>
 8000c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d104      	bne.n	8000c66 <cw_pack_unsigned+0xac>
 8000c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c5e:	f06f 0201 	mvn.w	r2, #1
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	e16f      	b.n	8000f46 <cw_pack_unsigned+0x38c>
 8000c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000c6e:	4798      	blx	r3
 8000c70:	65b8      	str	r0, [r7, #88]	; 0x58
 8000c72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d003      	beq.n	8000c80 <cw_pack_unsigned+0xc6>
 8000c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000c7c:	611a      	str	r2, [r3, #16]
 8000c7e:	e162      	b.n	8000f46 <cw_pack_unsigned+0x38c>
 8000c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000c88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8000ca4:	22cc      	movs	r2, #204	; 0xcc
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	e148      	b.n	8000f46 <cw_pack_unsigned+0x38c>

    if (i < 0x10000L)
 8000cb4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000cb8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000cbc:	f173 0300 	sbcs.w	r3, r3, #0
 8000cc0:	d244      	bcs.n	8000d4c <cw_pack_unsigned+0x192>
    {
        tryMove2(0xcd, i);
 8000cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000cc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000cca:	3303      	adds	r3, #3
 8000ccc:	67bb      	str	r3, [r7, #120]	; 0x78
 8000cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d91b      	bls.n	8000d10 <cw_pack_unsigned+0x156>
 8000cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d104      	bne.n	8000cea <cw_pack_unsigned+0x130>
 8000ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce2:	f06f 0201 	mvn.w	r2, #1
 8000ce6:	611a      	str	r2, [r3, #16]
 8000ce8:	e12d      	b.n	8000f46 <cw_pack_unsigned+0x38c>
 8000cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	2103      	movs	r1, #3
 8000cf0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000cf2:	4798      	blx	r3
 8000cf4:	65f8      	str	r0, [r7, #92]	; 0x5c
 8000cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d003      	beq.n	8000d04 <cw_pack_unsigned+0x14a>
 8000cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cfe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000d00:	611a      	str	r2, [r3, #16]
 8000d02:	e120      	b.n	8000f46 <cw_pack_unsigned+0x38c>
 8000d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000d0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d0c:	3303      	adds	r3, #3
 8000d0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d12:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d18:	1c5a      	adds	r2, r3, #1
 8000d1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000d1c:	22cd      	movs	r2, #205	; 0xcd
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000d24:	f04f 0200 	mov.w	r2, #0
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	0a02      	lsrs	r2, r0, #8
 8000d2e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000d32:	0a0b      	lsrs	r3, r1, #8
 8000d34:	b293      	uxth	r3, r2
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	4313      	orrs	r3, r2
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d48:	801a      	strh	r2, [r3, #0]
 8000d4a:	e0fc      	b.n	8000f46 <cw_pack_unsigned+0x38c>
    }
    if (i < 0x100000000LL)
 8000d4c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d240      	bcs.n	8000dd6 <cw_pack_unsigned+0x21c>
        tryMove4(0xce, i);
 8000d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	677b      	str	r3, [r7, #116]	; 0x74
 8000d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d5c:	3305      	adds	r3, #5
 8000d5e:	673b      	str	r3, [r7, #112]	; 0x70
 8000d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d91b      	bls.n	8000da2 <cw_pack_unsigned+0x1e8>
 8000d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d104      	bne.n	8000d7c <cw_pack_unsigned+0x1c2>
 8000d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d74:	f06f 0201 	mvn.w	r2, #1
 8000d78:	611a      	str	r2, [r3, #16]
 8000d7a:	e0e4      	b.n	8000f46 <cw_pack_unsigned+0x38c>
 8000d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	2105      	movs	r1, #5
 8000d82:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000d84:	4798      	blx	r3
 8000d86:	6638      	str	r0, [r7, #96]	; 0x60
 8000d88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d003      	beq.n	8000d96 <cw_pack_unsigned+0x1dc>
 8000d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d92:	611a      	str	r2, [r3, #16]
 8000d94:	e0d7      	b.n	8000f46 <cw_pack_unsigned+0x38c>
 8000d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	677b      	str	r3, [r7, #116]	; 0x74
 8000d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d9e:	3305      	adds	r3, #5
 8000da0:	673b      	str	r3, [r7, #112]	; 0x70
 8000da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000da4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	677a      	str	r2, [r7, #116]	; 0x74
 8000dae:	22ce      	movs	r2, #206	; 0xce
 8000db0:	701a      	strb	r2, [r3, #0]
 8000db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000db4:	0e1a      	lsrs	r2, r3, #24
 8000db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dc2:	021b      	lsls	r3, r3, #8
 8000dc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dcc:	061b      	lsls	r3, r3, #24
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	e0b7      	b.n	8000f46 <cw_pack_unsigned+0x38c>

    tryMove8(0xcf,i);
 8000dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dde:	3309      	adds	r3, #9
 8000de0:	66bb      	str	r3, [r7, #104]	; 0x68
 8000de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d91b      	bls.n	8000e24 <cw_pack_unsigned+0x26a>
 8000dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d104      	bne.n	8000dfe <cw_pack_unsigned+0x244>
 8000df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000df6:	f06f 0201 	mvn.w	r2, #1
 8000dfa:	611a      	str	r2, [r3, #16]
 8000dfc:	e0a3      	b.n	8000f46 <cw_pack_unsigned+0x38c>
 8000dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	2109      	movs	r1, #9
 8000e04:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e06:	4798      	blx	r3
 8000e08:	6678      	str	r0, [r7, #100]	; 0x64
 8000e0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <cw_pack_unsigned+0x25e>
 8000e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	e096      	b.n	8000f46 <cw_pack_unsigned+0x38c>
 8000e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e20:	3309      	adds	r3, #9
 8000e22:	66bb      	str	r3, [r7, #104]	; 0x68
 8000e24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000e2c:	1c53      	adds	r3, r2, #1
 8000e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e30:	23cf      	movs	r3, #207	; 0xcf
 8000e32:	7013      	strb	r3, [r2, #0]
 8000e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e36:	0a1a      	lsrs	r2, r3, #8
 8000e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e3a:	061b      	lsls	r3, r3, #24
 8000e3c:	ea42 0503 	orr.w	r5, r2, r3
 8000e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e42:	0a1a      	lsrs	r2, r3, #8
 8000e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e46:	061b      	lsls	r3, r3, #24
 8000e48:	ea42 0403 	orr.w	r4, r2, r3
 8000e4c:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8000e50:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e52:	f405 437f 	and.w	r3, r5, #65280	; 0xff00
 8000e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e5a:	021a      	lsls	r2, r3, #8
 8000e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e5e:	0e1b      	lsrs	r3, r3, #24
 8000e60:	ea42 0a03 	orr.w	sl, r2, r3
 8000e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e66:	021a      	lsls	r2, r3, #8
 8000e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e6a:	0e1b      	lsrs	r3, r3, #24
 8000e6c:	ea42 0b03 	orr.w	fp, r2, r3
 8000e70:	f40a 087f 	and.w	r8, sl, #16711680	; 0xff0000
 8000e74:	f40b 097f 	and.w	r9, fp, #16711680	; 0xff0000
 8000e78:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	ea43 0308 	orr.w	r3, r3, r8
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
 8000e84:	4613      	mov	r3, r2
 8000e86:	ea43 0309 	orr.w	r3, r3, r9
 8000e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8000e8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000e90:	f04f 0000 	mov.w	r0, #0
 8000e94:	f04f 0100 	mov.w	r1, #0
 8000e98:	0a10      	lsrs	r0, r2, #8
 8000e9a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000e9e:	0a19      	lsrs	r1, r3, #8
 8000ea0:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8000eae:	4623      	mov	r3, r4
 8000eb0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	623b      	str	r3, [r7, #32]
 8000eba:	462b      	mov	r3, r5
 8000ebc:	460a      	mov	r2, r1
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	020b      	lsls	r3, r1, #8
 8000ed0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8000ed4:	0202      	lsls	r2, r0, #8
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	61b9      	str	r1, [r7, #24]
 8000eda:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000ede:	61fb      	str	r3, [r7, #28]
 8000ee0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000ee4:	4623      	mov	r3, r4
 8000ee6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000eea:	4602      	mov	r2, r0
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	462b      	mov	r3, r5
 8000ef2:	460a      	mov	r2, r1
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	0e0a      	lsrs	r2, r1, #24
 8000f06:	2300      	movs	r3, #0
 8000f08:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000f0c:	4621      	mov	r1, r4
 8000f0e:	4311      	orrs	r1, r2
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	4629      	mov	r1, r5
 8000f14:	4319      	orrs	r1, r3
 8000f16:	60f9      	str	r1, [r7, #12]
 8000f18:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	f04f 0300 	mov.w	r3, #0
 8000f24:	0603      	lsls	r3, r0, #24
 8000f26:	2200      	movs	r2, #0
 8000f28:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000f2c:	4621      	mov	r1, r4
 8000f2e:	4311      	orrs	r1, r2
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	4629      	mov	r1, r5
 8000f34:	4319      	orrs	r1, r3
 8000f36:	6079      	str	r1, [r7, #4]
 8000f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000f3e:	e9c3 1200 	strd	r1, r2, [r3]
 8000f42:	e000      	b.n	8000f46 <cw_pack_unsigned+0x38c>
        return;
 8000f44:	bf00      	nop
}
 8000f46:	3788      	adds	r7, #136	; 0x88
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000f4e <cw_pack_array_size>:
    tryMove0(b? 0xc3: 0xc2);
}


void cw_pack_array_size(cw_pack_context* pack_context, uint32_t n)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b08a      	sub	sp, #40	; 0x28
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	6039      	str	r1, [r7, #0]
    if (pack_context->return_code)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f040 80ad 	bne.w	80010bc <cw_pack_array_size+0x16e>
        return;

    if (n < 16)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d827      	bhi.n	8000fb8 <cw_pack_array_size+0x6a>
        tryMove0(0x90 | n);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d115      	bne.n	8000fa0 <cw_pack_array_size+0x52>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d104      	bne.n	8000f86 <cw_pack_array_size+0x38>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f06f 0201 	mvn.w	r2, #1
 8000f82:	611a      	str	r2, [r3, #16]
 8000f84:	e09b      	b.n	80010be <cw_pack_array_size+0x170>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	4798      	blx	r3
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <cw_pack_array_size+0x52>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	611a      	str	r2, [r3, #16]
 8000f9e:	e08e      	b.n	80010be <cw_pack_array_size+0x170>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	1c58      	adds	r0, r3, #1
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	6008      	str	r0, [r1, #0]
 8000fae:	f062 026f 	orn	r2, r2, #111	; 0x6f
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	e082      	b.n	80010be <cw_pack_array_size+0x170>

    if (n < 65536)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fbe:	d23c      	bcs.n	800103a <cw_pack_array_size+0xec>
        tryMove2(0xdc, n);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	3303      	adds	r3, #3
 8000fca:	623b      	str	r3, [r7, #32]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	6a3a      	ldr	r2, [r7, #32]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d91b      	bls.n	800100e <cw_pack_array_size+0xc0>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d104      	bne.n	8000fe8 <cw_pack_array_size+0x9a>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f06f 0201 	mvn.w	r2, #1
 8000fe4:	611a      	str	r2, [r3, #16]
 8000fe6:	e06a      	b.n	80010be <cw_pack_array_size+0x170>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	2103      	movs	r1, #3
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	4798      	blx	r3
 8000ff2:	6138      	str	r0, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <cw_pack_array_size+0xb4>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	e05d      	b.n	80010be <cw_pack_array_size+0x170>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100a:	3303      	adds	r3, #3
 800100c:	623b      	str	r3, [r7, #32]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a3a      	ldr	r2, [r7, #32]
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	627a      	str	r2, [r7, #36]	; 0x24
 800101a:	22dc      	movs	r2, #220	; 0xdc
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	b29b      	uxth	r3, r3
 8001024:	b2db      	uxtb	r3, r3
 8001026:	b29a      	uxth	r2, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b29b      	uxth	r3, r3
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	b29b      	uxth	r3, r3
 8001030:	4313      	orrs	r3, r2
 8001032:	b29a      	uxth	r2, r3
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	801a      	strh	r2, [r3, #0]
 8001038:	e041      	b.n	80010be <cw_pack_array_size+0x170>

    tryMove4(0xdd, n);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	3305      	adds	r3, #5
 8001044:	61bb      	str	r3, [r7, #24]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	429a      	cmp	r2, r3
 800104e:	d91b      	bls.n	8001088 <cw_pack_array_size+0x13a>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d104      	bne.n	8001062 <cw_pack_array_size+0x114>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f06f 0201 	mvn.w	r2, #1
 800105e:	611a      	str	r2, [r3, #16]
 8001060:	e02d      	b.n	80010be <cw_pack_array_size+0x170>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	2105      	movs	r1, #5
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	4798      	blx	r3
 800106c:	6178      	str	r0, [r7, #20]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <cw_pack_array_size+0x12e>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	611a      	str	r2, [r3, #16]
 800107a:	e020      	b.n	80010be <cw_pack_array_size+0x170>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3305      	adds	r3, #5
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	61fa      	str	r2, [r7, #28]
 8001094:	22dd      	movs	r2, #221	; 0xdd
 8001096:	701a      	strb	r2, [r3, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	0e1a      	lsrs	r2, r3, #24
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	0a1b      	lsrs	r3, r3, #8
 80010a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80010a4:	431a      	orrs	r2, r3
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80010ae:	431a      	orrs	r2, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	061b      	lsls	r3, r3, #24
 80010b4:	431a      	orrs	r2, r3
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	e000      	b.n	80010be <cw_pack_array_size+0x170>
        return;
 80010bc:	bf00      	nop
}
 80010be:	3728      	adds	r7, #40	; 0x28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <cw_unpack_context_init>:

/*******************************   U N P A C K   **********************************/


int cw_unpack_context_init (cw_unpack_context* unpack_context, const void* data, unsigned long length, unpack_underflow_handler huu)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	603b      	str	r3, [r7, #0]
    unpack_context->start = unpack_context->current = (uint8_t*)data;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	61da      	str	r2, [r3, #28]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	69da      	ldr	r2, [r3, #28]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	619a      	str	r2, [r3, #24]
    unpack_context->end = unpack_context->start + length;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	699a      	ldr	r2, [r3, #24]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	441a      	add	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	621a      	str	r2, [r3, #32]
    unpack_context->return_code = test_byte_order();
 80010ec:	f7ff fd22 	bl	8000b34 <test_byte_order>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24
    unpack_context->err_no = 0;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2200      	movs	r2, #0
 80010fa:	629a      	str	r2, [r3, #40]	; 0x28
    unpack_context->handle_unpack_underflow = huu;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	62da      	str	r2, [r3, #44]	; 0x2c
    return unpack_context->return_code;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <cw_unpack_next>:
/*  Unpacking routines  ----------------------------------------------------------  */



void cw_unpack_next (cw_unpack_context* unpack_context)
{
 8001110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001114:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 8001118:	af00      	add	r7, sp, #0
 800111a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800111e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001122:	6018      	str	r0, [r3, #0]
    if (unpack_context->return_code)
 8001124:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001128:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	2b00      	cmp	r3, #0
 8001132:	f044 84bf 	bne.w	8005ab4 <cw_unpack_next+0x49a4>
    uint32_t    tmpu32;
    uint16_t    tmpu16;
    uint8_t*    p;

#define buffer_end_return_code  CWP_RC_END_OF_INPUT;
    cw_unpack_assert_space(1);
 8001136:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800113a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001146:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800114a:	3301      	adds	r3, #1
 800114c:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 8001150:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001154:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6a1a      	ldr	r2, [r3, #32]
 800115c:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8001160:	4293      	cmp	r3, r2
 8001162:	d962      	bls.n	800122a <cw_unpack_next+0x11a>
 8001164:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001168:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001170:	2b00      	cmp	r3, #0
 8001172:	d111      	bne.n	8001198 <cw_unpack_next+0x88>
 8001174:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001178:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001182:	801a      	strh	r2, [r3, #0]
 8001184:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001188:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f04f 32ff 	mov.w	r2, #4294967295
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
 8001194:	f004 bc97 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8001198:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800119c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011a4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80011a8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80011ac:	2101      	movs	r1, #1
 80011ae:	6818      	ldr	r0, [r3, #0]
 80011b0:	4790      	blx	r2
 80011b2:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 80011b6:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d028      	beq.n	8001210 <cw_unpack_next+0x100>
 80011be:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80011c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c6:	d011      	beq.n	80011ec <cw_unpack_next+0xdc>
 80011c8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80011cc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011d6:	801a      	strh	r2, [r3, #0]
 80011d8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80011dc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80011e6:	625a      	str	r2, [r3, #36]	; 0x24
 80011e8:	f004 bc6d 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80011ec:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80011f0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011fa:	801a      	strh	r2, [r3, #0]
 80011fc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001200:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f04f 32ff 	mov.w	r2, #4294967295
 800120a:	625a      	str	r2, [r3, #36]	; 0x24
 800120c:	f004 bc5b 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8001210:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001214:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001220:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001224:	3301      	adds	r3, #1
 8001226:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 800122a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800122e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8001238:	61d3      	str	r3, [r2, #28]
    uint8_t c = *p;
 800123a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	f887 32b7 	strb.w	r3, [r7, #695]	; 0x2b7
#undef buffer_end_return_code
#define buffer_end_return_code  CWP_RC_BUFFER_UNDERFLOW;
    switch (c)
 8001244:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 8001248:	2bff      	cmp	r3, #255	; 0xff
 800124a:	f204 8422 	bhi.w	8005a92 <cw_unpack_next+0x4982>
 800124e:	a201      	add	r2, pc, #4	; (adr r2, 8001254 <cw_unpack_next+0x144>)
 8001250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001254:	08001655 	.word	0x08001655
 8001258:	08001655 	.word	0x08001655
 800125c:	08001655 	.word	0x08001655
 8001260:	08001655 	.word	0x08001655
 8001264:	08001655 	.word	0x08001655
 8001268:	08001655 	.word	0x08001655
 800126c:	08001655 	.word	0x08001655
 8001270:	08001655 	.word	0x08001655
 8001274:	08001655 	.word	0x08001655
 8001278:	08001655 	.word	0x08001655
 800127c:	08001655 	.word	0x08001655
 8001280:	08001655 	.word	0x08001655
 8001284:	08001655 	.word	0x08001655
 8001288:	08001655 	.word	0x08001655
 800128c:	08001655 	.word	0x08001655
 8001290:	08001655 	.word	0x08001655
 8001294:	08001655 	.word	0x08001655
 8001298:	08001655 	.word	0x08001655
 800129c:	08001655 	.word	0x08001655
 80012a0:	08001655 	.word	0x08001655
 80012a4:	08001655 	.word	0x08001655
 80012a8:	08001655 	.word	0x08001655
 80012ac:	08001655 	.word	0x08001655
 80012b0:	08001655 	.word	0x08001655
 80012b4:	08001655 	.word	0x08001655
 80012b8:	08001655 	.word	0x08001655
 80012bc:	08001655 	.word	0x08001655
 80012c0:	08001655 	.word	0x08001655
 80012c4:	08001655 	.word	0x08001655
 80012c8:	08001655 	.word	0x08001655
 80012cc:	08001655 	.word	0x08001655
 80012d0:	08001655 	.word	0x08001655
 80012d4:	08001655 	.word	0x08001655
 80012d8:	08001655 	.word	0x08001655
 80012dc:	08001655 	.word	0x08001655
 80012e0:	08001655 	.word	0x08001655
 80012e4:	08001655 	.word	0x08001655
 80012e8:	08001655 	.word	0x08001655
 80012ec:	08001655 	.word	0x08001655
 80012f0:	08001655 	.word	0x08001655
 80012f4:	08001655 	.word	0x08001655
 80012f8:	08001655 	.word	0x08001655
 80012fc:	08001655 	.word	0x08001655
 8001300:	08001655 	.word	0x08001655
 8001304:	08001655 	.word	0x08001655
 8001308:	08001655 	.word	0x08001655
 800130c:	08001655 	.word	0x08001655
 8001310:	08001655 	.word	0x08001655
 8001314:	08001655 	.word	0x08001655
 8001318:	08001655 	.word	0x08001655
 800131c:	08001655 	.word	0x08001655
 8001320:	08001655 	.word	0x08001655
 8001324:	08001655 	.word	0x08001655
 8001328:	08001655 	.word	0x08001655
 800132c:	08001655 	.word	0x08001655
 8001330:	08001655 	.word	0x08001655
 8001334:	08001655 	.word	0x08001655
 8001338:	08001655 	.word	0x08001655
 800133c:	08001655 	.word	0x08001655
 8001340:	08001655 	.word	0x08001655
 8001344:	08001655 	.word	0x08001655
 8001348:	08001655 	.word	0x08001655
 800134c:	08001655 	.word	0x08001655
 8001350:	08001655 	.word	0x08001655
 8001354:	08001655 	.word	0x08001655
 8001358:	08001655 	.word	0x08001655
 800135c:	08001655 	.word	0x08001655
 8001360:	08001655 	.word	0x08001655
 8001364:	08001655 	.word	0x08001655
 8001368:	08001655 	.word	0x08001655
 800136c:	08001655 	.word	0x08001655
 8001370:	08001655 	.word	0x08001655
 8001374:	08001655 	.word	0x08001655
 8001378:	08001655 	.word	0x08001655
 800137c:	08001655 	.word	0x08001655
 8001380:	08001655 	.word	0x08001655
 8001384:	08001655 	.word	0x08001655
 8001388:	08001655 	.word	0x08001655
 800138c:	08001655 	.word	0x08001655
 8001390:	08001655 	.word	0x08001655
 8001394:	08001655 	.word	0x08001655
 8001398:	08001655 	.word	0x08001655
 800139c:	08001655 	.word	0x08001655
 80013a0:	08001655 	.word	0x08001655
 80013a4:	08001655 	.word	0x08001655
 80013a8:	08001655 	.word	0x08001655
 80013ac:	08001655 	.word	0x08001655
 80013b0:	08001655 	.word	0x08001655
 80013b4:	08001655 	.word	0x08001655
 80013b8:	08001655 	.word	0x08001655
 80013bc:	08001655 	.word	0x08001655
 80013c0:	08001655 	.word	0x08001655
 80013c4:	08001655 	.word	0x08001655
 80013c8:	08001655 	.word	0x08001655
 80013cc:	08001655 	.word	0x08001655
 80013d0:	08001655 	.word	0x08001655
 80013d4:	08001655 	.word	0x08001655
 80013d8:	08001655 	.word	0x08001655
 80013dc:	08001655 	.word	0x08001655
 80013e0:	08001655 	.word	0x08001655
 80013e4:	08001655 	.word	0x08001655
 80013e8:	08001655 	.word	0x08001655
 80013ec:	08001655 	.word	0x08001655
 80013f0:	08001655 	.word	0x08001655
 80013f4:	08001655 	.word	0x08001655
 80013f8:	08001655 	.word	0x08001655
 80013fc:	08001655 	.word	0x08001655
 8001400:	08001655 	.word	0x08001655
 8001404:	08001655 	.word	0x08001655
 8001408:	08001655 	.word	0x08001655
 800140c:	08001655 	.word	0x08001655
 8001410:	08001655 	.word	0x08001655
 8001414:	08001655 	.word	0x08001655
 8001418:	08001655 	.word	0x08001655
 800141c:	08001655 	.word	0x08001655
 8001420:	08001655 	.word	0x08001655
 8001424:	08001655 	.word	0x08001655
 8001428:	08001655 	.word	0x08001655
 800142c:	08001655 	.word	0x08001655
 8001430:	08001655 	.word	0x08001655
 8001434:	08001655 	.word	0x08001655
 8001438:	08001655 	.word	0x08001655
 800143c:	08001655 	.word	0x08001655
 8001440:	08001655 	.word	0x08001655
 8001444:	08001655 	.word	0x08001655
 8001448:	08001655 	.word	0x08001655
 800144c:	08001655 	.word	0x08001655
 8001450:	08001655 	.word	0x08001655
 8001454:	08001689 	.word	0x08001689
 8001458:	08001689 	.word	0x08001689
 800145c:	08001689 	.word	0x08001689
 8001460:	08001689 	.word	0x08001689
 8001464:	08001689 	.word	0x08001689
 8001468:	08001689 	.word	0x08001689
 800146c:	08001689 	.word	0x08001689
 8001470:	08001689 	.word	0x08001689
 8001474:	08001689 	.word	0x08001689
 8001478:	08001689 	.word	0x08001689
 800147c:	08001689 	.word	0x08001689
 8001480:	08001689 	.word	0x08001689
 8001484:	08001689 	.word	0x08001689
 8001488:	08001689 	.word	0x08001689
 800148c:	08001689 	.word	0x08001689
 8001490:	08001689 	.word	0x08001689
 8001494:	080016b1 	.word	0x080016b1
 8001498:	080016b1 	.word	0x080016b1
 800149c:	080016b1 	.word	0x080016b1
 80014a0:	080016b1 	.word	0x080016b1
 80014a4:	080016b1 	.word	0x080016b1
 80014a8:	080016b1 	.word	0x080016b1
 80014ac:	080016b1 	.word	0x080016b1
 80014b0:	080016b1 	.word	0x080016b1
 80014b4:	080016b1 	.word	0x080016b1
 80014b8:	080016b1 	.word	0x080016b1
 80014bc:	080016b1 	.word	0x080016b1
 80014c0:	080016b1 	.word	0x080016b1
 80014c4:	080016b1 	.word	0x080016b1
 80014c8:	080016b1 	.word	0x080016b1
 80014cc:	080016b1 	.word	0x080016b1
 80014d0:	080016b1 	.word	0x080016b1
 80014d4:	080016d9 	.word	0x080016d9
 80014d8:	080016d9 	.word	0x080016d9
 80014dc:	080016d9 	.word	0x080016d9
 80014e0:	080016d9 	.word	0x080016d9
 80014e4:	080016d9 	.word	0x080016d9
 80014e8:	080016d9 	.word	0x080016d9
 80014ec:	080016d9 	.word	0x080016d9
 80014f0:	080016d9 	.word	0x080016d9
 80014f4:	080016d9 	.word	0x080016d9
 80014f8:	080016d9 	.word	0x080016d9
 80014fc:	080016d9 	.word	0x080016d9
 8001500:	080016d9 	.word	0x080016d9
 8001504:	080016d9 	.word	0x080016d9
 8001508:	080016d9 	.word	0x080016d9
 800150c:	080016d9 	.word	0x080016d9
 8001510:	080016d9 	.word	0x080016d9
 8001514:	080016d9 	.word	0x080016d9
 8001518:	080016d9 	.word	0x080016d9
 800151c:	080016d9 	.word	0x080016d9
 8001520:	080016d9 	.word	0x080016d9
 8001524:	080016d9 	.word	0x080016d9
 8001528:	080016d9 	.word	0x080016d9
 800152c:	080016d9 	.word	0x080016d9
 8001530:	080016d9 	.word	0x080016d9
 8001534:	080016d9 	.word	0x080016d9
 8001538:	080016d9 	.word	0x080016d9
 800153c:	080016d9 	.word	0x080016d9
 8001540:	080016d9 	.word	0x080016d9
 8001544:	080016d9 	.word	0x080016d9
 8001548:	080016d9 	.word	0x080016d9
 800154c:	080016d9 	.word	0x080016d9
 8001550:	080016d9 	.word	0x080016d9
 8001554:	0800184f 	.word	0x0800184f
 8001558:	08005a93 	.word	0x08005a93
 800155c:	08001863 	.word	0x08001863
 8001560:	08001885 	.word	0x08001885
 8001564:	080018a7 	.word	0x080018a7
 8001568:	08001b39 	.word	0x08001b39
 800156c:	08001deb 	.word	0x08001deb
 8001570:	080020d7 	.word	0x080020d7
 8001574:	0800290d 	.word	0x0800290d
 8001578:	08002cf1 	.word	0x08002cf1
 800157c:	0800310f 	.word	0x0800310f
 8001580:	080032a9 	.word	0x080032a9
 8001584:	08003543 	.word	0x08003543
 8001588:	08003697 	.word	0x08003697
 800158c:	0800380b 	.word	0x0800380b
 8001590:	080039b9 	.word	0x080039b9
 8001594:	08003c53 	.word	0x08003c53
 8001598:	08003dcd 	.word	0x08003dcd
 800159c:	08003f67 	.word	0x08003f67
 80015a0:	08004139 	.word	0x08004139
 80015a4:	080043f3 	.word	0x080043f3
 80015a8:	08004585 	.word	0x08004585
 80015ac:	08004717 	.word	0x08004717
 80015b0:	080048f9 	.word	0x080048f9
 80015b4:	08004bd1 	.word	0x08004bd1
 80015b8:	08004d4b 	.word	0x08004d4b
 80015bc:	08004fad 	.word	0x08004fad
 80015c0:	0800522f 	.word	0x0800522f
 80015c4:	080054df 	.word	0x080054df
 80015c8:	08005623 	.word	0x08005623
 80015cc:	080057a1 	.word	0x080057a1
 80015d0:	080058e5 	.word	0x080058e5
 80015d4:	08005a63 	.word	0x08005a63
 80015d8:	08005a63 	.word	0x08005a63
 80015dc:	08005a63 	.word	0x08005a63
 80015e0:	08005a63 	.word	0x08005a63
 80015e4:	08005a63 	.word	0x08005a63
 80015e8:	08005a63 	.word	0x08005a63
 80015ec:	08005a63 	.word	0x08005a63
 80015f0:	08005a63 	.word	0x08005a63
 80015f4:	08005a63 	.word	0x08005a63
 80015f8:	08005a63 	.word	0x08005a63
 80015fc:	08005a63 	.word	0x08005a63
 8001600:	08005a63 	.word	0x08005a63
 8001604:	08005a63 	.word	0x08005a63
 8001608:	08005a63 	.word	0x08005a63
 800160c:	08005a63 	.word	0x08005a63
 8001610:	08005a63 	.word	0x08005a63
 8001614:	08005a63 	.word	0x08005a63
 8001618:	08005a63 	.word	0x08005a63
 800161c:	08005a63 	.word	0x08005a63
 8001620:	08005a63 	.word	0x08005a63
 8001624:	08005a63 	.word	0x08005a63
 8001628:	08005a63 	.word	0x08005a63
 800162c:	08005a63 	.word	0x08005a63
 8001630:	08005a63 	.word	0x08005a63
 8001634:	08005a63 	.word	0x08005a63
 8001638:	08005a63 	.word	0x08005a63
 800163c:	08005a63 	.word	0x08005a63
 8001640:	08005a63 	.word	0x08005a63
 8001644:	08005a63 	.word	0x08005a63
 8001648:	08005a63 	.word	0x08005a63
 800164c:	08005a63 	.word	0x08005a63
 8001650:	08005a63 	.word	0x08005a63
        case 0x58: case 0x59: case 0x5a: case 0x5b: case 0x5c: case 0x5d: case 0x5e: case 0x5f:
        case 0x60: case 0x61: case 0x62: case 0x63: case 0x64: case 0x65: case 0x66: case 0x67:
        case 0x68: case 0x69: case 0x6a: case 0x6b: case 0x6c: case 0x6d: case 0x6e: case 0x6f:
        case 0x70: case 0x71: case 0x72: case 0x73: case 0x74: case 0x75: case 0x76: case 0x77:
        case 0x78: case 0x79: case 0x7a: case 0x7b: case 0x7c: case 0x7d: case 0x7e: case 0x7f:
                    getDDItem(CWP_ITEM_POSITIVE_INTEGER, i64, c);       return;  // positive fixnum
 8001654:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001658:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8001662:	801a      	strh	r2, [r3, #0]
 8001664:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 8001668:	2200      	movs	r2, #0
 800166a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800166e:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 8001672:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001676:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	e9d7 127a 	ldrd	r1, r2, [r7, #488]	; 0x1e8
 8001680:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8001684:	f004 ba1f 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0x80: case 0x81: case 0x82: case 0x83: case 0x84: case 0x85: case 0x86: case 0x87:
        case 0x88: case 0x89: case 0x8a: case 0x8b: case 0x8c: case 0x8d: case 0x8e: case 0x8f:
                    getDDItem(CWP_ITEM_MAP, map.size, c & 0x0f);        return;  // fixmap
 8001688:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800168c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f240 1235 	movw	r2, #309	; 0x135
 8001696:	801a      	strh	r2, [r3, #0]
 8001698:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 800169c:	f003 020f 	and.w	r2, r3, #15
 80016a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80016a4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	f004 ba0b 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0x90: case 0x91: case 0x92: case 0x93: case 0x94: case 0x95: case 0x96: case 0x97:
        case 0x98: case 0x99: case 0x9a: case 0x9b: case 0x9c: case 0x9d: case 0x9e: case 0x9f:
                    getDDItem(CWP_ITEM_ARRAY, array.size, c & 0x0f);    return;  // fixarray
 80016b0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80016b4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f44f 729a 	mov.w	r2, #308	; 0x134
 80016be:	801a      	strh	r2, [r3, #0]
 80016c0:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 80016c4:	f003 020f 	and.w	r2, r3, #15
 80016c8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80016cc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	f004 b9f7 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xa0: case 0xa1: case 0xa2: case 0xa3: case 0xa4: case 0xa5: case 0xa6: case 0xa7:
        case 0xa8: case 0xa9: case 0xaa: case 0xab: case 0xac: case 0xad: case 0xae: case 0xaf:
        case 0xb0: case 0xb1: case 0xb2: case 0xb3: case 0xb4: case 0xb5: case 0xb6: case 0xb7:
        case 0xb8: case 0xb9: case 0xba: case 0xbb: case 0xbc: case 0xbd: case 0xbe: case 0xbf:
                    getDDItem(CWP_ITEM_STR, str.length, c & 0x1f);              // fixraw
 80016d8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80016dc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80016e6:	801a      	strh	r2, [r3, #0]
 80016e8:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 80016ec:	f003 021f 	and.w	r2, r3, #31
 80016f0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80016f4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(str);
 80016fc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001700:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800170c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001710:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 800171c:	4413      	add	r3, r2
 800171e:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8001722:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001726:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 8001732:	429a      	cmp	r2, r3
 8001734:	d979      	bls.n	800182a <cw_unpack_next+0x71a>
 8001736:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800173a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	2b00      	cmp	r3, #0
 8001744:	d111      	bne.n	800176a <cw_unpack_next+0x65a>
 8001746:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800174a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001754:	801a      	strh	r2, [r3, #0]
 8001756:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800175a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f06f 0202 	mvn.w	r2, #2
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
 8001766:	f004 b9ae 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 800176a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800176e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001776:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800177a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	68d1      	ldr	r1, [r2, #12]
 8001782:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001786:	f5a2 74ba 	sub.w	r4, r2, #372	; 0x174
 800178a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800178e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001792:	6810      	ldr	r0, [r2, #0]
 8001794:	4798      	blx	r3
 8001796:	6020      	str	r0, [r4, #0]
 8001798:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800179c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d02e      	beq.n	8001804 <cw_unpack_next+0x6f4>
 80017a6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80017aa:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b4:	d014      	beq.n	80017e0 <cw_unpack_next+0x6d0>
 80017b6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80017ba:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017c4:	801a      	strh	r2, [r3, #0]
 80017c6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80017ca:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80017d4:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	625a      	str	r2, [r3, #36]	; 0x24
 80017dc:	f004 b973 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80017e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80017e4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017ee:	801a      	strh	r2, [r3, #0]
 80017f0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80017f4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f06f 0202 	mvn.w	r2, #2
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24
 8001800:	f004 b961 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8001804:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001808:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001814:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001818:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8001824:	4413      	add	r3, r2
 8001826:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 800182a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800182e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 8001838:	61da      	str	r2, [r3, #28]
 800183a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800183e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	f004 b93c 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xc0:  unpack_context->item.type = CWP_ITEM_NIL;           return;  // nil
 800184e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001852:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800185c:	801a      	strh	r2, [r3, #0]
 800185e:	f004 b932 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xc2:  getDDItem(CWP_ITEM_BOOLEAN, boolean, false);        return;  // false
 8001862:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001866:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f240 122d 	movw	r2, #301	; 0x12d
 8001870:	801a      	strh	r2, [r3, #0]
 8001872:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001876:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2200      	movs	r2, #0
 800187e:	721a      	strb	r2, [r3, #8]
 8001880:	f004 b921 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xc3:  getDDItem(CWP_ITEM_BOOLEAN, boolean, true);         return;  // true
 8001884:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001888:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f240 122d 	movw	r2, #301	; 0x12d
 8001892:	801a      	strh	r2, [r3, #0]
 8001894:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001898:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2201      	movs	r2, #1
 80018a0:	721a      	strb	r2, [r3, #8]
 80018a2:	f004 b910 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xc4:  getDDItem1(CWP_ITEM_BIN, bin.length, uint8_t);              // bin 8
 80018a6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80018aa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f240 1233 	movw	r2, #307	; 0x133
 80018b4:	801a      	strh	r2, [r3, #0]
 80018b6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80018ba:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80018c6:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80018ca:	3301      	adds	r3, #1
 80018cc:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 80018d0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80018d4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d96e      	bls.n	80019c2 <cw_unpack_next+0x8b2>
 80018e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80018e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d111      	bne.n	8001918 <cw_unpack_next+0x808>
 80018f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80018f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001902:	801a      	strh	r2, [r3, #0]
 8001904:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001908:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f06f 0202 	mvn.w	r2, #2
 8001912:	625a      	str	r2, [r3, #36]	; 0x24
 8001914:	f004 b8d7 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8001918:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800191c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001924:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001928:	f5a2 74b6 	sub.w	r4, r2, #364	; 0x16c
 800192c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001930:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001934:	2101      	movs	r1, #1
 8001936:	6810      	ldr	r0, [r2, #0]
 8001938:	4798      	blx	r3
 800193a:	6020      	str	r0, [r4, #0]
 800193c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001940:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d02e      	beq.n	80019a8 <cw_unpack_next+0x898>
 800194a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800194e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d014      	beq.n	8001984 <cw_unpack_next+0x874>
 800195a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800195e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001968:	801a      	strh	r2, [r3, #0]
 800196a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800196e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001978:	f5a2 72b6 	sub.w	r2, r2, #364	; 0x16c
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	625a      	str	r2, [r3, #36]	; 0x24
 8001980:	f004 b8a1 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8001984:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001988:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001992:	801a      	strh	r2, [r3, #0]
 8001994:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001998:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f06f 0202 	mvn.w	r2, #2
 80019a2:	625a      	str	r2, [r3, #36]	; 0x24
 80019a4:	f004 b88f 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80019a8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80019ac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80019b8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80019bc:	3301      	adds	r3, #1
 80019be:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 80019c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80019c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 80019d0:	61da      	str	r2, [r3, #28]
 80019d2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80019de:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(bin);
 80019e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80019ea:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80019f6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80019fa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8001a06:	4413      	add	r3, r2
 8001a08:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8001a0c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001a10:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d979      	bls.n	8001b14 <cw_unpack_next+0xa04>
 8001a20:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001a24:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d111      	bne.n	8001a54 <cw_unpack_next+0x944>
 8001a30:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001a34:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a3e:	801a      	strh	r2, [r3, #0]
 8001a40:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001a44:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f06f 0202 	mvn.w	r2, #2
 8001a4e:	625a      	str	r2, [r3, #36]	; 0x24
 8001a50:	f004 b839 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8001a54:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001a58:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001a64:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	68d1      	ldr	r1, [r2, #12]
 8001a6c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001a70:	f5a2 74b8 	sub.w	r4, r2, #368	; 0x170
 8001a74:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001a78:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a7c:	6810      	ldr	r0, [r2, #0]
 8001a7e:	4798      	blx	r3
 8001a80:	6020      	str	r0, [r4, #0]
 8001a82:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001a86:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d02e      	beq.n	8001aee <cw_unpack_next+0x9de>
 8001a90:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001a94:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9e:	d014      	beq.n	8001aca <cw_unpack_next+0x9ba>
 8001aa0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001aa4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aae:	801a      	strh	r2, [r3, #0]
 8001ab0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001ab4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001abe:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24
 8001ac6:	f003 bffe 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8001aca:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001ace:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ad8:	801a      	strh	r2, [r3, #0]
 8001ada:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001ade:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f06f 0202 	mvn.w	r2, #2
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
 8001aea:	f003 bfec 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8001aee:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001af2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001afe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b02:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8001b0e:	4413      	add	r3, r2
 8001b10:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8001b14:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b18:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 8001b22:	61da      	str	r2, [r3, #28]
 8001b24:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b28:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	f003 bfc7 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xc5:  getDDItem2(CWP_ITEM_BIN, bin.length, uint16_t);             // bin 16
 8001b38:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b3c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f240 1233 	movw	r2, #307	; 0x133
 8001b46:	801a      	strh	r2, [r3, #0]
 8001b48:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b4c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001b58:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8001b62:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b66:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d96e      	bls.n	8001c54 <cw_unpack_next+0xb44>
 8001b76:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b7a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d111      	bne.n	8001baa <cw_unpack_next+0xa9a>
 8001b86:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b8a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b94:	801a      	strh	r2, [r3, #0]
 8001b96:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b9a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0202 	mvn.w	r2, #2
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24
 8001ba6:	f003 bf8e 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8001baa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001bae:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001bba:	f5a2 74b2 	sub.w	r4, r2, #356	; 0x164
 8001bbe:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001bc2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	6810      	ldr	r0, [r2, #0]
 8001bca:	4798      	blx	r3
 8001bcc:	6020      	str	r0, [r4, #0]
 8001bce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001bd2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d02e      	beq.n	8001c3a <cw_unpack_next+0xb2a>
 8001bdc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001be0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bea:	d014      	beq.n	8001c16 <cw_unpack_next+0xb06>
 8001bec:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001bf0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bfa:	801a      	strh	r2, [r3, #0]
 8001bfc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001c00:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001c0a:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
 8001c12:	f003 bf58 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8001c16:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001c1a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c24:	801a      	strh	r2, [r3, #0]
 8001c26:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001c2a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f06f 0202 	mvn.w	r2, #2
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
 8001c36:	f003 bf46 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8001c3a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001c3e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001c4a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001c4e:	3302      	adds	r3, #2
 8001c50:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8001c54:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001c58:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8001c62:	61da      	str	r2, [r3, #28]
 8001c64:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 8001c6e:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	b21a      	sxth	r2, r3
 8001c76:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8001c7a:	0a1b      	lsrs	r3, r3, #8
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b21b      	sxth	r3, r3
 8001c84:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 8001c88:	f8b7 22aa 	ldrh.w	r2, [r7, #682]	; 0x2aa
 8001c8c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001c90:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(bin);
 8001c98:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001c9c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001ca8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001cac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8001cb8:	4413      	add	r3, r2
 8001cba:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8001cbe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001cc2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d979      	bls.n	8001dc6 <cw_unpack_next+0xcb6>
 8001cd2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001cd6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d111      	bne.n	8001d06 <cw_unpack_next+0xbf6>
 8001ce2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001ce6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cf0:	801a      	strh	r2, [r3, #0]
 8001cf2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001cf6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0202 	mvn.w	r2, #2
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24
 8001d02:	f003 bee0 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8001d06:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001d0a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001d16:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	68d1      	ldr	r1, [r2, #12]
 8001d1e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001d22:	f5a2 74b4 	sub.w	r4, r2, #360	; 0x168
 8001d26:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001d2a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d2e:	6810      	ldr	r0, [r2, #0]
 8001d30:	4798      	blx	r3
 8001d32:	6020      	str	r0, [r4, #0]
 8001d34:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001d38:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d02e      	beq.n	8001da0 <cw_unpack_next+0xc90>
 8001d42:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001d46:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d50:	d014      	beq.n	8001d7c <cw_unpack_next+0xc6c>
 8001d52:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001d56:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d60:	801a      	strh	r2, [r3, #0]
 8001d62:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001d66:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001d70:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	625a      	str	r2, [r3, #36]	; 0x24
 8001d78:	f003 bea5 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8001d7c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001d80:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d8a:	801a      	strh	r2, [r3, #0]
 8001d8c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001d90:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f06f 0202 	mvn.w	r2, #2
 8001d9a:	625a      	str	r2, [r3, #36]	; 0x24
 8001d9c:	f003 be93 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8001da0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001da4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001db0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001db4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8001dc6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001dca:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8001dd4:	61da      	str	r2, [r3, #28]
 8001dd6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001dda:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	f003 be6e 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xc6:  getDDItem4(CWP_ITEM_BIN, bin.length, uint32_t);             // bin 32
 8001dea:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001dee:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f240 1233 	movw	r2, #307	; 0x133
 8001df8:	801a      	strh	r2, [r3, #0]
 8001dfa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001dfe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001e0a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001e0e:	3304      	adds	r3, #4
 8001e10:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8001e14:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001e18:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d96e      	bls.n	8001f06 <cw_unpack_next+0xdf6>
 8001e28:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001e2c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d111      	bne.n	8001e5c <cw_unpack_next+0xd4c>
 8001e38:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001e3c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e46:	801a      	strh	r2, [r3, #0]
 8001e48:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001e4c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f06f 0202 	mvn.w	r2, #2
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24
 8001e58:	f003 be35 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8001e5c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001e60:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001e6c:	f5a2 74ae 	sub.w	r4, r2, #348	; 0x15c
 8001e70:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001e74:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001e78:	2104      	movs	r1, #4
 8001e7a:	6810      	ldr	r0, [r2, #0]
 8001e7c:	4798      	blx	r3
 8001e7e:	6020      	str	r0, [r4, #0]
 8001e80:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001e84:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d02e      	beq.n	8001eec <cw_unpack_next+0xddc>
 8001e8e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001e92:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d014      	beq.n	8001ec8 <cw_unpack_next+0xdb8>
 8001e9e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001ea2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eac:	801a      	strh	r2, [r3, #0]
 8001eae:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001eb2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001ebc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	625a      	str	r2, [r3, #36]	; 0x24
 8001ec4:	f003 bdff 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8001ec8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001ecc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ed6:	801a      	strh	r2, [r3, #0]
 8001ed8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001edc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f06f 0202 	mvn.w	r2, #2
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24
 8001ee8:	f003 bded 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8001eec:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001ef0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001efc:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001f00:	3304      	adds	r3, #4
 8001f02:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8001f06:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f0a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8001f14:	61da      	str	r2, [r3, #28]
 8001f16:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f20:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f2a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	061a      	lsls	r2, r3, #24
 8001f32:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f36:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001f42:	431a      	orrs	r2, r3
 8001f44:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f48:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	0a1b      	lsrs	r3, r3, #8
 8001f50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001f54:	431a      	orrs	r2, r3
 8001f56:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f5a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	0e1b      	lsrs	r3, r3, #24
 8001f62:	431a      	orrs	r2, r3
 8001f64:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f68:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f72:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f7c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(bin);
 8001f84:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f88:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001f94:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f98:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8001faa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001fae:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d979      	bls.n	80020b2 <cw_unpack_next+0xfa2>
 8001fbe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001fc2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d111      	bne.n	8001ff2 <cw_unpack_next+0xee2>
 8001fce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001fd2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fdc:	801a      	strh	r2, [r3, #0]
 8001fde:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001fe2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0202 	mvn.w	r2, #2
 8001fec:	625a      	str	r2, [r3, #36]	; 0x24
 8001fee:	f003 bd6a 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8001ff2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001ff6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffe:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002002:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	68d1      	ldr	r1, [r2, #12]
 800200a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800200e:	f5a2 74b0 	sub.w	r4, r2, #352	; 0x160
 8002012:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002016:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800201a:	6810      	ldr	r0, [r2, #0]
 800201c:	4798      	blx	r3
 800201e:	6020      	str	r0, [r4, #0]
 8002020:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002024:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d02e      	beq.n	800208c <cw_unpack_next+0xf7c>
 800202e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002032:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203c:	d014      	beq.n	8002068 <cw_unpack_next+0xf58>
 800203e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002042:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f240 32e7 	movw	r2, #999	; 0x3e7
 800204c:	801a      	strh	r2, [r3, #0]
 800204e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002052:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800205c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	625a      	str	r2, [r3, #36]	; 0x24
 8002064:	f003 bd2f 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8002068:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800206c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002076:	801a      	strh	r2, [r3, #0]
 8002078:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800207c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f06f 0202 	mvn.w	r2, #2
 8002086:	625a      	str	r2, [r3, #36]	; 0x24
 8002088:	f003 bd1d 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 800208c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002090:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800209c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80020a0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80020ac:	4413      	add	r3, r2
 80020ae:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 80020b2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80020b6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 80020c0:	61da      	str	r2, [r3, #28]
 80020c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80020c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	f003 bcf8 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xc7:  getDDItem1(CWP_ITEM_EXT, ext.length, uint8_t);              // ext 8
 80020d6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80020da:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	f44f 739b 	mov.w	r3, #310	; 0x136
 80020e4:	8013      	strh	r3, [r2, #0]
 80020e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80020ea:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80020f6:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80020fa:	3301      	adds	r3, #1
 80020fc:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8002100:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002104:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6a1a      	ldr	r2, [r3, #32]
 800210c:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8002110:	4293      	cmp	r3, r2
 8002112:	d96e      	bls.n	80021f2 <cw_unpack_next+0x10e2>
 8002114:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002118:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	2b00      	cmp	r3, #0
 8002122:	d111      	bne.n	8002148 <cw_unpack_next+0x1038>
 8002124:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002128:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002132:	801a      	strh	r2, [r3, #0]
 8002134:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002138:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f06f 0202 	mvn.w	r2, #2
 8002142:	625a      	str	r2, [r3, #36]	; 0x24
 8002144:	f003 bcbf 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8002148:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800214c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002154:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002158:	f5a3 74a4 	sub.w	r4, r3, #328	; 0x148
 800215c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002160:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002164:	2101      	movs	r1, #1
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	4790      	blx	r2
 800216a:	6020      	str	r0, [r4, #0]
 800216c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002170:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d02e      	beq.n	80021d8 <cw_unpack_next+0x10c8>
 800217a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800217e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d014      	beq.n	80021b4 <cw_unpack_next+0x10a4>
 800218a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800218e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002198:	801a      	strh	r2, [r3, #0]
 800219a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800219e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80021a8:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	625a      	str	r2, [r3, #36]	; 0x24
 80021b0:	f003 bc89 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80021b4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80021b8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021c2:	801a      	strh	r2, [r3, #0]
 80021c4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80021c8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f06f 0202 	mvn.w	r2, #2
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24
 80021d4:	f003 bc77 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80021d8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80021dc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80021e8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80021ec:	3301      	adds	r3, #1
 80021ee:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 80021f2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80021f6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8002200:	61d3      	str	r3, [r2, #28]
 8002202:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800220e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_space(1);
 8002216:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800221a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002226:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800222a:	3301      	adds	r3, #1
 800222c:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8002230:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002234:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6a1a      	ldr	r2, [r3, #32]
 800223c:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8002240:	4293      	cmp	r3, r2
 8002242:	d96e      	bls.n	8002322 <cw_unpack_next+0x1212>
 8002244:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002248:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d111      	bne.n	8002278 <cw_unpack_next+0x1168>
 8002254:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002258:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002262:	801a      	strh	r2, [r3, #0]
 8002264:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002268:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f06f 0202 	mvn.w	r2, #2
 8002272:	625a      	str	r2, [r3, #36]	; 0x24
 8002274:	f003 bc27 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8002278:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800227c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002284:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002288:	f5a3 74a6 	sub.w	r4, r3, #332	; 0x14c
 800228c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002290:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002294:	2101      	movs	r1, #1
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	4790      	blx	r2
 800229a:	6020      	str	r0, [r4, #0]
 800229c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80022a0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d02e      	beq.n	8002308 <cw_unpack_next+0x11f8>
 80022aa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80022ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b8:	d014      	beq.n	80022e4 <cw_unpack_next+0x11d4>
 80022ba:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80022be:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022c8:	801a      	strh	r2, [r3, #0]
 80022ca:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80022ce:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80022d8:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	625a      	str	r2, [r3, #36]	; 0x24
 80022e0:	f003 bbf1 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80022e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80022e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022f2:	801a      	strh	r2, [r3, #0]
 80022f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80022f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f06f 0202 	mvn.w	r2, #2
 8002302:	625a      	str	r2, [r3, #36]	; 0x24
 8002304:	f003 bbdf 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8002308:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800230c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002318:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800231c:	3301      	adds	r3, #1
 800231e:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8002322:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002326:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8002330:	61d3      	str	r3, [r2, #28]
                    unpack_context->item.type = (cwpack_item_types)*(int8_t*)p;
 8002332:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002336:	f993 3000 	ldrsb.w	r3, [r3]
 800233a:	b219      	sxth	r1, r3
 800233c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002340:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	460b      	mov	r3, r1
 8002348:	8013      	strh	r3, [r2, #0]
                    if (unpack_context->item.type == CWP_ITEM_TIMESTAMP)
 800234a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800234e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235c:	f040 822d 	bne.w	80027ba <cw_unpack_next+0x16aa>
                    {
                        if (unpack_context->item.as.ext.length == 12)
 8002360:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002364:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	2b0c      	cmp	r3, #12
 800236e:	f040 8212 	bne.w	8002796 <cw_unpack_next+0x1686>
                        {
                            cw_unpack_assert_space(4);
 8002372:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002376:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002382:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002386:	3304      	adds	r3, #4
 8002388:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
 800238c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002390:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6a1a      	ldr	r2, [r3, #32]
 8002398:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 800239c:	4293      	cmp	r3, r2
 800239e:	d96e      	bls.n	800247e <cw_unpack_next+0x136e>
 80023a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80023a4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d111      	bne.n	80023d4 <cw_unpack_next+0x12c4>
 80023b0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80023b4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023be:	801a      	strh	r2, [r3, #0]
 80023c0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80023c4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f06f 0202 	mvn.w	r2, #2
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24
 80023d0:	f003 bb79 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80023d4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80023d8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80023e4:	f5a3 74aa 	sub.w	r4, r3, #340	; 0x154
 80023e8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80023ec:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80023f0:	2104      	movs	r1, #4
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	4790      	blx	r2
 80023f6:	6020      	str	r0, [r4, #0]
 80023f8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80023fc:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d02e      	beq.n	8002464 <cw_unpack_next+0x1354>
 8002406:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800240a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002414:	d014      	beq.n	8002440 <cw_unpack_next+0x1330>
 8002416:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800241a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002424:	801a      	strh	r2, [r3, #0]
 8002426:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800242a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002434:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	625a      	str	r2, [r3, #36]	; 0x24
 800243c:	f003 bb43 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8002440:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002444:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800244e:	801a      	strh	r2, [r3, #0]
 8002450:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002454:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f06f 0202 	mvn.w	r2, #2
 800245e:	625a      	str	r2, [r3, #36]	; 0x24
 8002460:	f003 bb31 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8002464:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002468:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002474:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002478:	3304      	adds	r3, #4
 800247a:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
 800247e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002482:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 800248c:	61d3      	str	r3, [r2, #28]
                            cw_load32(p);
 800248e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002498:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80024a2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	061a      	lsls	r2, r3, #24
 80024aa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80024ae:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	021b      	lsls	r3, r3, #8
 80024b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80024ba:	431a      	orrs	r2, r3
 80024bc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80024c0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80024cc:	431a      	orrs	r2, r3
 80024ce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80024d2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0e1b      	lsrs	r3, r3, #24
 80024da:	431a      	orrs	r2, r3
 80024dc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80024e0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80024e4:	601a      	str	r2, [r3, #0]
                            unpack_context->item.as.time.tv_nsec = tmpu32;
 80024e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80024ea:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80024f4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	611a      	str	r2, [r3, #16]
                            cw_unpack_assert_space(8);
 80024fc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002500:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800250c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002510:	3308      	adds	r3, #8
 8002512:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8002516:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800251a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6a1a      	ldr	r2, [r3, #32]
 8002522:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8002526:	4293      	cmp	r3, r2
 8002528:	d96e      	bls.n	8002608 <cw_unpack_next+0x14f8>
 800252a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800252e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	2b00      	cmp	r3, #0
 8002538:	d111      	bne.n	800255e <cw_unpack_next+0x144e>
 800253a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800253e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002548:	801a      	strh	r2, [r3, #0]
 800254a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800254e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0202 	mvn.w	r2, #2
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
 800255a:	f003 bab4 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 800255e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002562:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800256e:	f5a3 74ac 	sub.w	r4, r3, #344	; 0x158
 8002572:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002576:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800257a:	2108      	movs	r1, #8
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	4790      	blx	r2
 8002580:	6020      	str	r0, [r4, #0]
 8002582:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002586:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d02e      	beq.n	80025ee <cw_unpack_next+0x14de>
 8002590:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002594:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259e:	d014      	beq.n	80025ca <cw_unpack_next+0x14ba>
 80025a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80025a4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025ae:	801a      	strh	r2, [r3, #0]
 80025b0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80025b4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80025be:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24
 80025c6:	f003 ba7e 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80025ca:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80025ce:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025d8:	801a      	strh	r2, [r3, #0]
 80025da:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80025de:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0202 	mvn.w	r2, #2
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24
 80025ea:	f003 ba6c 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80025ee:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80025f2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80025fe:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002602:	3308      	adds	r3, #8
 8002604:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8002608:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800260c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8002616:	61d3      	str	r3, [r2, #28]
                            cw_load64(p,tmpu64);
 8002618:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800261c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002620:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
 8002624:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8002628:	0a1a      	lsrs	r2, r3, #8
 800262a:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800262e:	061b      	lsls	r3, r3, #24
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002636:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800263a:	0a1a      	lsrs	r2, r3, #8
 800263c:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8002640:	061b      	lsls	r3, r3, #24
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002648:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 800264c:	460b      	mov	r3, r1
 800264e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002652:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8002656:	4613      	mov	r3, r2
 8002658:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800265c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002660:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002664:	021a      	lsls	r2, r3, #8
 8002666:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800266a:	0e1b      	lsrs	r3, r3, #24
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8002672:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8002676:	021a      	lsls	r2, r3, #8
 8002678:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800267c:	0e1b      	lsrs	r3, r3, #24
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8002684:	e9d7 1274 	ldrd	r1, r2, [r7, #464]	; 0x1d0
 8002688:	460b      	mov	r3, r1
 800268a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800268e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002692:	4613      	mov	r3, r2
 8002694:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002698:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800269c:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 80026a0:	4623      	mov	r3, r4
 80026a2:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 80026a6:	4602      	mov	r2, r0
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80026ae:	462b      	mov	r3, r5
 80026b0:	460a      	mov	r2, r1
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80026b8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80026bc:	f04f 0000 	mov.w	r0, #0
 80026c0:	f04f 0100 	mov.w	r1, #0
 80026c4:	0a10      	lsrs	r0, r2, #8
 80026c6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80026ca:	0a19      	lsrs	r1, r3, #8
 80026cc:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 80026d0:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80026d4:	2300      	movs	r3, #0
 80026d6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80026da:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 80026de:	4623      	mov	r3, r4
 80026e0:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80026e4:	4602      	mov	r2, r0
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80026ec:	462b      	mov	r3, r5
 80026ee:	460a      	mov	r2, r1
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80026f6:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	020b      	lsls	r3, r1, #8
 8002704:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002708:	0202      	lsls	r2, r0, #8
 800270a:	2100      	movs	r1, #0
 800270c:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 8002710:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8002714:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8002718:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	; 0x1b0
 800271c:	4623      	mov	r3, r4
 800271e:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8002722:	4602      	mov	r2, r0
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800272a:	462b      	mov	r3, r5
 800272c:	460a      	mov	r2, r1
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002734:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	0e0a      	lsrs	r2, r1, #24
 8002742:	2300      	movs	r3, #0
 8002744:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 8002748:	4621      	mov	r1, r4
 800274a:	4311      	orrs	r1, r2
 800274c:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 8002750:	4629      	mov	r1, r5
 8002752:	4319      	orrs	r1, r3
 8002754:	f8c7 119c 	str.w	r1, [r7, #412]	; 0x19c
 8002758:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	0603      	lsls	r3, r0, #24
 8002766:	2200      	movs	r2, #0
 8002768:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 800276c:	4621      	mov	r1, r4
 800276e:	4311      	orrs	r1, r2
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	4629      	mov	r1, r5
 8002774:	4319      	orrs	r1, r3
 8002776:	60f9      	str	r1, [r7, #12]
 8002778:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800277c:	e9c7 349e 	strd	r3, r4, [r7, #632]	; 0x278
                            unpack_context->item.as.time.tv_sec = (int64_t)tmpu64;
 8002780:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8002784:	f507 715c 	add.w	r1, r7, #880	; 0x370
 8002788:	f5a1 71be 	sub.w	r1, r1, #380	; 0x17c
 800278c:	6809      	ldr	r1, [r1, #0]
 800278e:	e9c1 2302 	strd	r2, r3, [r1, #8]
                            return;
 8002792:	f003 b998 	b.w	8005ac6 <cw_unpack_next+0x49b6>
                        }
                        UNPACK_ERROR(CWP_RC_WRONG_TIMESTAMP_LENGTH)
 8002796:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800279a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027a4:	801a      	strh	r2, [r3, #0]
 80027a6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80027aa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 020b 	mvn.w	r2, #11
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24
 80027b6:	f003 b986 	b.w	8005ac6 <cw_unpack_next+0x49b6>
                    }
                    cw_unpack_assert_blob(ext);
 80027ba:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80027be:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80027ca:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80027ce:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80027da:	4413      	add	r3, r2
 80027dc:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 80027e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80027e4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d979      	bls.n	80028e8 <cw_unpack_next+0x17d8>
 80027f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80027f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	2b00      	cmp	r3, #0
 8002802:	d111      	bne.n	8002828 <cw_unpack_next+0x1718>
 8002804:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002808:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002812:	801a      	strh	r2, [r3, #0]
 8002814:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002818:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f06f 0202 	mvn.w	r2, #2
 8002822:	625a      	str	r2, [r3, #36]	; 0x24
 8002824:	f003 b94f 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8002828:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800282c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002838:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	68d1      	ldr	r1, [r2, #12]
 8002840:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002844:	f5a2 74a8 	sub.w	r4, r2, #336	; 0x150
 8002848:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800284c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002850:	6810      	ldr	r0, [r2, #0]
 8002852:	4798      	blx	r3
 8002854:	6020      	str	r0, [r4, #0]
 8002856:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800285a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d02e      	beq.n	80028c2 <cw_unpack_next+0x17b2>
 8002864:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002868:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002872:	d014      	beq.n	800289e <cw_unpack_next+0x178e>
 8002874:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002878:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002882:	801a      	strh	r2, [r3, #0]
 8002884:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002888:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002892:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	625a      	str	r2, [r3, #36]	; 0x24
 800289a:	f003 b914 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 800289e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80028a2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028ac:	801a      	strh	r2, [r3, #0]
 80028ae:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80028b2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0202 	mvn.w	r2, #2
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24
 80028be:	f003 b902 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80028c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80028c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80028d2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80028d6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80028e2:	4413      	add	r3, r2
 80028e4:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 80028e8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80028ec:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 80028f6:	61da      	str	r2, [r3, #28]
 80028f8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80028fc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	f003 b8dd 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xc8:  getDDItem2(CWP_ITEM_EXT, ext.length, uint16_t);             // ext 16
 800290c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002910:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f44f 729b 	mov.w	r2, #310	; 0x136
 800291a:	801a      	strh	r2, [r3, #0]
 800291c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002920:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800292c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002930:	3302      	adds	r3, #2
 8002932:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8002936:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800293a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 8002946:	429a      	cmp	r2, r3
 8002948:	d96e      	bls.n	8002a28 <cw_unpack_next+0x1918>
 800294a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800294e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	2b00      	cmp	r3, #0
 8002958:	d111      	bne.n	800297e <cw_unpack_next+0x186e>
 800295a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800295e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002968:	801a      	strh	r2, [r3, #0]
 800296a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800296e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0202 	mvn.w	r2, #2
 8002978:	625a      	str	r2, [r3, #36]	; 0x24
 800297a:	f003 b8a4 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 800297e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002982:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800298e:	f5a2 749e 	sub.w	r4, r2, #316	; 0x13c
 8002992:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002996:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800299a:	2102      	movs	r1, #2
 800299c:	6810      	ldr	r0, [r2, #0]
 800299e:	4798      	blx	r3
 80029a0:	6020      	str	r0, [r4, #0]
 80029a2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80029a6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d02e      	beq.n	8002a0e <cw_unpack_next+0x18fe>
 80029b0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80029b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029be:	d014      	beq.n	80029ea <cw_unpack_next+0x18da>
 80029c0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80029c4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029ce:	801a      	strh	r2, [r3, #0]
 80029d0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80029d4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80029de:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24
 80029e6:	f003 b86e 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80029ea:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80029ee:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029f8:	801a      	strh	r2, [r3, #0]
 80029fa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80029fe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0202 	mvn.w	r2, #2
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24
 8002a0a:	f003 b85c 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8002a0e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a12:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002a1e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002a22:	3302      	adds	r3, #2
 8002a24:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8002a28:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a2c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 8002a36:	61da      	str	r2, [r3, #28]
 8002a38:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 8002a42:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	b21a      	sxth	r2, r3
 8002a4a:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8002a4e:	0a1b      	lsrs	r3, r3, #8
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	b21b      	sxth	r3, r3
 8002a54:	4313      	orrs	r3, r2
 8002a56:	b21b      	sxth	r3, r3
 8002a58:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 8002a5c:	f8b7 22aa 	ldrh.w	r2, [r7, #682]	; 0x2aa
 8002a60:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a64:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_space(1);
 8002a6c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a70:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002a7c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002a80:	3301      	adds	r3, #1
 8002a82:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 8002a86:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a8a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d96e      	bls.n	8002b78 <cw_unpack_next+0x1a68>
 8002a9a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a9e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d111      	bne.n	8002ace <cw_unpack_next+0x19be>
 8002aaa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002aae:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ab8:	801a      	strh	r2, [r3, #0]
 8002aba:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002abe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0202 	mvn.w	r2, #2
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24
 8002aca:	f002 bffc 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8002ace:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ad2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002ade:	f5a2 74a0 	sub.w	r4, r2, #320	; 0x140
 8002ae2:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002ae6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002aea:	2101      	movs	r1, #1
 8002aec:	6810      	ldr	r0, [r2, #0]
 8002aee:	4798      	blx	r3
 8002af0:	6020      	str	r0, [r4, #0]
 8002af2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002af6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d02e      	beq.n	8002b5e <cw_unpack_next+0x1a4e>
 8002b00:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b04:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0e:	d014      	beq.n	8002b3a <cw_unpack_next+0x1a2a>
 8002b10:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b14:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b1e:	801a      	strh	r2, [r3, #0]
 8002b20:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b24:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002b2e:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24
 8002b36:	f002 bfc6 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8002b3a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b3e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b48:	801a      	strh	r2, [r3, #0]
 8002b4a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b4e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0202 	mvn.w	r2, #2
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24
 8002b5a:	f002 bfb4 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8002b5e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b62:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002b6e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002b72:	3301      	adds	r3, #1
 8002b74:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 8002b78:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b7c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 8002b86:	61da      	str	r2, [r3, #28]
                    unpack_context->item.type = (cwpack_item_types)*(int8_t*)p;
 8002b88:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002b8c:	f993 3000 	ldrsb.w	r3, [r3]
 8002b90:	b21a      	sxth	r2, r3
 8002b92:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b96:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	801a      	strh	r2, [r3, #0]
                    cw_unpack_assert_blob(ext);
 8002b9e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ba2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002bae:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002bb2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8002bc4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002bc8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d979      	bls.n	8002ccc <cw_unpack_next+0x1bbc>
 8002bd8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002bdc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d111      	bne.n	8002c0c <cw_unpack_next+0x1afc>
 8002be8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002bec:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bf6:	801a      	strh	r2, [r3, #0]
 8002bf8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002bfc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f06f 0202 	mvn.w	r2, #2
 8002c06:	625a      	str	r2, [r3, #36]	; 0x24
 8002c08:	f002 bf5d 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8002c0c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c10:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002c1c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	68d1      	ldr	r1, [r2, #12]
 8002c24:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002c28:	f5a2 74a2 	sub.w	r4, r2, #324	; 0x144
 8002c2c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002c30:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c34:	6810      	ldr	r0, [r2, #0]
 8002c36:	4798      	blx	r3
 8002c38:	6020      	str	r0, [r4, #0]
 8002c3a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c3e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d02e      	beq.n	8002ca6 <cw_unpack_next+0x1b96>
 8002c48:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c4c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c56:	d014      	beq.n	8002c82 <cw_unpack_next+0x1b72>
 8002c58:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c5c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c66:	801a      	strh	r2, [r3, #0]
 8002c68:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c6c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002c76:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	625a      	str	r2, [r3, #36]	; 0x24
 8002c7e:	f002 bf22 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8002c82:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c86:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c90:	801a      	strh	r2, [r3, #0]
 8002c92:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c96:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0202 	mvn.w	r2, #2
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24
 8002ca2:	f002 bf10 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8002ca6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002caa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002cb6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002cba:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8002ccc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002cd0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 8002cda:	61da      	str	r2, [r3, #28]
 8002cdc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ce0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	f002 beeb 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xc9:  getDDItem4(CWP_ITEM_EXT, ext.length, uint32_t);             // ext 32
 8002cf0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002cf4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002cfe:	801a      	strh	r2, [r3, #0]
 8002d00:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d04:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002d10:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002d14:	3304      	adds	r3, #4
 8002d16:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 8002d1a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d1e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d96e      	bls.n	8002e0c <cw_unpack_next+0x1cfc>
 8002d2e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d32:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d111      	bne.n	8002d62 <cw_unpack_next+0x1c52>
 8002d3e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d42:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d4c:	801a      	strh	r2, [r3, #0]
 8002d4e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d52:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0202 	mvn.w	r2, #2
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24
 8002d5e:	f002 beb2 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8002d62:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d66:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002d72:	f5a2 7498 	sub.w	r4, r2, #304	; 0x130
 8002d76:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002d7a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d7e:	2104      	movs	r1, #4
 8002d80:	6810      	ldr	r0, [r2, #0]
 8002d82:	4798      	blx	r3
 8002d84:	6020      	str	r0, [r4, #0]
 8002d86:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d02e      	beq.n	8002df2 <cw_unpack_next+0x1ce2>
 8002d94:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da2:	d014      	beq.n	8002dce <cw_unpack_next+0x1cbe>
 8002da4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002da8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002db2:	801a      	strh	r2, [r3, #0]
 8002db4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002db8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002dc2:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24
 8002dca:	f002 be7c 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8002dce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002dd2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ddc:	801a      	strh	r2, [r3, #0]
 8002dde:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002de2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0202 	mvn.w	r2, #2
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24
 8002dee:	f002 be6a 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8002df2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002df6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002e02:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002e06:	3304      	adds	r3, #4
 8002e08:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 8002e0c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e10:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8002e1a:	61da      	str	r2, [r3, #28]
 8002e1c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e26:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e30:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	061a      	lsls	r2, r3, #24
 8002e38:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e3c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	021b      	lsls	r3, r3, #8
 8002e44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e4e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	0a1b      	lsrs	r3, r3, #8
 8002e56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e60:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	0e1b      	lsrs	r3, r3, #24
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e6e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e78:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e82:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_space(1);
 8002e8a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e8e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002e9a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8002ea4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ea8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d96e      	bls.n	8002f96 <cw_unpack_next+0x1e86>
 8002eb8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ebc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d111      	bne.n	8002eec <cw_unpack_next+0x1ddc>
 8002ec8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ecc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ed6:	801a      	strh	r2, [r3, #0]
 8002ed8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002edc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f06f 0202 	mvn.w	r2, #2
 8002ee6:	625a      	str	r2, [r3, #36]	; 0x24
 8002ee8:	f002 bded 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8002eec:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ef0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002efc:	f5a2 749a 	sub.w	r4, r2, #308	; 0x134
 8002f00:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002f04:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f08:	2101      	movs	r1, #1
 8002f0a:	6810      	ldr	r0, [r2, #0]
 8002f0c:	4798      	blx	r3
 8002f0e:	6020      	str	r0, [r4, #0]
 8002f10:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f14:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d02e      	beq.n	8002f7c <cw_unpack_next+0x1e6c>
 8002f1e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f22:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d014      	beq.n	8002f58 <cw_unpack_next+0x1e48>
 8002f2e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f32:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f3c:	801a      	strh	r2, [r3, #0]
 8002f3e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f42:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002f4c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24
 8002f54:	f002 bdb7 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8002f58:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f5c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f66:	801a      	strh	r2, [r3, #0]
 8002f68:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f6c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f06f 0202 	mvn.w	r2, #2
 8002f76:	625a      	str	r2, [r3, #36]	; 0x24
 8002f78:	f002 bda5 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8002f7c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f80:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002f8c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002f90:	3301      	adds	r3, #1
 8002f92:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8002f96:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f9a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 8002fa4:	61da      	str	r2, [r3, #28]
                    unpack_context->item.type = (cwpack_item_types)*(int8_t*)p;
 8002fa6:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002faa:	f993 3000 	ldrsb.w	r3, [r3]
 8002fae:	b21a      	sxth	r2, r3
 8002fb0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002fb4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	801a      	strh	r2, [r3, #0]
                    cw_unpack_assert_blob(ext);
 8002fbc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002fc0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002fcc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002fd0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8002fdc:	4413      	add	r3, r2
 8002fde:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 8002fe2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002fe6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d979      	bls.n	80030ea <cw_unpack_next+0x1fda>
 8002ff6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ffa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	2b00      	cmp	r3, #0
 8003004:	d111      	bne.n	800302a <cw_unpack_next+0x1f1a>
 8003006:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800300a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003014:	801a      	strh	r2, [r3, #0]
 8003016:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800301a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0202 	mvn.w	r2, #2
 8003024:	625a      	str	r2, [r3, #36]	; 0x24
 8003026:	f002 bd4e 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 800302a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800302e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800303a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	68d1      	ldr	r1, [r2, #12]
 8003042:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003046:	f5a2 749c 	sub.w	r4, r2, #312	; 0x138
 800304a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800304e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003052:	6810      	ldr	r0, [r2, #0]
 8003054:	4798      	blx	r3
 8003056:	6020      	str	r0, [r4, #0]
 8003058:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800305c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d02e      	beq.n	80030c4 <cw_unpack_next+0x1fb4>
 8003066:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800306a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d014      	beq.n	80030a0 <cw_unpack_next+0x1f90>
 8003076:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800307a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003084:	801a      	strh	r2, [r3, #0]
 8003086:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800308a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003094:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24
 800309c:	f002 bd13 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80030a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80030a4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030ae:	801a      	strh	r2, [r3, #0]
 80030b0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80030b4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f06f 0202 	mvn.w	r2, #2
 80030be:	625a      	str	r2, [r3, #36]	; 0x24
 80030c0:	f002 bd01 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80030c4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80030c8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80030d4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80030d8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80030e4:	4413      	add	r3, r2
 80030e6:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 80030ea:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80030ee:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 80030f8:	61da      	str	r2, [r3, #28]
 80030fa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80030fe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8003108:	609a      	str	r2, [r3, #8]
 800310a:	f002 bcdc 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xca:  unpack_context->item.type = CWP_ITEM_FLOAT;                 // float
 800310e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003112:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f44f 7298 	mov.w	r2, #304	; 0x130
 800311c:	801a      	strh	r2, [r3, #0]
                    cw_unpack_assert_space(4);
 800311e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003122:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800312e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003132:	3304      	adds	r3, #4
 8003134:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8003138:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800313c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8003148:	429a      	cmp	r2, r3
 800314a:	d96e      	bls.n	800322a <cw_unpack_next+0x211a>
 800314c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003150:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	2b00      	cmp	r3, #0
 800315a:	d111      	bne.n	8003180 <cw_unpack_next+0x2070>
 800315c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003160:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f240 32e7 	movw	r2, #999	; 0x3e7
 800316a:	801a      	strh	r2, [r3, #0]
 800316c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003170:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f06f 0202 	mvn.w	r2, #2
 800317a:	625a      	str	r2, [r3, #36]	; 0x24
 800317c:	f002 bca3 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8003180:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003184:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003190:	f5a2 7496 	sub.w	r4, r2, #300	; 0x12c
 8003194:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003198:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800319c:	2104      	movs	r1, #4
 800319e:	6810      	ldr	r0, [r2, #0]
 80031a0:	4798      	blx	r3
 80031a2:	6020      	str	r0, [r4, #0]
 80031a4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80031a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d02e      	beq.n	8003210 <cw_unpack_next+0x2100>
 80031b2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80031b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c0:	d014      	beq.n	80031ec <cw_unpack_next+0x20dc>
 80031c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80031c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031d0:	801a      	strh	r2, [r3, #0]
 80031d2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80031d6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80031e0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24
 80031e8:	f002 bc6d 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80031ec:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80031f0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031fa:	801a      	strh	r2, [r3, #0]
 80031fc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003200:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f06f 0202 	mvn.w	r2, #2
 800320a:	625a      	str	r2, [r3, #36]	; 0x24
 800320c:	f002 bc5b 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8003210:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003214:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003220:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003224:	3304      	adds	r3, #4
 8003226:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800322a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800322e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8003238:	61da      	str	r2, [r3, #28]
                    cw_load32(p);
 800323a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003244:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800324e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	061a      	lsls	r2, r3, #24
 8003256:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800325a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003266:	431a      	orrs	r2, r3
 8003268:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800326c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	0a1b      	lsrs	r3, r3, #8
 8003274:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003278:	431a      	orrs	r2, r3
 800327a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800327e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	0e1b      	lsrs	r3, r3, #24
 8003286:	431a      	orrs	r2, r3
 8003288:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800328c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003290:	601a      	str	r2, [r3, #0]
                    unpack_context->item.as.real = *(float*)&tmpu32;     return;
 8003292:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800329c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	f002 bc0f 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xcb:  getDDItem8(CWP_ITEM_DOUBLE);                         return;  // double
 80032a8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80032ac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	f240 1331 	movw	r3, #305	; 0x131
 80032b6:	8013      	strh	r3, [r2, #0]
 80032b8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80032bc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80032c8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80032cc:	3308      	adds	r3, #8
 80032ce:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 80032d2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80032d6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6a1a      	ldr	r2, [r3, #32]
 80032de:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d96e      	bls.n	80033c4 <cw_unpack_next+0x22b4>
 80032e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80032ea:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d111      	bne.n	800331a <cw_unpack_next+0x220a>
 80032f6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80032fa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003304:	801a      	strh	r2, [r3, #0]
 8003306:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800330a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0202 	mvn.w	r2, #2
 8003314:	625a      	str	r2, [r3, #36]	; 0x24
 8003316:	f002 bbd6 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 800331a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800331e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003326:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800332a:	f5a3 7494 	sub.w	r4, r3, #296	; 0x128
 800332e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003332:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003336:	2108      	movs	r1, #8
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	4790      	blx	r2
 800333c:	6020      	str	r0, [r4, #0]
 800333e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003342:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d02e      	beq.n	80033aa <cw_unpack_next+0x229a>
 800334c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003350:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d014      	beq.n	8003386 <cw_unpack_next+0x2276>
 800335c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003360:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f240 32e7 	movw	r2, #999	; 0x3e7
 800336a:	801a      	strh	r2, [r3, #0]
 800336c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003370:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800337a:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24
 8003382:	f002 bba0 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8003386:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800338a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003394:	801a      	strh	r2, [r3, #0]
 8003396:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800339a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0202 	mvn.w	r2, #2
 80033a4:	625a      	str	r2, [r3, #36]	; 0x24
 80033a6:	f002 bb8e 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80033aa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80033ae:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80033ba:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80033be:	3308      	adds	r3, #8
 80033c0:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 80033c4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80033c8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 80033d2:	61d3      	str	r3, [r2, #28]
 80033d4:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033dc:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
 80033e0:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80033e4:	0a1a      	lsrs	r2, r3, #8
 80033e6:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80033ea:	061b      	lsls	r3, r3, #24
 80033ec:	ea42 0603 	orr.w	r6, r2, r3
 80033f0:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80033f4:	0a1a      	lsrs	r2, r3, #8
 80033f6:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80033fa:	061b      	lsls	r3, r3, #24
 80033fc:	ea42 0503 	orr.w	r5, r2, r3
 8003400:	f405 437f 	and.w	r3, r5, #65280	; 0xff00
 8003404:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8003408:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
 800340c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8003410:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8003414:	021a      	lsls	r2, r3, #8
 8003416:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800341a:	0e1b      	lsrs	r3, r3, #24
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003422:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8003426:	021a      	lsls	r2, r3, #8
 8003428:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800342c:	0e1b      	lsrs	r3, r3, #24
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8003434:	e9d7 1262 	ldrd	r1, r2, [r7, #392]	; 0x188
 8003438:	460b      	mov	r3, r1
 800343a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800343e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003442:	4613      	mov	r3, r2
 8003444:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003448:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800344c:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 8003450:	4623      	mov	r3, r4
 8003452:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8003456:	4602      	mov	r2, r0
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800345e:	462b      	mov	r3, r5
 8003460:	460a      	mov	r2, r1
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003468:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800346c:	f04f 0000 	mov.w	r0, #0
 8003470:	f04f 0100 	mov.w	r1, #0
 8003474:	0a10      	lsrs	r0, r2, #8
 8003476:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800347a:	0a19      	lsrs	r1, r3, #8
 800347c:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 8003480:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003484:	2300      	movs	r3, #0
 8003486:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800348a:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 800348e:	4623      	mov	r3, r4
 8003490:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8003494:	4602      	mov	r2, r0
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800349c:	462b      	mov	r3, r5
 800349e:	460a      	mov	r2, r1
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80034a6:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	020b      	lsls	r3, r1, #8
 80034b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80034b8:	0202      	lsls	r2, r0, #8
 80034ba:	2100      	movs	r1, #0
 80034bc:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 80034c0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80034c4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80034c8:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 80034cc:	4623      	mov	r3, r4
 80034ce:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 80034d2:	4602      	mov	r2, r0
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80034da:	462b      	mov	r3, r5
 80034dc:	460a      	mov	r2, r1
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80034e4:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	0e0a      	lsrs	r2, r1, #24
 80034f2:	2300      	movs	r3, #0
 80034f4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80034f8:	4621      	mov	r1, r4
 80034fa:	4311      	orrs	r1, r2
 80034fc:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8003500:	4629      	mov	r1, r5
 8003502:	4319      	orrs	r1, r3
 8003504:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 8003508:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	0603      	lsls	r3, r0, #24
 8003516:	2200      	movs	r2, #0
 8003518:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800351c:	4621      	mov	r1, r4
 800351e:	4311      	orrs	r1, r2
 8003520:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8003524:	4629      	mov	r1, r5
 8003526:	4319      	orrs	r1, r3
 8003528:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800352c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003530:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	e9d7 1252 	ldrd	r1, r2, [r7, #328]	; 0x148
 800353a:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800353e:	f002 bac2 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xcc:  getDDItem1(CWP_ITEM_POSITIVE_INTEGER, u64, uint8_t); return;  // unsigned int  8
 8003542:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003546:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8003550:	801a      	strh	r2, [r3, #0]
 8003552:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003556:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003562:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003566:	3301      	adds	r3, #1
 8003568:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800356c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003570:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 800357c:	429a      	cmp	r2, r3
 800357e:	d96e      	bls.n	800365e <cw_unpack_next+0x254e>
 8003580:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003584:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d111      	bne.n	80035b4 <cw_unpack_next+0x24a4>
 8003590:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003594:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800359e:	801a      	strh	r2, [r3, #0]
 80035a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80035a4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f06f 0202 	mvn.w	r2, #2
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24
 80035b0:	f002 ba89 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80035b4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80035b8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80035c4:	f5a2 7492 	sub.w	r4, r2, #292	; 0x124
 80035c8:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80035cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80035d0:	2101      	movs	r1, #1
 80035d2:	6810      	ldr	r0, [r2, #0]
 80035d4:	4798      	blx	r3
 80035d6:	6020      	str	r0, [r4, #0]
 80035d8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80035dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d02e      	beq.n	8003644 <cw_unpack_next+0x2534>
 80035e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80035ea:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f4:	d014      	beq.n	8003620 <cw_unpack_next+0x2510>
 80035f6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80035fa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003604:	801a      	strh	r2, [r3, #0]
 8003606:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800360a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003614:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8003618:	6812      	ldr	r2, [r2, #0]
 800361a:	625a      	str	r2, [r3, #36]	; 0x24
 800361c:	f002 ba53 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8003620:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003624:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003634:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f06f 0202 	mvn.w	r2, #2
 800363e:	625a      	str	r2, [r3, #36]	; 0x24
 8003640:	f002 ba41 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8003644:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003648:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003654:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003658:	3301      	adds	r3, #1
 800365a:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800365e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003662:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 800366c:	61da      	str	r2, [r3, #28]
 800366e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2200      	movs	r2, #0
 8003678:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800367c:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8003680:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003684:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800368e:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8003692:	f002 ba18 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xcd:  getDDItem2(CWP_ITEM_POSITIVE_INTEGER, u64, uint16_t); return; // unsigned int 16
 8003696:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800369a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80036a4:	801a      	strh	r2, [r3, #0]
 80036a6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80036aa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80036b6:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80036ba:	3302      	adds	r3, #2
 80036bc:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80036c0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80036c4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d96e      	bls.n	80037b2 <cw_unpack_next+0x26a2>
 80036d4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80036d8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d111      	bne.n	8003708 <cw_unpack_next+0x25f8>
 80036e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80036e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036f2:	801a      	strh	r2, [r3, #0]
 80036f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80036f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f06f 0202 	mvn.w	r2, #2
 8003702:	625a      	str	r2, [r3, #36]	; 0x24
 8003704:	f002 b9df 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8003708:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800370c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003718:	f5a2 7490 	sub.w	r4, r2, #288	; 0x120
 800371c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003720:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003724:	2102      	movs	r1, #2
 8003726:	6810      	ldr	r0, [r2, #0]
 8003728:	4798      	blx	r3
 800372a:	6020      	str	r0, [r4, #0]
 800372c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003730:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d02e      	beq.n	8003798 <cw_unpack_next+0x2688>
 800373a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800373e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d014      	beq.n	8003774 <cw_unpack_next+0x2664>
 800374a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800374e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003758:	801a      	strh	r2, [r3, #0]
 800375a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800375e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003768:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	625a      	str	r2, [r3, #36]	; 0x24
 8003770:	f002 b9a9 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8003774:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003778:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003782:	801a      	strh	r2, [r3, #0]
 8003784:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003788:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f06f 0202 	mvn.w	r2, #2
 8003792:	625a      	str	r2, [r3, #36]	; 0x24
 8003794:	f002 b997 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8003798:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800379c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80037a8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80037ac:	3302      	adds	r3, #2
 80037ae:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80037b2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80037b6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80037c0:	61da      	str	r2, [r3, #28]
 80037c2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 80037cc:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80037d0:	021b      	lsls	r3, r3, #8
 80037d2:	b21a      	sxth	r2, r3
 80037d4:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80037d8:	0a1b      	lsrs	r3, r3, #8
 80037da:	b29b      	uxth	r3, r3
 80037dc:	b21b      	sxth	r3, r3
 80037de:	4313      	orrs	r3, r2
 80037e0:	b21b      	sxth	r3, r3
 80037e2:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 80037e6:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80037ea:	2200      	movs	r2, #0
 80037ec:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80037f0:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80037f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80037f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8003802:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8003806:	f002 b95e 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xce:  getDDItem4(CWP_ITEM_POSITIVE_INTEGER, u64, uint32_t); return; // unsigned int 32
 800380a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800380e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8003818:	801a      	strh	r2, [r3, #0]
 800381a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800381e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800382a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800382e:	3304      	adds	r3, #4
 8003830:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8003834:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003838:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8003844:	429a      	cmp	r2, r3
 8003846:	d96e      	bls.n	8003926 <cw_unpack_next+0x2816>
 8003848:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800384c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d111      	bne.n	800387c <cw_unpack_next+0x276c>
 8003858:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800385c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003866:	801a      	strh	r2, [r3, #0]
 8003868:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800386c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f06f 0202 	mvn.w	r2, #2
 8003876:	625a      	str	r2, [r3, #36]	; 0x24
 8003878:	f002 b925 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 800387c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003880:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800388c:	f5a2 748e 	sub.w	r4, r2, #284	; 0x11c
 8003890:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003894:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003898:	2104      	movs	r1, #4
 800389a:	6810      	ldr	r0, [r2, #0]
 800389c:	4798      	blx	r3
 800389e:	6020      	str	r0, [r4, #0]
 80038a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80038a4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d02e      	beq.n	800390c <cw_unpack_next+0x27fc>
 80038ae:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80038b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d014      	beq.n	80038e8 <cw_unpack_next+0x27d8>
 80038be:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80038c2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038cc:	801a      	strh	r2, [r3, #0]
 80038ce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80038d2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80038dc:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 80038e0:	6812      	ldr	r2, [r2, #0]
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24
 80038e4:	f002 b8ef 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80038e8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80038ec:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038f6:	801a      	strh	r2, [r3, #0]
 80038f8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80038fc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f06f 0202 	mvn.w	r2, #2
 8003906:	625a      	str	r2, [r3, #36]	; 0x24
 8003908:	f002 b8dd 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 800390c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003910:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800391c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003920:	3304      	adds	r3, #4
 8003922:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8003926:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800392a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8003934:	61da      	str	r2, [r3, #28]
 8003936:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003940:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800394a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	061a      	lsls	r2, r3, #24
 8003952:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003956:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003962:	431a      	orrs	r2, r3
 8003964:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003968:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	0a1b      	lsrs	r3, r3, #8
 8003970:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003974:	431a      	orrs	r2, r3
 8003976:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800397a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	0e1b      	lsrs	r3, r3, #24
 8003982:	431a      	orrs	r2, r3
 8003984:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003988:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003992:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2200      	movs	r2, #0
 800399a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800399e:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80039a2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80039a6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 80039b0:	e9c3 1202 	strd	r1, r2, [r3, #8]
 80039b4:	f002 b887 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xcf:  getDDItem8(CWP_ITEM_POSITIVE_INTEGER);               return;  // unsigned int 64
 80039b8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80039bc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	f44f 7397 	mov.w	r3, #302	; 0x12e
 80039c6:	8013      	strh	r3, [r2, #0]
 80039c8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80039cc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80039d8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80039dc:	3308      	adds	r3, #8
 80039de:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80039e2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80039e6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6a1a      	ldr	r2, [r3, #32]
 80039ee:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d96e      	bls.n	8003ad4 <cw_unpack_next+0x29c4>
 80039f6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80039fa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d111      	bne.n	8003a2a <cw_unpack_next+0x291a>
 8003a06:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a0a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a14:	801a      	strh	r2, [r3, #0]
 8003a16:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a1a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0202 	mvn.w	r2, #2
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24
 8003a26:	f002 b84e 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8003a2a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a2e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a36:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a3a:	f5a3 748c 	sub.w	r4, r3, #280	; 0x118
 8003a3e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a42:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003a46:	2108      	movs	r1, #8
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	4790      	blx	r2
 8003a4c:	6020      	str	r0, [r4, #0]
 8003a4e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a52:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d02e      	beq.n	8003aba <cw_unpack_next+0x29aa>
 8003a5c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a60:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6a:	d014      	beq.n	8003a96 <cw_unpack_next+0x2986>
 8003a6c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a70:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a7a:	801a      	strh	r2, [r3, #0]
 8003a7c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a80:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003a8a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	625a      	str	r2, [r3, #36]	; 0x24
 8003a92:	f002 b818 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8003a96:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a9a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003aa4:	801a      	strh	r2, [r3, #0]
 8003aa6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003aaa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0202 	mvn.w	r2, #2
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24
 8003ab6:	f002 b806 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8003aba:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003abe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003aca:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003ace:	3308      	adds	r3, #8
 8003ad0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8003ad4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003ad8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8003ae2:	61d3      	str	r3, [r2, #28]
 8003ae4:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
 8003af0:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8003af4:	0a1a      	lsrs	r2, r3, #8
 8003af6:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8003afa:	061b      	lsls	r3, r3, #24
 8003afc:	ea42 0b03 	orr.w	fp, r2, r3
 8003b00:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8003b04:	0a1a      	lsrs	r2, r3, #8
 8003b06:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8003b0a:	061b      	lsls	r3, r3, #24
 8003b0c:	ea42 0a03 	orr.w	sl, r2, r3
 8003b10:	f40a 437f 	and.w	r3, sl, #65280	; 0xff00
 8003b14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003b18:	f40b 437f 	and.w	r3, fp, #65280	; 0xff00
 8003b1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003b20:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8003b24:	021a      	lsls	r2, r3, #8
 8003b26:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8003b2a:	0e1b      	lsrs	r3, r3, #24
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003b32:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8003b36:	021a      	lsls	r2, r3, #8
 8003b38:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8003b3c:	0e1b      	lsrs	r3, r3, #24
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003b44:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8003b48:	460b      	mov	r3, r1
 8003b4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003b52:	4613      	mov	r3, r2
 8003b54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003b5c:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003b60:	4623      	mov	r3, r4
 8003b62:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8003b66:	4602      	mov	r2, r0
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003b6e:	462b      	mov	r3, r5
 8003b70:	460a      	mov	r2, r1
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003b78:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8003b7c:	f04f 0000 	mov.w	r0, #0
 8003b80:	f04f 0100 	mov.w	r1, #0
 8003b84:	0a10      	lsrs	r0, r2, #8
 8003b86:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003b8a:	0a19      	lsrs	r1, r3, #8
 8003b8c:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 8003b90:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003b94:	2300      	movs	r3, #0
 8003b96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003b9a:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8003b9e:	4623      	mov	r3, r4
 8003ba0:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003bac:	462b      	mov	r3, r5
 8003bae:	460a      	mov	r2, r1
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003bb6:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	020b      	lsls	r3, r1, #8
 8003bc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003bc8:	0202      	lsls	r2, r0, #8
 8003bca:	2100      	movs	r1, #0
 8003bcc:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8003bd0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8003bd4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003bd8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8003bdc:	4623      	mov	r3, r4
 8003bde:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8003be2:	4602      	mov	r2, r0
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003bea:	462b      	mov	r3, r5
 8003bec:	460a      	mov	r2, r1
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003bf4:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	0e0a      	lsrs	r2, r1, #24
 8003c02:	2300      	movs	r3, #0
 8003c04:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8003c08:	4621      	mov	r1, r4
 8003c0a:	4311      	orrs	r1, r2
 8003c0c:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8003c10:	4629      	mov	r1, r5
 8003c12:	4319      	orrs	r1, r3
 8003c14:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8003c18:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	0603      	lsls	r3, r0, #24
 8003c26:	2200      	movs	r2, #0
 8003c28:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	4311      	orrs	r1, r2
 8003c30:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8003c34:	4629      	mov	r1, r5
 8003c36:	4319      	orrs	r1, r3
 8003c38:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8003c3c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c40:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003c4a:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8003c4e:	f001 bf3a 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xd0:  getDDItem1(CWP_ITEM_NEGATIVE_INTEGER, i64, int8_t);          // signed int  8
 8003c52:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c56:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f240 122f 	movw	r2, #303	; 0x12f
 8003c60:	801a      	strh	r2, [r3, #0]
 8003c62:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c66:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003c72:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003c76:	3301      	adds	r3, #1
 8003c78:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8003c7c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c80:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d96e      	bls.n	8003d6e <cw_unpack_next+0x2c5e>
 8003c90:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c94:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d111      	bne.n	8003cc4 <cw_unpack_next+0x2bb4>
 8003ca0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003ca4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cae:	801a      	strh	r2, [r3, #0]
 8003cb0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003cb4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f06f 0202 	mvn.w	r2, #2
 8003cbe:	625a      	str	r2, [r3, #36]	; 0x24
 8003cc0:	f001 bf01 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8003cc4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003cc8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003cd4:	f5a2 748a 	sub.w	r4, r2, #276	; 0x114
 8003cd8:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003cdc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	6810      	ldr	r0, [r2, #0]
 8003ce4:	4798      	blx	r3
 8003ce6:	6020      	str	r0, [r4, #0]
 8003ce8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003cec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d02e      	beq.n	8003d54 <cw_unpack_next+0x2c44>
 8003cf6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003cfa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d04:	d014      	beq.n	8003d30 <cw_unpack_next+0x2c20>
 8003d06:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d0a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d14:	801a      	strh	r2, [r3, #0]
 8003d16:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d1a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003d24:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8003d28:	6812      	ldr	r2, [r2, #0]
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24
 8003d2c:	f001 becb 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8003d30:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d34:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d3e:	801a      	strh	r2, [r3, #0]
 8003d40:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d44:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f06f 0202 	mvn.w	r2, #2
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24
 8003d50:	f001 beb9 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8003d54:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d58:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003d64:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003d68:	3301      	adds	r3, #1
 8003d6a:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8003d6e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d72:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8003d7c:	61da      	str	r2, [r3, #28]
 8003d7e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	b25b      	sxtb	r3, r3
 8003d86:	b25b      	sxtb	r3, r3
 8003d88:	17da      	asrs	r2, r3, #31
 8003d8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d92:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d96:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003da0:	e9c3 1202 	strd	r1, r2, [r3, #8]
                    if (unpack_context->item.as.i64 >= 0)
 8003da4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003da8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f2c1 8680 	blt.w	8005ab8 <cw_unpack_next+0x49a8>
                        unpack_context->item.type = CWP_ITEM_POSITIVE_INTEGER;
 8003db8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003dbc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8003dc6:	801a      	strh	r2, [r3, #0]
                    return;
 8003dc8:	f001 be76 	b.w	8005ab8 <cw_unpack_next+0x49a8>
        case 0xd1:  getDDItem2(CWP_ITEM_NEGATIVE_INTEGER, i64, int16_t);        // signed int 16
 8003dcc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003dd0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f240 122f 	movw	r2, #303	; 0x12f
 8003dda:	801a      	strh	r2, [r3, #0]
 8003ddc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003de0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003dec:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003df0:	3302      	adds	r3, #2
 8003df2:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8003df6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003dfa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	f8d7 2368 	ldr.w	r2, [r7, #872]	; 0x368
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d96e      	bls.n	8003ee8 <cw_unpack_next+0x2dd8>
 8003e0a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003e0e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d111      	bne.n	8003e3e <cw_unpack_next+0x2d2e>
 8003e1a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003e1e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e28:	801a      	strh	r2, [r3, #0]
 8003e2a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003e2e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0202 	mvn.w	r2, #2
 8003e38:	625a      	str	r2, [r3, #36]	; 0x24
 8003e3a:	f001 be44 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8003e3e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003e42:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003e4e:	f5a2 7488 	sub.w	r4, r2, #272	; 0x110
 8003e52:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003e56:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e5a:	2102      	movs	r1, #2
 8003e5c:	6810      	ldr	r0, [r2, #0]
 8003e5e:	4798      	blx	r3
 8003e60:	6020      	str	r0, [r4, #0]
 8003e62:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003e66:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d02e      	beq.n	8003ece <cw_unpack_next+0x2dbe>
 8003e70:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003e74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7e:	d014      	beq.n	8003eaa <cw_unpack_next+0x2d9a>
 8003e80:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003e84:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e8e:	801a      	strh	r2, [r3, #0]
 8003e90:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003e94:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003e9e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	625a      	str	r2, [r3, #36]	; 0x24
 8003ea6:	f001 be0e 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8003eaa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003eae:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003eb8:	801a      	strh	r2, [r3, #0]
 8003eba:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003ebe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0202 	mvn.w	r2, #2
 8003ec8:	625a      	str	r2, [r3, #36]	; 0x24
 8003eca:	f001 bdfc 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8003ece:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003ed2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003ede:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003ee2:	3302      	adds	r3, #2
 8003ee4:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8003ee8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003eec:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f8d7 2368 	ldr.w	r2, [r7, #872]	; 0x368
 8003ef6:	61da      	str	r2, [r3, #28]
 8003ef8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 8003f02:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	b21a      	sxth	r2, r3
 8003f0a:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8003f0e:	0a1b      	lsrs	r3, r3, #8
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	b21b      	sxth	r3, r3
 8003f14:	4313      	orrs	r3, r2
 8003f16:	b21b      	sxth	r3, r3
 8003f18:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 8003f1c:	f9b7 32aa 	ldrsh.w	r3, [r7, #682]	; 0x2aa
 8003f20:	b21b      	sxth	r3, r3
 8003f22:	17da      	asrs	r2, r3, #31
 8003f24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f2c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f30:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003f3a:	e9c3 1202 	strd	r1, r2, [r3, #8]
                    if (unpack_context->item.as.i64 >= 0)
 8003f3e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f42:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f2c1 85b5 	blt.w	8005abc <cw_unpack_next+0x49ac>
                        unpack_context->item.type = CWP_ITEM_POSITIVE_INTEGER;
 8003f52:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f56:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8003f60:	801a      	strh	r2, [r3, #0]
                    return;
 8003f62:	f001 bdab 	b.w	8005abc <cw_unpack_next+0x49ac>
        case 0xd2:  getDDItem4(CWP_ITEM_NEGATIVE_INTEGER, i64, int32_t);        // signed int 32
 8003f66:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f6a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f240 122f 	movw	r2, #303	; 0x12f
 8003f74:	801a      	strh	r2, [r3, #0]
 8003f76:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f7a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003f86:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8003f90:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f94:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d96e      	bls.n	8004082 <cw_unpack_next+0x2f72>
 8003fa4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003fa8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d111      	bne.n	8003fd8 <cw_unpack_next+0x2ec8>
 8003fb4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003fb8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003fc2:	801a      	strh	r2, [r3, #0]
 8003fc4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003fc8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f06f 0202 	mvn.w	r2, #2
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24
 8003fd4:	f001 bd77 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8003fd8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003fdc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003fe8:	f5a2 7486 	sub.w	r4, r2, #268	; 0x10c
 8003fec:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003ff0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003ff4:	2104      	movs	r1, #4
 8003ff6:	6810      	ldr	r0, [r2, #0]
 8003ff8:	4798      	blx	r3
 8003ffa:	6020      	str	r0, [r4, #0]
 8003ffc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004000:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d02e      	beq.n	8004068 <cw_unpack_next+0x2f58>
 800400a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800400e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004018:	d014      	beq.n	8004044 <cw_unpack_next+0x2f34>
 800401a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800401e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004028:	801a      	strh	r2, [r3, #0]
 800402a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800402e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004038:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800403c:	6812      	ldr	r2, [r2, #0]
 800403e:	625a      	str	r2, [r3, #36]	; 0x24
 8004040:	f001 bd41 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8004044:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004048:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004052:	801a      	strh	r2, [r3, #0]
 8004054:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004058:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f06f 0202 	mvn.w	r2, #2
 8004062:	625a      	str	r2, [r3, #36]	; 0x24
 8004064:	f001 bd2f 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8004068:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800406c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004078:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800407c:	3304      	adds	r3, #4
 800407e:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8004082:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004086:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8004090:	61da      	str	r2, [r3, #28]
 8004092:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800409c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80040a6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	061a      	lsls	r2, r3, #24
 80040ae:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80040b2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040be:	431a      	orrs	r2, r3
 80040c0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80040c4:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	0a1b      	lsrs	r3, r3, #8
 80040cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80040d0:	431a      	orrs	r2, r3
 80040d2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80040d6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	0e1b      	lsrs	r3, r3, #24
 80040de:	431a      	orrs	r2, r3
 80040e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80040e4:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80040ee:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	17da      	asrs	r2, r3, #31
 80040f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040fa:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80040fe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004102:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800410c:	e9c3 1202 	strd	r1, r2, [r3, #8]
                    if (unpack_context->item.as.i64 >= 0)
 8004110:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004114:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	f2c1 84ce 	blt.w	8005ac0 <cw_unpack_next+0x49b0>
                        unpack_context->item.type = CWP_ITEM_POSITIVE_INTEGER;
 8004124:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004128:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8004132:	801a      	strh	r2, [r3, #0]
                    return;
 8004134:	f001 bcc4 	b.w	8005ac0 <cw_unpack_next+0x49b0>
        case 0xd3:  getDDItem8(CWP_ITEM_NEGATIVE_INTEGER);                      // signed int 64
 8004138:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800413c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	f240 132f 	movw	r3, #303	; 0x12f
 8004146:	8013      	strh	r3, [r2, #0]
 8004148:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800414c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004158:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800415c:	3308      	adds	r3, #8
 800415e:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8004162:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004166:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6a1a      	ldr	r2, [r3, #32]
 800416e:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8004172:	4293      	cmp	r3, r2
 8004174:	d96e      	bls.n	8004254 <cw_unpack_next+0x3144>
 8004176:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800417a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d111      	bne.n	80041aa <cw_unpack_next+0x309a>
 8004186:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800418a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004194:	801a      	strh	r2, [r3, #0]
 8004196:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800419a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0202 	mvn.w	r2, #2
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24
 80041a6:	f001 bc8e 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80041aa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80041ae:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80041ba:	f5a3 7484 	sub.w	r4, r3, #264	; 0x108
 80041be:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80041c2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80041c6:	2108      	movs	r1, #8
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	4790      	blx	r2
 80041cc:	6020      	str	r0, [r4, #0]
 80041ce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80041d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d02e      	beq.n	800423a <cw_unpack_next+0x312a>
 80041dc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80041e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ea:	d014      	beq.n	8004216 <cw_unpack_next+0x3106>
 80041ec:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80041f0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80041fa:	801a      	strh	r2, [r3, #0]
 80041fc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004200:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800420a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	625a      	str	r2, [r3, #36]	; 0x24
 8004212:	f001 bc58 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8004216:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800421a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004224:	801a      	strh	r2, [r3, #0]
 8004226:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800422a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0202 	mvn.w	r2, #2
 8004234:	625a      	str	r2, [r3, #36]	; 0x24
 8004236:	f001 bc46 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 800423a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800423e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800424a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800424e:	3308      	adds	r3, #8
 8004250:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8004254:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004258:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8004262:	61d3      	str	r3, [r2, #28]
 8004264:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
 8004270:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8004274:	0a1a      	lsrs	r2, r3, #8
 8004276:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800427a:	061b      	lsls	r3, r3, #24
 800427c:	ea42 0903 	orr.w	r9, r2, r3
 8004280:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8004284:	0a1a      	lsrs	r2, r3, #8
 8004286:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800428a:	061b      	lsls	r3, r3, #24
 800428c:	ea42 0803 	orr.w	r8, r2, r3
 8004290:	f408 437f 	and.w	r3, r8, #65280	; 0xff00
 8004294:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004298:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 800429c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042a0:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80042a4:	021a      	lsls	r2, r3, #8
 80042a6:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80042aa:	0e1b      	lsrs	r3, r3, #24
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042b2:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80042b6:	021a      	lsls	r2, r3, #8
 80042b8:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80042bc:	0e1b      	lsrs	r3, r3, #24
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80042c4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80042c8:	460b      	mov	r3, r1
 80042ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042d2:	4613      	mov	r3, r2
 80042d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042dc:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80042e0:	4623      	mov	r3, r4
 80042e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042e6:	4602      	mov	r2, r0
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042ee:	462b      	mov	r3, r5
 80042f0:	460a      	mov	r2, r1
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042f8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80042fc:	f04f 0000 	mov.w	r0, #0
 8004300:	f04f 0100 	mov.w	r1, #0
 8004304:	0a10      	lsrs	r0, r2, #8
 8004306:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800430a:	0a19      	lsrs	r1, r3, #8
 800430c:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 8004310:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004314:	2300      	movs	r3, #0
 8004316:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800431a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800431e:	4623      	mov	r3, r4
 8004320:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004324:	4602      	mov	r2, r0
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800432c:	462b      	mov	r3, r5
 800432e:	460a      	mov	r2, r1
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004336:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	020b      	lsls	r3, r1, #8
 8004344:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004348:	0202      	lsls	r2, r0, #8
 800434a:	2100      	movs	r1, #0
 800434c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8004350:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8004354:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004358:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800435c:	4623      	mov	r3, r4
 800435e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004362:	4602      	mov	r2, r0
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800436a:	462b      	mov	r3, r5
 800436c:	460a      	mov	r2, r1
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004374:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	0e0a      	lsrs	r2, r1, #24
 8004382:	2300      	movs	r3, #0
 8004384:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8004388:	4621      	mov	r1, r4
 800438a:	4311      	orrs	r1, r2
 800438c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004390:	4629      	mov	r1, r5
 8004392:	4319      	orrs	r1, r3
 8004394:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8004398:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	0603      	lsls	r3, r0, #24
 80043a6:	2200      	movs	r2, #0
 80043a8:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80043ac:	4621      	mov	r1, r4
 80043ae:	4311      	orrs	r1, r2
 80043b0:	67b9      	str	r1, [r7, #120]	; 0x78
 80043b2:	4629      	mov	r1, r5
 80043b4:	4319      	orrs	r1, r3
 80043b6:	67f9      	str	r1, [r7, #124]	; 0x7c
 80043b8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80043bc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80043c6:	e9c3 1202 	strd	r1, r2, [r3, #8]
                    if (unpack_context->item.as.i64 >= 0)
 80043ca:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80043ce:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f2c1 8373 	blt.w	8005ac4 <cw_unpack_next+0x49b4>
                        unpack_context->item.type = CWP_ITEM_POSITIVE_INTEGER;
 80043de:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80043e2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80043ec:	801a      	strh	r2, [r3, #0]
                    return;
 80043ee:	f001 bb69 	b.w	8005ac4 <cw_unpack_next+0x49b4>
        case 0xd4:  getDDItemFix(1);                                            // fixext 1
 80043f2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80043f6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004402:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004406:	3302      	adds	r3, #2
 8004408:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800440c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004410:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 800441c:	429a      	cmp	r2, r3
 800441e:	d96e      	bls.n	80044fe <cw_unpack_next+0x33ee>
 8004420:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004424:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d111      	bne.n	8004454 <cw_unpack_next+0x3344>
 8004430:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004434:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800443e:	801a      	strh	r2, [r3, #0]
 8004440:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004444:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f06f 0202 	mvn.w	r2, #2
 800444e:	625a      	str	r2, [r3, #36]	; 0x24
 8004450:	f001 bb39 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8004454:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004458:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004460:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004464:	f5a2 7482 	sub.w	r4, r2, #260	; 0x104
 8004468:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800446c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004470:	2102      	movs	r1, #2
 8004472:	6810      	ldr	r0, [r2, #0]
 8004474:	4798      	blx	r3
 8004476:	6020      	str	r0, [r4, #0]
 8004478:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800447c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d02e      	beq.n	80044e4 <cw_unpack_next+0x33d4>
 8004486:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800448a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004494:	d014      	beq.n	80044c0 <cw_unpack_next+0x33b0>
 8004496:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800449a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80044a4:	801a      	strh	r2, [r3, #0]
 80044a6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80044aa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80044b4:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	625a      	str	r2, [r3, #36]	; 0x24
 80044bc:	f001 bb03 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80044c0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80044c4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80044ce:	801a      	strh	r2, [r3, #0]
 80044d0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80044d4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f06f 0202 	mvn.w	r2, #2
 80044de:	625a      	str	r2, [r3, #36]	; 0x24
 80044e0:	f001 baf1 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80044e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80044e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80044f4:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80044f8:	3302      	adds	r3, #2
 80044fa:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 80044fe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004502:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 800450c:	61da      	str	r2, [r3, #28]
 800450e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 8004518:	f993 3000 	ldrsb.w	r3, [r3]
 800451c:	b21a      	sxth	r2, r3
 800451e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004522:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	801a      	strh	r2, [r3, #0]
 800452a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800452e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453c:	d111      	bne.n	8004562 <cw_unpack_next+0x3452>
 800453e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004542:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f240 32e7 	movw	r2, #999	; 0x3e7
 800454c:	801a      	strh	r2, [r3, #0]
 800454e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004552:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f06f 020b 	mvn.w	r2, #11
 800455c:	625a      	str	r2, [r3, #36]	; 0x24
 800455e:	f001 bab2 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8004562:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004566:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2201      	movs	r2, #1
 800456e:	60da      	str	r2, [r3, #12]
 8004570:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004574:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 800457e:	609a      	str	r2, [r3, #8]
 8004580:	f001 baa1 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xd5:  getDDItemFix(2);                                            // fixext 2
 8004584:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004588:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004594:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004598:	3303      	adds	r3, #3
 800459a:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 800459e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80045a2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d96e      	bls.n	8004690 <cw_unpack_next+0x3580>
 80045b2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80045b6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d111      	bne.n	80045e6 <cw_unpack_next+0x34d6>
 80045c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80045c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80045d0:	801a      	strh	r2, [r3, #0]
 80045d2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80045d6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0202 	mvn.w	r2, #2
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24
 80045e2:	f001 ba70 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80045e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80045ea:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80045f6:	f5a2 7480 	sub.w	r4, r2, #256	; 0x100
 80045fa:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80045fe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004602:	2103      	movs	r1, #3
 8004604:	6810      	ldr	r0, [r2, #0]
 8004606:	4798      	blx	r3
 8004608:	6020      	str	r0, [r4, #0]
 800460a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800460e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d02e      	beq.n	8004676 <cw_unpack_next+0x3566>
 8004618:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800461c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004626:	d014      	beq.n	8004652 <cw_unpack_next+0x3542>
 8004628:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800462c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004636:	801a      	strh	r2, [r3, #0]
 8004638:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800463c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004646:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	625a      	str	r2, [r3, #36]	; 0x24
 800464e:	f001 ba3a 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8004652:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004656:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004660:	801a      	strh	r2, [r3, #0]
 8004662:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004666:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0202 	mvn.w	r2, #2
 8004670:	625a      	str	r2, [r3, #36]	; 0x24
 8004672:	f001 ba28 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8004676:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800467a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004686:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800468a:	3303      	adds	r3, #3
 800468c:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8004690:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004694:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 800469e:	61da      	str	r2, [r3, #28]
 80046a0:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 80046aa:	f993 3000 	ldrsb.w	r3, [r3]
 80046ae:	b21a      	sxth	r2, r3
 80046b0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80046b4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	801a      	strh	r2, [r3, #0]
 80046bc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80046c0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ce:	d111      	bne.n	80046f4 <cw_unpack_next+0x35e4>
 80046d0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80046d4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80046de:	801a      	strh	r2, [r3, #0]
 80046e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80046e4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f06f 020b 	mvn.w	r2, #11
 80046ee:	625a      	str	r2, [r3, #36]	; 0x24
 80046f0:	f001 b9e9 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80046f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80046f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2202      	movs	r2, #2
 8004700:	60da      	str	r2, [r3, #12]
 8004702:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004706:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8004710:	609a      	str	r2, [r3, #8]
 8004712:	f001 b9d8 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xd6:  getDDItemFix(4);                                            // fixext 4
 8004716:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800471a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004726:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800472a:	3305      	adds	r3, #5
 800472c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004730:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004734:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8004740:	429a      	cmp	r2, r3
 8004742:	d962      	bls.n	800480a <cw_unpack_next+0x36fa>
 8004744:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004748:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	2b00      	cmp	r3, #0
 8004752:	d111      	bne.n	8004778 <cw_unpack_next+0x3668>
 8004754:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004758:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004762:	801a      	strh	r2, [r3, #0]
 8004764:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004768:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f06f 0202 	mvn.w	r2, #2
 8004772:	625a      	str	r2, [r3, #36]	; 0x24
 8004774:	f001 b9a7 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8004778:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800477c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004788:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800478c:	2105      	movs	r1, #5
 800478e:	6810      	ldr	r0, [r2, #0]
 8004790:	4798      	blx	r3
 8004792:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274
 8004796:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800479a:	2b00      	cmp	r3, #0
 800479c:	d028      	beq.n	80047f0 <cw_unpack_next+0x36e0>
 800479e:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a6:	d011      	beq.n	80047cc <cw_unpack_next+0x36bc>
 80047a8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80047ac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80047b6:	801a      	strh	r2, [r3, #0]
 80047b8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80047bc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80047c6:	625a      	str	r2, [r3, #36]	; 0x24
 80047c8:	f001 b97d 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80047cc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80047d0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80047da:	801a      	strh	r2, [r3, #0]
 80047dc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80047e0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f06f 0202 	mvn.w	r2, #2
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24
 80047ec:	f001 b96b 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80047f0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80047f4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004800:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004804:	3305      	adds	r3, #5
 8004806:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800480a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800480e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8004818:	61da      	str	r2, [r3, #28]
 800481a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 8004824:	f993 3000 	ldrsb.w	r3, [r3]
 8004828:	b21a      	sxth	r2, r3
 800482a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800482e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	801a      	strh	r2, [r3, #0]
 8004836:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800483a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004848:	d145      	bne.n	80048d6 <cw_unpack_next+0x37c6>
 800484a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004854:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800485e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	061a      	lsls	r2, r3, #24
 8004866:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800486a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004876:	431a      	orrs	r2, r3
 8004878:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800487c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	0a1b      	lsrs	r3, r3, #8
 8004884:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004888:	431a      	orrs	r2, r3
 800488a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800488e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	0e1b      	lsrs	r3, r3, #24
 8004896:	431a      	orrs	r2, r3
 8004898:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800489c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80048a6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	17da      	asrs	r2, r3, #31
 80048ae:	673b      	str	r3, [r7, #112]	; 0x70
 80048b0:	677a      	str	r2, [r7, #116]	; 0x74
 80048b2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80048b6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80048c0:	e9c3 1202 	strd	r1, r2, [r3, #8]
 80048c4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80048c8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2200      	movs	r2, #0
 80048d0:	611a      	str	r2, [r3, #16]
 80048d2:	f001 b8f8 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80048d6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80048da:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2204      	movs	r2, #4
 80048e2:	60da      	str	r2, [r3, #12]
 80048e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80048e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80048f2:	609a      	str	r2, [r3, #8]
 80048f4:	f001 b8e7 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xd7:  getDDItemFix(8);                                            // fixext 8
 80048f8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80048fc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004908:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800490c:	3309      	adds	r3, #9
 800490e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004912:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004916:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6a1a      	ldr	r2, [r3, #32]
 800491e:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004922:	4293      	cmp	r3, r2
 8004924:	d962      	bls.n	80049ec <cw_unpack_next+0x38dc>
 8004926:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800492a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	2b00      	cmp	r3, #0
 8004934:	d111      	bne.n	800495a <cw_unpack_next+0x384a>
 8004936:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800493a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004944:	801a      	strh	r2, [r3, #0]
 8004946:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800494a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0202 	mvn.w	r2, #2
 8004954:	625a      	str	r2, [r3, #36]	; 0x24
 8004956:	f001 b8b6 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 800495a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800495e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004966:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800496a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800496e:	2109      	movs	r1, #9
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	4790      	blx	r2
 8004974:	f8c7 0280 	str.w	r0, [r7, #640]	; 0x280
 8004978:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800497c:	2b00      	cmp	r3, #0
 800497e:	d028      	beq.n	80049d2 <cw_unpack_next+0x38c2>
 8004980:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8004984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004988:	d011      	beq.n	80049ae <cw_unpack_next+0x389e>
 800498a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800498e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004998:	801a      	strh	r2, [r3, #0]
 800499a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800499e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 80049a8:	625a      	str	r2, [r3, #36]	; 0x24
 80049aa:	f001 b88c 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80049ae:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80049b2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80049bc:	801a      	strh	r2, [r3, #0]
 80049be:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80049c2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0202 	mvn.w	r2, #2
 80049cc:	625a      	str	r2, [r3, #36]	; 0x24
 80049ce:	f001 b87a 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80049d2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80049d6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80049e2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80049e6:	3309      	adds	r3, #9
 80049e8:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80049ec:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80049f0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80049fa:	61d3      	str	r3, [r2, #28]
 80049fc:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8004a00:	1c53      	adds	r3, r2, #1
 8004a02:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004a06:	f992 3000 	ldrsb.w	r3, [r2]
 8004a0a:	b219      	sxth	r1, r3
 8004a0c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004a10:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	460b      	mov	r3, r1
 8004a18:	8013      	strh	r3, [r2, #0]
 8004a1a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004a1e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2c:	f040 80bf 	bne.w	8004bae <cw_unpack_next+0x3a9e>
 8004a30:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
 8004a3c:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8004a40:	0a1a      	lsrs	r2, r3, #8
 8004a42:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8004a46:	061b      	lsls	r3, r3, #24
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a4c:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8004a50:	0a1a      	lsrs	r2, r3, #8
 8004a52:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8004a56:	061b      	lsls	r3, r3, #24
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a5c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004a60:	460b      	mov	r3, r1
 8004a62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a66:	663b      	str	r3, [r7, #96]	; 0x60
 8004a68:	4613      	mov	r3, r2
 8004a6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a6e:	667b      	str	r3, [r7, #100]	; 0x64
 8004a70:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8004a74:	021a      	lsls	r2, r3, #8
 8004a76:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8004a7a:	0e1b      	lsrs	r3, r3, #24
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a80:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8004a84:	021a      	lsls	r2, r3, #8
 8004a86:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8004a8a:	0e1b      	lsrs	r3, r3, #24
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a90:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004a94:	460b      	mov	r3, r1
 8004a96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8004aa4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004aa8:	4623      	mov	r3, r4
 8004aaa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004aae:	4602      	mov	r2, r0
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ab4:	462b      	mov	r3, r5
 8004ab6:	460a      	mov	r2, r1
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004abc:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8004ac0:	f04f 0000 	mov.w	r0, #0
 8004ac4:	f04f 0100 	mov.w	r1, #0
 8004ac8:	0a10      	lsrs	r0, r2, #8
 8004aca:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004ace:	0a19      	lsrs	r1, r3, #8
 8004ad0:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 8004ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8004ada:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004ade:	4623      	mov	r3, r4
 8004ae0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004aea:	462b      	mov	r3, r5
 8004aec:	460a      	mov	r2, r1
 8004aee:	4313      	orrs	r3, r2
 8004af0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004af2:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8004af6:	f04f 0000 	mov.w	r0, #0
 8004afa:	f04f 0100 	mov.w	r1, #0
 8004afe:	0219      	lsls	r1, r3, #8
 8004b00:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004b04:	0210      	lsls	r0, r2, #8
 8004b06:	2300      	movs	r3, #0
 8004b08:	633b      	str	r3, [r7, #48]	; 0x30
 8004b0a:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 8004b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b10:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8004b14:	4623      	mov	r3, r4
 8004b16:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b20:	462b      	mov	r3, r5
 8004b22:	460a      	mov	r2, r1
 8004b24:	4313      	orrs	r3, r2
 8004b26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b28:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	0e0a      	lsrs	r2, r1, #24
 8004b36:	2300      	movs	r3, #0
 8004b38:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	4311      	orrs	r1, r2
 8004b40:	6239      	str	r1, [r7, #32]
 8004b42:	4629      	mov	r1, r5
 8004b44:	4319      	orrs	r1, r3
 8004b46:	6279      	str	r1, [r7, #36]	; 0x24
 8004b48:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	0603      	lsls	r3, r0, #24
 8004b56:	2200      	movs	r2, #0
 8004b58:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	4311      	orrs	r1, r2
 8004b60:	6039      	str	r1, [r7, #0]
 8004b62:	4629      	mov	r1, r5
 8004b64:	4319      	orrs	r1, r3
 8004b66:	6079      	str	r1, [r7, #4]
 8004b68:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004b6c:	e9c7 349e 	strd	r3, r4, [r7, #632]	; 0x278
 8004b70:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8004b74:	61ba      	str	r2, [r7, #24]
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	61fb      	str	r3, [r7, #28]
 8004b7c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004b80:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004b8a:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8004b8e:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	088a      	lsrs	r2, r1, #2
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004ba2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	611a      	str	r2, [r3, #16]
 8004baa:	f000 bf8c 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8004bae:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004bb2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2208      	movs	r2, #8
 8004bba:	60da      	str	r2, [r3, #12]
 8004bbc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004bc0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8004bca:	609a      	str	r2, [r3, #8]
 8004bcc:	f000 bf7b 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xd8:  getDDItemFix(16);                                           // fixext 16
 8004bd0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004bd4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004be0:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004be4:	3311      	adds	r3, #17
 8004be6:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8004bea:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004bee:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d962      	bls.n	8004cc4 <cw_unpack_next+0x3bb4>
 8004bfe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c02:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d111      	bne.n	8004c32 <cw_unpack_next+0x3b22>
 8004c0e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c12:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c1c:	801a      	strh	r2, [r3, #0]
 8004c1e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c22:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0202 	mvn.w	r2, #2
 8004c2c:	625a      	str	r2, [r3, #36]	; 0x24
 8004c2e:	f000 bf4a 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8004c32:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c36:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004c42:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004c46:	2111      	movs	r1, #17
 8004c48:	6810      	ldr	r0, [r2, #0]
 8004c4a:	4798      	blx	r3
 8004c4c:	f8c7 0284 	str.w	r0, [r7, #644]	; 0x284
 8004c50:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d028      	beq.n	8004caa <cw_unpack_next+0x3b9a>
 8004c58:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d011      	beq.n	8004c86 <cw_unpack_next+0x3b76>
 8004c62:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c66:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c70:	801a      	strh	r2, [r3, #0]
 8004c72:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c76:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24
 8004c82:	f000 bf20 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8004c86:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c8a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c94:	801a      	strh	r2, [r3, #0]
 8004c96:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c9a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f06f 0202 	mvn.w	r2, #2
 8004ca4:	625a      	str	r2, [r3, #36]	; 0x24
 8004ca6:	f000 bf0e 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8004caa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004cae:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004cba:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004cbe:	3311      	adds	r3, #17
 8004cc0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8004cc4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004cc8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 8004cd2:	61da      	str	r2, [r3, #28]
 8004cd4:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 8004cde:	f993 3000 	ldrsb.w	r3, [r3]
 8004ce2:	b21a      	sxth	r2, r3
 8004ce4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004ce8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	801a      	strh	r2, [r3, #0]
 8004cf0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004cf4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d02:	d111      	bne.n	8004d28 <cw_unpack_next+0x3c18>
 8004d04:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004d08:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004d12:	801a      	strh	r2, [r3, #0]
 8004d14:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004d18:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f06f 020b 	mvn.w	r2, #11
 8004d22:	625a      	str	r2, [r3, #36]	; 0x24
 8004d24:	f000 becf 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8004d28:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004d2c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2210      	movs	r2, #16
 8004d34:	60da      	str	r2, [r3, #12]
 8004d36:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004d3a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8004d44:	609a      	str	r2, [r3, #8]
 8004d46:	f000 bebe 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xd9:  getDDItem1(CWP_ITEM_STR, str.length, uint8_t);              // str 8
 8004d4a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004d4e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f44f 7299 	mov.w	r2, #306	; 0x132
 8004d58:	801a      	strh	r2, [r3, #0]
 8004d5a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004d5e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004d6a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004d6e:	3301      	adds	r3, #1
 8004d70:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8004d74:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004d78:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	f8d7 2348 	ldr.w	r2, [r7, #840]	; 0x348
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d962      	bls.n	8004e4e <cw_unpack_next+0x3d3e>
 8004d88:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004d8c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d111      	bne.n	8004dbc <cw_unpack_next+0x3cac>
 8004d98:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004d9c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004da6:	801a      	strh	r2, [r3, #0]
 8004da8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004dac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f06f 0202 	mvn.w	r2, #2
 8004db6:	625a      	str	r2, [r3, #36]	; 0x24
 8004db8:	f000 be85 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8004dbc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004dc0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004dcc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	6810      	ldr	r0, [r2, #0]
 8004dd4:	4798      	blx	r3
 8004dd6:	f8c7 028c 	str.w	r0, [r7, #652]	; 0x28c
 8004dda:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d028      	beq.n	8004e34 <cw_unpack_next+0x3d24>
 8004de2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dea:	d011      	beq.n	8004e10 <cw_unpack_next+0x3d00>
 8004dec:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004df0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004dfa:	801a      	strh	r2, [r3, #0]
 8004dfc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e00:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8004e0a:	625a      	str	r2, [r3, #36]	; 0x24
 8004e0c:	f000 be5b 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8004e10:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e14:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e1e:	801a      	strh	r2, [r3, #0]
 8004e20:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e24:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f06f 0202 	mvn.w	r2, #2
 8004e2e:	625a      	str	r2, [r3, #36]	; 0x24
 8004e30:	f000 be49 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8004e34:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e38:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004e44:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004e48:	3301      	adds	r3, #1
 8004e4a:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8004e4e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e52:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f8d7 2348 	ldr.w	r2, [r7, #840]	; 0x348
 8004e5c:	61da      	str	r2, [r3, #28]
 8004e5e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e6a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(str);
 8004e72:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e76:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004e82:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e86:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8004e92:	4413      	add	r3, r2
 8004e94:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8004e98:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e9c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d96d      	bls.n	8004f88 <cw_unpack_next+0x3e78>
 8004eac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004eb0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d111      	bne.n	8004ee0 <cw_unpack_next+0x3dd0>
 8004ebc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004ec0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004eca:	801a      	strh	r2, [r3, #0]
 8004ecc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004ed0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f06f 0202 	mvn.w	r2, #2
 8004eda:	625a      	str	r2, [r3, #36]	; 0x24
 8004edc:	f000 bdf3 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8004ee0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004ee4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004ef0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004ef4:	6812      	ldr	r2, [r2, #0]
 8004ef6:	68d1      	ldr	r1, [r2, #12]
 8004ef8:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004efc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004f00:	6810      	ldr	r0, [r2, #0]
 8004f02:	4798      	blx	r3
 8004f04:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 8004f08:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d028      	beq.n	8004f62 <cw_unpack_next+0x3e52>
 8004f10:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f18:	d011      	beq.n	8004f3e <cw_unpack_next+0x3e2e>
 8004f1a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f1e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f28:	801a      	strh	r2, [r3, #0]
 8004f2a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f2e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8004f38:	625a      	str	r2, [r3, #36]	; 0x24
 8004f3a:	f000 bdc4 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8004f3e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f42:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f4c:	801a      	strh	r2, [r3, #0]
 8004f4e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f52:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0202 	mvn.w	r2, #2
 8004f5c:	625a      	str	r2, [r3, #36]	; 0x24
 8004f5e:	f000 bdb2 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8004f62:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f66:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004f72:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f76:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8004f82:	4413      	add	r3, r2
 8004f84:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8004f88:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f8c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 8004f96:	61da      	str	r2, [r3, #28]
 8004f98:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f9c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8004fa6:	609a      	str	r2, [r3, #8]
 8004fa8:	f000 bd8d 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xda:  getDDItem2(CWP_ITEM_STR, str.length, uint16_t);             // str 16
 8004fac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004fb0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f44f 7299 	mov.w	r2, #306	; 0x132
 8004fba:	801a      	strh	r2, [r3, #0]
 8004fbc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004fc0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004fcc:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004fd0:	3302      	adds	r3, #2
 8004fd2:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8004fd6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004fda:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	f8d7 2340 	ldr.w	r2, [r7, #832]	; 0x340
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d962      	bls.n	80050b0 <cw_unpack_next+0x3fa0>
 8004fea:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004fee:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d111      	bne.n	800501e <cw_unpack_next+0x3f0e>
 8004ffa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004ffe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005008:	801a      	strh	r2, [r3, #0]
 800500a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800500e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0202 	mvn.w	r2, #2
 8005018:	625a      	str	r2, [r3, #36]	; 0x24
 800501a:	f000 bd54 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 800501e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005022:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800502e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005032:	2102      	movs	r1, #2
 8005034:	6810      	ldr	r0, [r2, #0]
 8005036:	4798      	blx	r3
 8005038:	f8c7 0294 	str.w	r0, [r7, #660]	; 0x294
 800503c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8005040:	2b00      	cmp	r3, #0
 8005042:	d028      	beq.n	8005096 <cw_unpack_next+0x3f86>
 8005044:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504c:	d011      	beq.n	8005072 <cw_unpack_next+0x3f62>
 800504e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005052:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f240 32e7 	movw	r2, #999	; 0x3e7
 800505c:	801a      	strh	r2, [r3, #0]
 800505e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005062:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 800506c:	625a      	str	r2, [r3, #36]	; 0x24
 800506e:	f000 bd2a 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8005072:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005076:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005080:	801a      	strh	r2, [r3, #0]
 8005082:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005086:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0202 	mvn.w	r2, #2
 8005090:	625a      	str	r2, [r3, #36]	; 0x24
 8005092:	f000 bd18 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8005096:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800509a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80050a6:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80050aa:	3302      	adds	r3, #2
 80050ac:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 80050b0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80050b4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f8d7 2340 	ldr.w	r2, [r7, #832]	; 0x340
 80050be:	61da      	str	r2, [r3, #28]
 80050c0:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 80050ca:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80050ce:	021b      	lsls	r3, r3, #8
 80050d0:	b21a      	sxth	r2, r3
 80050d2:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80050d6:	0a1b      	lsrs	r3, r3, #8
 80050d8:	b29b      	uxth	r3, r3
 80050da:	b21b      	sxth	r3, r3
 80050dc:	4313      	orrs	r3, r2
 80050de:	b21b      	sxth	r3, r3
 80050e0:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 80050e4:	f8b7 22aa 	ldrh.w	r2, [r7, #682]	; 0x2aa
 80050e8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80050ec:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(str);
 80050f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80050f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005104:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005108:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8005114:	4413      	add	r3, r2
 8005116:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800511a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800511e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 800512a:	429a      	cmp	r2, r3
 800512c:	d96d      	bls.n	800520a <cw_unpack_next+0x40fa>
 800512e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005132:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	2b00      	cmp	r3, #0
 800513c:	d111      	bne.n	8005162 <cw_unpack_next+0x4052>
 800513e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005142:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f240 32e7 	movw	r2, #999	; 0x3e7
 800514c:	801a      	strh	r2, [r3, #0]
 800514e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005152:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f06f 0202 	mvn.w	r2, #2
 800515c:	625a      	str	r2, [r3, #36]	; 0x24
 800515e:	f000 bcb2 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 8005162:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005166:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8005172:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005176:	6812      	ldr	r2, [r2, #0]
 8005178:	68d1      	ldr	r1, [r2, #12]
 800517a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800517e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005182:	6810      	ldr	r0, [r2, #0]
 8005184:	4798      	blx	r3
 8005186:	f8c7 0290 	str.w	r0, [r7, #656]	; 0x290
 800518a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800518e:	2b00      	cmp	r3, #0
 8005190:	d028      	beq.n	80051e4 <cw_unpack_next+0x40d4>
 8005192:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519a:	d011      	beq.n	80051c0 <cw_unpack_next+0x40b0>
 800519c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80051a0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80051aa:	801a      	strh	r2, [r3, #0]
 80051ac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80051b0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80051ba:	625a      	str	r2, [r3, #36]	; 0x24
 80051bc:	f000 bc83 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80051c0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80051c4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80051ce:	801a      	strh	r2, [r3, #0]
 80051d0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80051d4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f06f 0202 	mvn.w	r2, #2
 80051de:	625a      	str	r2, [r3, #36]	; 0x24
 80051e0:	f000 bc71 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80051e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80051e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80051f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80051f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8005204:	4413      	add	r3, r2
 8005206:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800520a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800520e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8005218:	61da      	str	r2, [r3, #28]
 800521a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800521e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8005228:	609a      	str	r2, [r3, #8]
 800522a:	f000 bc4c 	b.w	8005ac6 <cw_unpack_next+0x49b6>
        case 0xdb:  getDDItem4(CWP_ITEM_STR, str.length, uint32_t);             // str 32
 800522e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005232:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f44f 7299 	mov.w	r2, #306	; 0x132
 800523c:	801a      	strh	r2, [r3, #0]
 800523e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005242:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800524e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005252:	3304      	adds	r3, #4
 8005254:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8005258:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800525c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8005268:	429a      	cmp	r2, r3
 800526a:	d960      	bls.n	800532e <cw_unpack_next+0x421e>
 800526c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005270:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d111      	bne.n	80052a0 <cw_unpack_next+0x4190>
 800527c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005280:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f240 32e7 	movw	r2, #999	; 0x3e7
 800528a:	801a      	strh	r2, [r3, #0]
 800528c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005290:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f06f 0202 	mvn.w	r2, #2
 800529a:	625a      	str	r2, [r3, #36]	; 0x24
 800529c:	f000 bc13 	b.w	8005ac6 <cw_unpack_next+0x49b6>
 80052a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80052a4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80052b0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80052b4:	2104      	movs	r1, #4
 80052b6:	6810      	ldr	r0, [r2, #0]
 80052b8:	4798      	blx	r3
 80052ba:	f8c7 029c 	str.w	r0, [r7, #668]	; 0x29c
 80052be:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d026      	beq.n	8005314 <cw_unpack_next+0x4204>
 80052c6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80052ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ce:	d010      	beq.n	80052f2 <cw_unpack_next+0x41e2>
 80052d0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80052d4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80052de:	801a      	strh	r2, [r3, #0]
 80052e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80052e4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80052ee:	625a      	str	r2, [r3, #36]	; 0x24
 80052f0:	e3e9      	b.n	8005ac6 <cw_unpack_next+0x49b6>
 80052f2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80052f6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005300:	801a      	strh	r2, [r3, #0]
 8005302:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005306:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0202 	mvn.w	r2, #2
 8005310:	625a      	str	r2, [r3, #36]	; 0x24
 8005312:	e3d8      	b.n	8005ac6 <cw_unpack_next+0x49b6>
 8005314:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005318:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005324:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005328:	3304      	adds	r3, #4
 800532a:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 800532e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005332:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 800533c:	61da      	str	r2, [r3, #28]
 800533e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005348:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005352:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	061a      	lsls	r2, r3, #24
 800535a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800535e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	021b      	lsls	r3, r3, #8
 8005366:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800536a:	431a      	orrs	r2, r3
 800536c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005370:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	0a1b      	lsrs	r3, r3, #8
 8005378:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800537c:	431a      	orrs	r2, r3
 800537e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005382:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	0e1b      	lsrs	r3, r3, #24
 800538a:	431a      	orrs	r2, r3
 800538c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005390:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800539a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80053a4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(str);
 80053ac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80053b0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80053bc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80053c0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80053cc:	4413      	add	r3, r2
 80053ce:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 80053d2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80053d6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d96a      	bls.n	80054bc <cw_unpack_next+0x43ac>
 80053e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80053ea:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d110      	bne.n	8005418 <cw_unpack_next+0x4308>
 80053f6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80053fa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005404:	801a      	strh	r2, [r3, #0]
 8005406:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800540a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0202 	mvn.w	r2, #2
 8005414:	625a      	str	r2, [r3, #36]	; 0x24
 8005416:	e356      	b.n	8005ac6 <cw_unpack_next+0x49b6>
 8005418:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800541c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8005428:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800542c:	6812      	ldr	r2, [r2, #0]
 800542e:	68d1      	ldr	r1, [r2, #12]
 8005430:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8005434:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005438:	6810      	ldr	r0, [r2, #0]
 800543a:	4798      	blx	r3
 800543c:	f8c7 0298 	str.w	r0, [r7, #664]	; 0x298
 8005440:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005444:	2b00      	cmp	r3, #0
 8005446:	d026      	beq.n	8005496 <cw_unpack_next+0x4386>
 8005448:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800544c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005450:	d010      	beq.n	8005474 <cw_unpack_next+0x4364>
 8005452:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005456:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005460:	801a      	strh	r2, [r3, #0]
 8005462:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005466:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8005470:	625a      	str	r2, [r3, #36]	; 0x24
 8005472:	e328      	b.n	8005ac6 <cw_unpack_next+0x49b6>
 8005474:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005478:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005482:	801a      	strh	r2, [r3, #0]
 8005484:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005488:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f06f 0202 	mvn.w	r2, #2
 8005492:	625a      	str	r2, [r3, #36]	; 0x24
 8005494:	e317      	b.n	8005ac6 <cw_unpack_next+0x49b6>
 8005496:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800549a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80054a6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80054aa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80054b6:	4413      	add	r3, r2
 80054b8:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 80054bc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80054c0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 80054ca:	61da      	str	r2, [r3, #28]
 80054cc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80054d0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80054da:	609a      	str	r2, [r3, #8]
 80054dc:	e2f3      	b.n	8005ac6 <cw_unpack_next+0x49b6>
        case 0xdc:  getDDItem2(CWP_ITEM_ARRAY, array.size, uint16_t);   return;  // array 16
 80054de:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80054e2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f44f 729a 	mov.w	r2, #308	; 0x134
 80054ec:	801a      	strh	r2, [r3, #0]
 80054ee:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80054f2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80054fe:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005502:	3302      	adds	r3, #2
 8005504:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 8005508:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800550c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8005518:	429a      	cmp	r2, r3
 800551a:	d95f      	bls.n	80055dc <cw_unpack_next+0x44cc>
 800551c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005520:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	2b00      	cmp	r3, #0
 800552a:	d110      	bne.n	800554e <cw_unpack_next+0x443e>
 800552c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005530:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f240 32e7 	movw	r2, #999	; 0x3e7
 800553a:	801a      	strh	r2, [r3, #0]
 800553c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005540:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f06f 0202 	mvn.w	r2, #2
 800554a:	625a      	str	r2, [r3, #36]	; 0x24
 800554c:	e2bb      	b.n	8005ac6 <cw_unpack_next+0x49b6>
 800554e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005552:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800555e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005562:	2102      	movs	r1, #2
 8005564:	6810      	ldr	r0, [r2, #0]
 8005566:	4798      	blx	r3
 8005568:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 800556c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d026      	beq.n	80055c2 <cw_unpack_next+0x44b2>
 8005574:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557c:	d010      	beq.n	80055a0 <cw_unpack_next+0x4490>
 800557e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005582:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f240 32e7 	movw	r2, #999	; 0x3e7
 800558c:	801a      	strh	r2, [r3, #0]
 800558e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005592:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 800559c:	625a      	str	r2, [r3, #36]	; 0x24
 800559e:	e292      	b.n	8005ac6 <cw_unpack_next+0x49b6>
 80055a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80055a4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80055ae:	801a      	strh	r2, [r3, #0]
 80055b0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80055b4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f06f 0202 	mvn.w	r2, #2
 80055be:	625a      	str	r2, [r3, #36]	; 0x24
 80055c0:	e281      	b.n	8005ac6 <cw_unpack_next+0x49b6>
 80055c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80055c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80055d2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80055d6:	3302      	adds	r3, #2
 80055d8:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 80055dc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80055e0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 80055ea:	61da      	str	r2, [r3, #28]
 80055ec:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 80055f6:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80055fa:	021b      	lsls	r3, r3, #8
 80055fc:	b21a      	sxth	r2, r3
 80055fe:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8005602:	0a1b      	lsrs	r3, r3, #8
 8005604:	b29b      	uxth	r3, r3
 8005606:	b21b      	sxth	r3, r3
 8005608:	4313      	orrs	r3, r2
 800560a:	b21b      	sxth	r3, r3
 800560c:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 8005610:	f8b7 22aa 	ldrh.w	r2, [r7, #682]	; 0x2aa
 8005614:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005618:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	609a      	str	r2, [r3, #8]
 8005620:	e251      	b.n	8005ac6 <cw_unpack_next+0x49b6>
        case 0xdd:  getDDItem4(CWP_ITEM_ARRAY, array.size, uint32_t);   return;  // array 32
 8005622:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005626:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f44f 729a 	mov.w	r2, #308	; 0x134
 8005630:	801a      	strh	r2, [r3, #0]
 8005632:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005636:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005642:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005646:	3304      	adds	r3, #4
 8005648:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800564c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005650:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 800565c:	429a      	cmp	r2, r3
 800565e:	d95f      	bls.n	8005720 <cw_unpack_next+0x4610>
 8005660:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005664:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	2b00      	cmp	r3, #0
 800566e:	d110      	bne.n	8005692 <cw_unpack_next+0x4582>
 8005670:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005674:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800567e:	801a      	strh	r2, [r3, #0]
 8005680:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005684:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f06f 0202 	mvn.w	r2, #2
 800568e:	625a      	str	r2, [r3, #36]	; 0x24
 8005690:	e219      	b.n	8005ac6 <cw_unpack_next+0x49b6>
 8005692:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005696:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80056a2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80056a6:	2104      	movs	r1, #4
 80056a8:	6810      	ldr	r0, [r2, #0]
 80056aa:	4798      	blx	r3
 80056ac:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
 80056b0:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d026      	beq.n	8005706 <cw_unpack_next+0x45f6>
 80056b8:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80056bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c0:	d010      	beq.n	80056e4 <cw_unpack_next+0x45d4>
 80056c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80056c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80056d0:	801a      	strh	r2, [r3, #0]
 80056d2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80056d6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 80056e0:	625a      	str	r2, [r3, #36]	; 0x24
 80056e2:	e1f0      	b.n	8005ac6 <cw_unpack_next+0x49b6>
 80056e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80056e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80056f2:	801a      	strh	r2, [r3, #0]
 80056f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80056f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f06f 0202 	mvn.w	r2, #2
 8005702:	625a      	str	r2, [r3, #36]	; 0x24
 8005704:	e1df      	b.n	8005ac6 <cw_unpack_next+0x49b6>
 8005706:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800570a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005716:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800571a:	3304      	adds	r3, #4
 800571c:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8005720:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005724:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 800572e:	61da      	str	r2, [r3, #28]
 8005730:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800573a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005744:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	061a      	lsls	r2, r3, #24
 800574c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005750:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	021b      	lsls	r3, r3, #8
 8005758:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800575c:	431a      	orrs	r2, r3
 800575e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005762:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	0a1b      	lsrs	r3, r3, #8
 800576a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800576e:	431a      	orrs	r2, r3
 8005770:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005774:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	0e1b      	lsrs	r3, r3, #24
 800577c:	431a      	orrs	r2, r3
 800577e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005782:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800578c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005796:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	609a      	str	r2, [r3, #8]
 800579e:	e192      	b.n	8005ac6 <cw_unpack_next+0x49b6>
        case 0xde:  getDDItem2(CWP_ITEM_MAP, map.size, uint16_t);       return;  // map 16
 80057a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80057a4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f240 1235 	movw	r2, #309	; 0x135
 80057ae:	801a      	strh	r2, [r3, #0]
 80057b0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80057b4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80057c0:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80057c4:	3302      	adds	r3, #2
 80057c6:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 80057ca:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80057ce:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f8d7 2328 	ldr.w	r2, [r7, #808]	; 0x328
 80057da:	429a      	cmp	r2, r3
 80057dc:	d95f      	bls.n	800589e <cw_unpack_next+0x478e>
 80057de:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80057e2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d110      	bne.n	8005810 <cw_unpack_next+0x4700>
 80057ee:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80057f2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80057fc:	801a      	strh	r2, [r3, #0]
 80057fe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005802:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0202 	mvn.w	r2, #2
 800580c:	625a      	str	r2, [r3, #36]	; 0x24
 800580e:	e15a      	b.n	8005ac6 <cw_unpack_next+0x49b6>
 8005810:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005814:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8005820:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005824:	2102      	movs	r1, #2
 8005826:	6810      	ldr	r0, [r2, #0]
 8005828:	4798      	blx	r3
 800582a:	f8c7 02ac 	str.w	r0, [r7, #684]	; 0x2ac
 800582e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8005832:	2b00      	cmp	r3, #0
 8005834:	d026      	beq.n	8005884 <cw_unpack_next+0x4774>
 8005836:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800583a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583e:	d010      	beq.n	8005862 <cw_unpack_next+0x4752>
 8005840:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005844:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800584e:	801a      	strh	r2, [r3, #0]
 8005850:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005854:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 800585e:	625a      	str	r2, [r3, #36]	; 0x24
 8005860:	e131      	b.n	8005ac6 <cw_unpack_next+0x49b6>
 8005862:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005866:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005870:	801a      	strh	r2, [r3, #0]
 8005872:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005876:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0202 	mvn.w	r2, #2
 8005880:	625a      	str	r2, [r3, #36]	; 0x24
 8005882:	e120      	b.n	8005ac6 <cw_unpack_next+0x49b6>
 8005884:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005888:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005894:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005898:	3302      	adds	r3, #2
 800589a:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 800589e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80058a2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f8d7 2328 	ldr.w	r2, [r7, #808]	; 0x328
 80058ac:	61da      	str	r2, [r3, #28]
 80058ae:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 80058b8:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80058bc:	021b      	lsls	r3, r3, #8
 80058be:	b21a      	sxth	r2, r3
 80058c0:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80058c4:	0a1b      	lsrs	r3, r3, #8
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	b21b      	sxth	r3, r3
 80058ca:	4313      	orrs	r3, r2
 80058cc:	b21b      	sxth	r3, r3
 80058ce:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 80058d2:	f8b7 22aa 	ldrh.w	r2, [r7, #682]	; 0x2aa
 80058d6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80058da:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	609a      	str	r2, [r3, #8]
 80058e2:	e0f0      	b.n	8005ac6 <cw_unpack_next+0x49b6>
        case 0xdf:  getDDItem4(CWP_ITEM_MAP, map.size, uint32_t);       return;  // map 32
 80058e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80058e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f240 1235 	movw	r2, #309	; 0x135
 80058f2:	801a      	strh	r2, [r3, #0]
 80058f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80058f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005904:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005908:	3304      	adds	r3, #4
 800590a:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800590e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005912:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 800591e:	429a      	cmp	r2, r3
 8005920:	d95f      	bls.n	80059e2 <cw_unpack_next+0x48d2>
 8005922:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005926:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	2b00      	cmp	r3, #0
 8005930:	d110      	bne.n	8005954 <cw_unpack_next+0x4844>
 8005932:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005936:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005940:	801a      	strh	r2, [r3, #0]
 8005942:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005946:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f06f 0202 	mvn.w	r2, #2
 8005950:	625a      	str	r2, [r3, #36]	; 0x24
 8005952:	e0b8      	b.n	8005ac6 <cw_unpack_next+0x49b6>
 8005954:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005958:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8005964:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005968:	2104      	movs	r1, #4
 800596a:	6810      	ldr	r0, [r2, #0]
 800596c:	4798      	blx	r3
 800596e:	f8c7 02b0 	str.w	r0, [r7, #688]	; 0x2b0
 8005972:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d026      	beq.n	80059c8 <cw_unpack_next+0x48b8>
 800597a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005982:	d010      	beq.n	80059a6 <cw_unpack_next+0x4896>
 8005984:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005988:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005992:	801a      	strh	r2, [r3, #0]
 8005994:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005998:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 80059a2:	625a      	str	r2, [r3, #36]	; 0x24
 80059a4:	e08f      	b.n	8005ac6 <cw_unpack_next+0x49b6>
 80059a6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80059aa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80059b4:	801a      	strh	r2, [r3, #0]
 80059b6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80059ba:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0202 	mvn.w	r2, #2
 80059c4:	625a      	str	r2, [r3, #36]	; 0x24
 80059c6:	e07e      	b.n	8005ac6 <cw_unpack_next+0x49b6>
 80059c8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80059cc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80059d8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80059dc:	3304      	adds	r3, #4
 80059de:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80059e2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80059e6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 80059f0:	61da      	str	r2, [r3, #28]
 80059f2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80059fc:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a06:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	061a      	lsls	r2, r3, #24
 8005a0e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a12:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	021b      	lsls	r3, r3, #8
 8005a1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a24:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	0a1b      	lsrs	r3, r3, #8
 8005a2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005a30:	431a      	orrs	r2, r3
 8005a32:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a36:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	0e1b      	lsrs	r3, r3, #24
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a44:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a4e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a58:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	609a      	str	r2, [r3, #8]
 8005a60:	e031      	b.n	8005ac6 <cw_unpack_next+0x49b6>
        case 0xe0: case 0xe1: case 0xe2: case 0xe3: case 0xe4: case 0xe5: case 0xe6: case 0xe7:
        case 0xe8: case 0xe9: case 0xea: case 0xeb: case 0xec: case 0xed: case 0xee: case 0xef:
        case 0xf0: case 0xf1: case 0xf2: case 0xf3: case 0xf4: case 0xf5: case 0xf6: case 0xf7:
        case 0xf8: case 0xf9: case 0xfa: case 0xfb: case 0xfc: case 0xfd: case 0xfe: case 0xff:
                    getDDItem(CWP_ITEM_NEGATIVE_INTEGER, i64, (int8_t)c); return;    // negative fixnum
 8005a62:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a66:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f240 122f 	movw	r2, #303	; 0x12f
 8005a70:	801a      	strh	r2, [r3, #0]
 8005a72:	f997 32b7 	ldrsb.w	r3, [r7, #695]	; 0x2b7
 8005a76:	b25b      	sxtb	r3, r3
 8005a78:	17da      	asrs	r2, r3, #31
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	617a      	str	r2, [r7, #20]
 8005a7e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a82:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005a8c:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8005a90:	e019      	b.n	8005ac6 <cw_unpack_next+0x49b6>
        default:
                    UNPACK_ERROR(CWP_RC_MALFORMED_INPUT)
 8005a92:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a96:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005aa0:	801a      	strh	r2, [r3, #0]
 8005aa2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005aa6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f06f 0203 	mvn.w	r2, #3
 8005ab0:	625a      	str	r2, [r3, #36]	; 0x24
 8005ab2:	e008      	b.n	8005ac6 <cw_unpack_next+0x49b6>
        return;
 8005ab4:	bf00      	nop
 8005ab6:	e006      	b.n	8005ac6 <cw_unpack_next+0x49b6>
                    return;
 8005ab8:	bf00      	nop
 8005aba:	e004      	b.n	8005ac6 <cw_unpack_next+0x49b6>
                    return;
 8005abc:	bf00      	nop
 8005abe:	e002      	b.n	8005ac6 <cw_unpack_next+0x49b6>
                    return;
 8005ac0:	bf00      	nop
 8005ac2:	e000      	b.n	8005ac6 <cw_unpack_next+0x49b6>
                    return;
 8005ac4:	bf00      	nop
    }
}
 8005ac6:	f507 775d 	add.w	r7, r7, #884	; 0x374
 8005aca:	46bd      	mov	sp, r7
 8005acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005ad0 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005ad4:	f000 fd00 	bl	80064d8 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8005ad8:	f000 f9da 	bl	8005e90 <SystemClock_Config>
	BSP_LED_Init(LED1); // RED LED
 8005adc:	2000      	movs	r0, #0
 8005ade:	f000 fc7b 	bl	80063d8 <BSP_LED_Init>
	BSP_LED_Init(LED2); // BLUE LED
 8005ae2:	2001      	movs	r0, #1
 8005ae4:	f000 fc78 	bl	80063d8 <BSP_LED_Init>
	BSP_LED_Init(LED3); // GREEN LED
 8005ae8:	2002      	movs	r0, #2
 8005aea:	f000 fc75 	bl	80063d8 <BSP_LED_Init>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005aee:	f000 fa93 	bl	8006018 <MX_GPIO_Init>
	MX_DMA_Init();
 8005af2:	f000 fa6b 	bl	8005fcc <MX_DMA_Init>
	MX_USART1_UART_Init();
 8005af6:	f000 fa31 	bl	8005f5c <MX_USART1_UART_Init>
	/* Configure timeout feature for UART */
//	HAL_UART_ReceiverTimeout_Config(&huart1, TIMEOUT);
//	HAL_UART_EnableReceiverTimeout(&huart1);

	/* Initialize LCD screen */
	LCD_Init();
 8005afa:	f7fa fead 	bl	8000858 <LCD_Init>
	LCD_Clear();
 8005afe:	f7fa fe65 	bl	80007cc <LCD_Clear>
	LCD_Set_Cursor(1, 1);
 8005b02:	2101      	movs	r1, #1
 8005b04:	2001      	movs	r0, #1
 8005b06:	f7fa fe6e 	bl	80007e6 <LCD_Set_Cursor>
	LCD_Write_String("  Gary is  ");
 8005b0a:	480d      	ldr	r0, [pc, #52]	; (8005b40 <main+0x70>)
 8005b0c:	f7fa fff6 	bl	8000afc <LCD_Write_String>
	LCD_Set_Cursor(2, 1);
 8005b10:	2101      	movs	r1, #1
 8005b12:	2002      	movs	r0, #2
 8005b14:	f7fa fe67 	bl	80007e6 <LCD_Set_Cursor>
	LCD_Write_String("very cool!!!");
 8005b18:	480a      	ldr	r0, [pc, #40]	; (8005b44 <main+0x74>)
 8005b1a:	f7fa ffef 	bl	8000afc <LCD_Write_String>
	//cw_unpack_context uc;
	//uint8_t aRxBuffer[RXBUFFERSIZE];
	//uint8_t *aRxBuffer;
	//int * newCommands;
	while (1) {
		BSP_LED_Off(LED2); // LED OFF
 8005b1e:	2001      	movs	r0, #1
 8005b20:	f000 fcc0 	bl	80064a4 <BSP_LED_Off>

		// SEND TELEMETRY DATA
		pack_telemetry();
 8005b24:	f000 f812 	bl	8005b4c <pack_telemetry>
		send_telemetry();
 8005b28:	f000 f8a4 	bl	8005c74 <send_telemetry>

		BSP_LED_On(LED2); // LED ON
 8005b2c:	2001      	movs	r0, #1
 8005b2e:	f000 fc9f 	bl	8006470 <BSP_LED_On>

		// RECEIVE DATA (if any)
		receive_commands();
 8005b32:	f000 f8eb 	bl	8005d0c <receive_commands>
		do_something_with_commands(newCommands);
 8005b36:	4804      	ldr	r0, [pc, #16]	; (8005b48 <main+0x78>)
 8005b38:	f000 f9a0 	bl	8005e7c <do_something_with_commands>
		BSP_LED_Off(LED2); // LED OFF
 8005b3c:	e7ef      	b.n	8005b1e <main+0x4e>
 8005b3e:	bf00      	nop
 8005b40:	0800abac 	.word	0x0800abac
 8005b44:	0800abb8 	.word	0x0800abb8
 8005b48:	200001bc 	.word	0x200001bc

08005b4c <pack_telemetry>:
	}
}

/* Pack telemetry data in order to send packed data to VR team */
void pack_telemetry() {
 8005b4c:	b5b0      	push	{r4, r5, r7, lr}
 8005b4e:	b08a      	sub	sp, #40	; 0x28
 8005b50:	af00      	add	r7, sp, #0
	// generate values for now (6 integers - ax, ay, az, gx, gy, gz)
	//cw_pack_context pc;
	char buffer[TXBUFFERSIZE];
	int num = 45;
 8005b52:	232d      	movs	r3, #45	; 0x2d
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24

	cw_pack_context_init(&pc, buffer, TXBUFFERSIZE, 0);
 8005b56:	4639      	mov	r1, r7
 8005b58:	2300      	movs	r3, #0
 8005b5a:	221e      	movs	r2, #30
 8005b5c:	4814      	ldr	r0, [pc, #80]	; (8005bb0 <pack_telemetry+0x64>)
 8005b5e:	f7fb f801 	bl	8000b64 <cw_pack_context_init>
	cw_pack_array_size(&pc, 6);
 8005b62:	2106      	movs	r1, #6
 8005b64:	4812      	ldr	r0, [pc, #72]	; (8005bb0 <pack_telemetry+0x64>)
 8005b66:	f7fb f9f2 	bl	8000f4e <cw_pack_array_size>
	for (int i = 0; i < 6; i++) {
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	623b      	str	r3, [r7, #32]
 8005b6e:	e017      	b.n	8005ba0 <pack_telemetry+0x54>
		cw_pack_unsigned(&pc, num);
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	17da      	asrs	r2, r3, #31
 8005b74:	461c      	mov	r4, r3
 8005b76:	4615      	mov	r5, r2
 8005b78:	4622      	mov	r2, r4
 8005b7a:	462b      	mov	r3, r5
 8005b7c:	480c      	ldr	r0, [pc, #48]	; (8005bb0 <pack_telemetry+0x64>)
 8005b7e:	f7fb f81c 	bl	8000bba <cw_pack_unsigned>
		num = (num * 0x78282) % 1024;
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	4a0b      	ldr	r2, [pc, #44]	; (8005bb4 <pack_telemetry+0x68>)
 8005b86:	fb02 f303 	mul.w	r3, r2, r3
 8005b8a:	425a      	negs	r2, r3
 8005b8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b90:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005b94:	bf58      	it	pl
 8005b96:	4253      	negpl	r3, r2
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < 6; i++) {
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	623b      	str	r3, [r7, #32]
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	2b05      	cmp	r3, #5
 8005ba4:	dde4      	ble.n	8005b70 <pack_telemetry+0x24>
	}

	//length = pc.current - pc.start;
	//if (length != 24) Error_Handler();
	//return pc;
}
 8005ba6:	bf00      	nop
 8005ba8:	bf00      	nop
 8005baa:	3728      	adds	r7, #40	; 0x28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bdb0      	pop	{r4, r5, r7, pc}
 8005bb0:	20000214 	.word	0x20000214
 8005bb4:	00078282 	.word	0x00078282

08005bb8 <unpack_commands>:

/* Unpack data received ---> integer array*/
//void unpack_commands(uint8_t * recvBuffer) {
void unpack_commands() {
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
	// TODO - need to decide what the format of this stuff is
	//int receivedData[5]; // Controls: pitch, yaw, roll --- Gimble: left/right, up/down
	int * ptr = newCommands;
 8005bbe:	4b29      	ldr	r3, [pc, #164]	; (8005c64 <unpack_commands+0xac>)
 8005bc0:	60fb      	str	r3, [r7, #12]
	int numItems = 0;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	607b      	str	r3, [r7, #4]
	//cw_unpack_context uc;
	cw_unpack_context_init(&uc, (char *) unpackBuffer, sizeof(unpackBuffer), 0);
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	2211      	movs	r2, #17
 8005bca:	4927      	ldr	r1, [pc, #156]	; (8005c68 <unpack_commands+0xb0>)
 8005bcc:	4827      	ldr	r0, [pc, #156]	; (8005c6c <unpack_commands+0xb4>)
 8005bce:	f7fb fa79 	bl	80010c4 <cw_unpack_context_init>
	cw_unpack_next(&uc); // get array length
 8005bd2:	4826      	ldr	r0, [pc, #152]	; (8005c6c <unpack_commands+0xb4>)
 8005bd4:	f7fb fa9c 	bl	8001110 <cw_unpack_next>
	numItems = uc.item.as.i64;
 8005bd8:	4b24      	ldr	r3, [pc, #144]	; (8005c6c <unpack_commands+0xb4>)
 8005bda:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005bde:	4613      	mov	r3, r2
 8005be0:	607b      	str	r3, [r7, #4]
	//newCommands = uc.item.as.array;
	for (int i = 0; i < numItems; i++) {
 8005be2:	2300      	movs	r3, #0
 8005be4:	60bb      	str	r3, [r7, #8]
 8005be6:	e033      	b.n	8005c50 <unpack_commands+0x98>
		cw_unpack_next(&uc);
 8005be8:	4820      	ldr	r0, [pc, #128]	; (8005c6c <unpack_commands+0xb4>)
 8005bea:	f7fb fa91 	bl	8001110 <cw_unpack_next>
		if (uc.item.type == CWP_ITEM_POSITIVE_INTEGER) {
 8005bee:	4b1f      	ldr	r3, [pc, #124]	; (8005c6c <unpack_commands+0xb4>)
 8005bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bf4:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 8005bf8:	d108      	bne.n	8005c0c <unpack_commands+0x54>
			*(ptr++) = uc.item.as.u64;
 8005bfa:	4b1c      	ldr	r3, [pc, #112]	; (8005c6c <unpack_commands+0xb4>)
 8005bfc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	1d1a      	adds	r2, r3, #4
 8005c04:	60fa      	str	r2, [r7, #12]
 8005c06:	4602      	mov	r2, r0
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	e013      	b.n	8005c34 <unpack_commands+0x7c>
		} else if (uc.item.type == CWP_ITEM_NEGATIVE_INTEGER) {
 8005c0c:	4b17      	ldr	r3, [pc, #92]	; (8005c6c <unpack_commands+0xb4>)
 8005c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c12:	f240 122f 	movw	r2, #303	; 0x12f
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d108      	bne.n	8005c2c <unpack_commands+0x74>
			*(ptr++) = uc.item.as.i64;
 8005c1a:	4b14      	ldr	r3, [pc, #80]	; (8005c6c <unpack_commands+0xb4>)
 8005c1c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	1d1a      	adds	r2, r3, #4
 8005c24:	60fa      	str	r2, [r7, #12]
 8005c26:	4602      	mov	r2, r0
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	e003      	b.n	8005c34 <unpack_commands+0x7c>
		} else {
			errorType = 1;
 8005c2c:	4b10      	ldr	r3, [pc, #64]	; (8005c70 <unpack_commands+0xb8>)
 8005c2e:	2201      	movs	r2, #1
 8005c30:	601a      	str	r2, [r3, #0]
			break;
 8005c32:	e012      	b.n	8005c5a <unpack_commands+0xa2>
			//Error_Handler(); // error if not pos/neg integer
		}

		if ((int) uc.current == 0xcc || (int) uc.current == 0xd0) {
 8005c34:	4b0d      	ldr	r3, [pc, #52]	; (8005c6c <unpack_commands+0xb4>)
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	2bcc      	cmp	r3, #204	; 0xcc
 8005c3a:	d003      	beq.n	8005c44 <unpack_commands+0x8c>
 8005c3c:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <unpack_commands+0xb4>)
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	2bd0      	cmp	r3, #208	; 0xd0
 8005c42:	d102      	bne.n	8005c4a <unpack_commands+0x92>
			cw_unpack_next(&uc);
 8005c44:	4809      	ldr	r0, [pc, #36]	; (8005c6c <unpack_commands+0xb4>)
 8005c46:	f7fb fa63 	bl	8001110 <cw_unpack_next>
	for (int i = 0; i < numItems; i++) {
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	60bb      	str	r3, [r7, #8]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	dbc7      	blt.n	8005be8 <unpack_commands+0x30>
		}
	}
	//return receivedData;
}
 8005c58:	bf00      	nop
 8005c5a:	bf00      	nop
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	200001bc 	.word	0x200001bc
 8005c68:	20000200 	.word	0x20000200
 8005c6c:	20000238 	.word	0x20000238
 8005c70:	20000008 	.word	0x20000008

08005c74 <send_telemetry>:

/* USART-TX: Send the packed telemetry */
void send_telemetry() {
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
	//uint8_t * sendBuffer;
	size_t length = pc.current - pc.start; // add 4 bytes to size for flush sequence
 8005c7a:	4b1e      	ldr	r3, [pc, #120]	; (8005cf4 <send_telemetry+0x80>)
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	4b1d      	ldr	r3, [pc, #116]	; (8005cf4 <send_telemetry+0x80>)
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	607b      	str	r3, [r7, #4]

	// String operations
	//sendBuffer = malloc(length + 4);
	strncpy((char *) aTxBuffer, (char *) pc.start, length);
 8005c86:	4b1b      	ldr	r3, [pc, #108]	; (8005cf4 <send_telemetry+0x80>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	481a      	ldr	r0, [pc, #104]	; (8005cf8 <send_telemetry+0x84>)
 8005c90:	f004 fb2a 	bl	800a2e8 <strncpy>
	strncpy((char *) aTxBuffer + length, (char *) flushSequence, 4);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a18      	ldr	r2, [pc, #96]	; (8005cf8 <send_telemetry+0x84>)
 8005c98:	4413      	add	r3, r2
 8005c9a:	2204      	movs	r2, #4
 8005c9c:	4917      	ldr	r1, [pc, #92]	; (8005cfc <send_telemetry+0x88>)
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f004 fb22 	bl	800a2e8 <strncpy>

	// Wait for current peripheral process to finish
	while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8005ca4:	bf00      	nop
 8005ca6:	4816      	ldr	r0, [pc, #88]	; (8005d00 <send_telemetry+0x8c>)
 8005ca8:	f003 fb58 	bl	800935c <HAL_UART_GetState>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b20      	cmp	r3, #32
 8005cb0:	d1f9      	bne.n	8005ca6 <send_telemetry+0x32>

	// send that shit
	BSP_LED_On(LED2);
 8005cb2:	2001      	movs	r0, #1
 8005cb4:	f000 fbdc 	bl	8006470 <BSP_LED_On>
	if(HAL_UART_Transmit_DMA(&huart1, (uint8_t*) aTxBuffer, length+4) != HAL_OK) {
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	490d      	ldr	r1, [pc, #52]	; (8005cf8 <send_telemetry+0x84>)
 8005cc4:	480e      	ldr	r0, [pc, #56]	; (8005d00 <send_telemetry+0x8c>)
 8005cc6:	f002 ff57 	bl	8008b78 <HAL_UART_Transmit_DMA>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d004      	beq.n	8005cda <send_telemetry+0x66>
		errorType = 2;
 8005cd0:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <send_telemetry+0x90>)
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	601a      	str	r2, [r3, #0]
		Error_Handler(); /* Transfer error in transmission process */
 8005cd6:	f000 f9c3 	bl	8006060 <Error_Handler>
	}

	// Wait for current peripheral process to finish
	//while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
	while(UartReadyTX != SET);
 8005cda:	bf00      	nop
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <send_telemetry+0x94>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d1fa      	bne.n	8005cdc <send_telemetry+0x68>
	UartReadyTX = RESET;
 8005ce6:	4b08      	ldr	r3, [pc, #32]	; (8005d08 <send_telemetry+0x94>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	701a      	strb	r2, [r3, #0]
}
 8005cec:	bf00      	nop
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	20000214 	.word	0x20000214
 8005cf8:	200001e0 	.word	0x200001e0
 8005cfc:	20000000 	.word	0x20000000
 8005d00:	200000a8 	.word	0x200000a8
 8005d04:	20000008 	.word	0x20000008
 8005d08:	200000a5 	.word	0x200000a5

08005d0c <receive_commands>:

/* USART-RX: Receive any incoming commands */
void receive_commands() {
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
	//uint8_t receivedData[RXBUFFERSIZE]
	int numWaited = 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	60bb      	str	r3, [r7, #8]
	int offset = 0, nextOffset = 0;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	607b      	str	r3, [r7, #4]

	// Wait for current peripheral process to finish
	while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8005d1e:	bf00      	nop
 8005d20:	481f      	ldr	r0, [pc, #124]	; (8005da0 <receive_commands+0x94>)
 8005d22:	f003 fb1b 	bl	800935c <HAL_UART_GetState>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d1f9      	bne.n	8005d20 <receive_commands+0x14>

	BSP_LED_Off(LED3);
 8005d2c:	2002      	movs	r0, #2
 8005d2e:	f000 fbb9 	bl	80064a4 <BSP_LED_Off>
	if (HAL_UART_Receive_DMA(&huart1, (uint8_t *) aRxBuffer, RXBUFFERSIZE) != HAL_OK) {
 8005d32:	2210      	movs	r2, #16
 8005d34:	491b      	ldr	r1, [pc, #108]	; (8005da4 <receive_commands+0x98>)
 8005d36:	481a      	ldr	r0, [pc, #104]	; (8005da0 <receive_commands+0x94>)
 8005d38:	f002 ffae 	bl	8008c98 <HAL_UART_Receive_DMA>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <receive_commands+0x3e>
		errorType = 3;
 8005d42:	4b19      	ldr	r3, [pc, #100]	; (8005da8 <receive_commands+0x9c>)
 8005d44:	2203      	movs	r2, #3
 8005d46:	601a      	str	r2, [r3, #0]
		//HAL_UART_AbortReceive(&huart1);
		return;
 8005d48:	e027      	b.n	8005d9a <receive_commands+0x8e>
		//Error_Handler(); /* Transfer error in reception process */
	}

	while (UartReadyRX != SET);
 8005d4a:	bf00      	nop
 8005d4c:	4b17      	ldr	r3, [pc, #92]	; (8005dac <receive_commands+0xa0>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d1fa      	bne.n	8005d4c <receive_commands+0x40>
	UartReadyRX = RESET;
 8005d56:	4b15      	ldr	r3, [pc, #84]	; (8005dac <receive_commands+0xa0>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	701a      	strb	r2, [r3, #0]
	// Wait for current peripheral process to finish
	//while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY  && numWaited++ < 50000);
	//while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);


	if (strlen((char *) aRxBuffer) > 4) {
 8005d5c:	4811      	ldr	r0, [pc, #68]	; (8005da4 <receive_commands+0x98>)
 8005d5e:	f7fa fa47 	bl	80001f0 <strlen>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b04      	cmp	r3, #4
 8005d66:	d918      	bls.n	8005d9a <receive_commands+0x8e>
		while(((int) *(aRxBuffer + offset)) != 0x95) {
 8005d68:	e002      	b.n	8005d70 <receive_commands+0x64>
			++offset;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	60fb      	str	r3, [r7, #12]
		while(((int) *(aRxBuffer + offset)) != 0x95) {
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4a0c      	ldr	r2, [pc, #48]	; (8005da4 <receive_commands+0x98>)
 8005d74:	4413      	add	r3, r2
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2b95      	cmp	r3, #149	; 0x95
 8005d7a:	d1f6      	bne.n	8005d6a <receive_commands+0x5e>
		}
		strncpy(unpackBuffer, aRxBuffer+offset, 2+(NUMCOMMANDS*3));
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4a09      	ldr	r2, [pc, #36]	; (8005da4 <receive_commands+0x98>)
 8005d80:	4413      	add	r3, r2
 8005d82:	2211      	movs	r2, #17
 8005d84:	4619      	mov	r1, r3
 8005d86:	480a      	ldr	r0, [pc, #40]	; (8005db0 <receive_commands+0xa4>)
 8005d88:	f004 faae 	bl	800a2e8 <strncpy>
		*(unpackBuffer+2+(NUMCOMMANDS*3)) = 0;
 8005d8c:	4b08      	ldr	r3, [pc, #32]	; (8005db0 <receive_commands+0xa4>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	745a      	strb	r2, [r3, #17]
//		while(((int) *(aRxBuffer + nextOffset)) != 0x95) {
//			++nextOffset;
//		}
//		*(aRxBuffer + nextOffset) = 0;
//		unpack_commands(aRxBuffer+offset);
		unpack_commands();
 8005d92:	f7ff ff11 	bl	8005bb8 <unpack_commands>
		display_data_on_lcd();
 8005d96:	f000 f80d 	bl	8005db4 <display_data_on_lcd>
//			unpack_commands(aRxBuffer+offset);
//		} else {
//			HAL_UART_AbortReceive(&huart1);
//		}
//	}
}
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	200000a8 	.word	0x200000a8
 8005da4:	200001d0 	.word	0x200001d0
 8005da8:	20000008 	.word	0x20000008
 8005dac:	200000a4 	.word	0x200000a4
 8005db0:	20000200 	.word	0x20000200

08005db4 <display_data_on_lcd>:

void display_data_on_lcd() {
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
	char lcd_buf[5];

	// TODO - turn commands into string - newCommands
	LCD_Init();
 8005dba:	f7fa fd4d 	bl	8000858 <LCD_Init>
	LCD_Clear();
 8005dbe:	f7fa fd05 	bl	80007cc <LCD_Clear>

	LCD_Set_Cursor(1, 1);
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	2001      	movs	r0, #1
 8005dc6:	f7fa fd0e 	bl	80007e6 <LCD_Set_Cursor>
	LCD_Write_String("Gx: ");
 8005dca:	4828      	ldr	r0, [pc, #160]	; (8005e6c <display_data_on_lcd+0xb8>)
 8005dcc:	f7fa fe96 	bl	8000afc <LCD_Write_String>
	sprintf(lcd_buf, "%d", newCommands[0]);
 8005dd0:	4b27      	ldr	r3, [pc, #156]	; (8005e70 <display_data_on_lcd+0xbc>)
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	463b      	mov	r3, r7
 8005dd6:	4927      	ldr	r1, [pc, #156]	; (8005e74 <display_data_on_lcd+0xc0>)
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f004 fa65 	bl	800a2a8 <siprintf>
	LCD_Write_String(lcd_buf);
 8005dde:	463b      	mov	r3, r7
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fa fe8b 	bl	8000afc <LCD_Write_String>

	LCD_Set_Cursor(1, 10);
 8005de6:	210a      	movs	r1, #10
 8005de8:	2001      	movs	r0, #1
 8005dea:	f7fa fcfc 	bl	80007e6 <LCD_Set_Cursor>
	LCD_Write_String("Gy: ");
 8005dee:	4822      	ldr	r0, [pc, #136]	; (8005e78 <display_data_on_lcd+0xc4>)
 8005df0:	f7fa fe84 	bl	8000afc <LCD_Write_String>
	sprintf(lcd_buf, "%d", newCommands[1]);
 8005df4:	4b1e      	ldr	r3, [pc, #120]	; (8005e70 <display_data_on_lcd+0xbc>)
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	463b      	mov	r3, r7
 8005dfa:	491e      	ldr	r1, [pc, #120]	; (8005e74 <display_data_on_lcd+0xc0>)
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f004 fa53 	bl	800a2a8 <siprintf>
	LCD_Write_String(lcd_buf);
 8005e02:	463b      	mov	r3, r7
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fa fe79 	bl	8000afc <LCD_Write_String>

	LCD_Set_Cursor(2, 1);
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	2002      	movs	r0, #2
 8005e0e:	f7fa fcea 	bl	80007e6 <LCD_Set_Cursor>
	sprintf(lcd_buf, "%d", newCommands[2]);
 8005e12:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <display_data_on_lcd+0xbc>)
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	463b      	mov	r3, r7
 8005e18:	4916      	ldr	r1, [pc, #88]	; (8005e74 <display_data_on_lcd+0xc0>)
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f004 fa44 	bl	800a2a8 <siprintf>
	LCD_Write_String(lcd_buf);
 8005e20:	463b      	mov	r3, r7
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fa fe6a 	bl	8000afc <LCD_Write_String>
	LCD_Set_Cursor(2, 7);
 8005e28:	2107      	movs	r1, #7
 8005e2a:	2002      	movs	r0, #2
 8005e2c:	f7fa fcdb 	bl	80007e6 <LCD_Set_Cursor>
	//LCD_Write_String(" ");
	sprintf(lcd_buf, "%d", newCommands[3]);
 8005e30:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <display_data_on_lcd+0xbc>)
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	463b      	mov	r3, r7
 8005e36:	490f      	ldr	r1, [pc, #60]	; (8005e74 <display_data_on_lcd+0xc0>)
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f004 fa35 	bl	800a2a8 <siprintf>
	LCD_Write_String(lcd_buf);
 8005e3e:	463b      	mov	r3, r7
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fa fe5b 	bl	8000afc <LCD_Write_String>
	LCD_Set_Cursor(2, 13);
 8005e46:	210d      	movs	r1, #13
 8005e48:	2002      	movs	r0, #2
 8005e4a:	f7fa fccc 	bl	80007e6 <LCD_Set_Cursor>
	//LCD_Write_String(" ");
	sprintf(lcd_buf, "%d", newCommands[4]);
 8005e4e:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <display_data_on_lcd+0xbc>)
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	463b      	mov	r3, r7
 8005e54:	4907      	ldr	r1, [pc, #28]	; (8005e74 <display_data_on_lcd+0xc0>)
 8005e56:	4618      	mov	r0, r3
 8005e58:	f004 fa26 	bl	800a2a8 <siprintf>
	LCD_Write_String(lcd_buf);
 8005e5c:	463b      	mov	r3, r7
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fa fe4c 	bl	8000afc <LCD_Write_String>
}
 8005e64:	bf00      	nop
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	0800abc8 	.word	0x0800abc8
 8005e70:	200001bc 	.word	0x200001bc
 8005e74:	0800abd0 	.word	0x0800abd0
 8005e78:	0800abd4 	.word	0x0800abd4

08005e7c <do_something_with_commands>:

void do_something_with_commands(int * commands) {
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
	// for @codydeyarmin to implement for drone control
	// for @VRteam and @Akiva to implement for gimble control
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b096      	sub	sp, #88	; 0x58
 8005e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e96:	f107 0314 	add.w	r3, r7, #20
 8005e9a:	2244      	movs	r2, #68	; 0x44
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f004 f9fa 	bl	800a298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ea4:	463b      	mov	r3, r7
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	605a      	str	r2, [r3, #4]
 8005eac:	609a      	str	r2, [r3, #8]
 8005eae:	60da      	str	r2, [r3, #12]
 8005eb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8005eb2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005eb6:	f001 fa79 	bl	80073ac <HAL_PWREx_ControlVoltageScaling>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <SystemClock_Config+0x34>
    Error_Handler();
 8005ec0:	f000 f8ce 	bl	8006060 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005ed0:	2360      	movs	r3, #96	; 0x60
 8005ed2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005ed8:	f107 0314 	add.w	r3, r7, #20
 8005edc:	4618      	mov	r0, r3
 8005ede:	f001 fabb 	bl	8007458 <HAL_RCC_OscConfig>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <SystemClock_Config+0x5c>
    Error_Handler();
 8005ee8:	f000 f8ba 	bl	8006060 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005eec:	230f      	movs	r3, #15
 8005eee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005efc:	2300      	movs	r3, #0
 8005efe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8005f00:	463b      	mov	r3, r7
 8005f02:	2100      	movs	r1, #0
 8005f04:	4618      	mov	r0, r3
 8005f06:	f001 fec1 	bl	8007c8c <HAL_RCC_ClockConfig>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <SystemClock_Config+0x84>
    Error_Handler();
 8005f10:	f000 f8a6 	bl	8006060 <Error_Handler>
  }
}
 8005f14:	bf00      	nop
 8005f16:	3758      	adds	r7, #88	; 0x58
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_UART_TxCpltCallback>:
  * @param  UartHandle: UART handle.
  * @note   This example shows a simple way to report end of DMA Tx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete*/
  UartReadyTX = SET;
 8005f24:	4b04      	ldr	r3, [pc, #16]	; (8005f38 <HAL_UART_TxCpltCallback+0x1c>)
 8005f26:	2201      	movs	r2, #1
 8005f28:	701a      	strb	r2, [r3, #0]
  /* Turn LED1 on: Transfer in transmission process is correct */
  BSP_LED_On(LED2);
 8005f2a:	2001      	movs	r0, #1
 8005f2c:	f000 faa0 	bl	8006470 <BSP_LED_On>
}
 8005f30:	bf00      	nop
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	200000a5 	.word	0x200000a5

08005f3c <HAL_UART_RxCpltCallback>:
  * @param  UartHandle: UART handle
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete*/
  UartReadyRX = SET;
 8005f44:	4b04      	ldr	r3, [pc, #16]	; (8005f58 <HAL_UART_RxCpltCallback+0x1c>)
 8005f46:	2201      	movs	r2, #1
 8005f48:	701a      	strb	r2, [r3, #0]

  /* Turn LED1 on: Transfer in reception process is correct */
  BSP_LED_On(LED3);
 8005f4a:	2002      	movs	r0, #2
 8005f4c:	f000 fa90 	bl	8006470 <BSP_LED_On>
}
 8005f50:	bf00      	nop
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	200000a4 	.word	0x200000a4

08005f5c <MX_USART1_UART_Init>:
/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void) {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8005f60:	4b17      	ldr	r3, [pc, #92]	; (8005fc0 <MX_USART1_UART_Init+0x64>)
 8005f62:	4a18      	ldr	r2, [pc, #96]	; (8005fc4 <MX_USART1_UART_Init+0x68>)
 8005f64:	601a      	str	r2, [r3, #0]
  //huart1.Init.BaudRate = 38400;
  huart1.Init.BaudRate = 74880;
 8005f66:	4b16      	ldr	r3, [pc, #88]	; (8005fc0 <MX_USART1_UART_Init+0x64>)
 8005f68:	4a17      	ldr	r2, [pc, #92]	; (8005fc8 <MX_USART1_UART_Init+0x6c>)
 8005f6a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f6c:	4b14      	ldr	r3, [pc, #80]	; (8005fc0 <MX_USART1_UART_Init+0x64>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005f72:	4b13      	ldr	r3, [pc, #76]	; (8005fc0 <MX_USART1_UART_Init+0x64>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	60da      	str	r2, [r3, #12]
  //huart1.Init.Parity = UART_PARITY_ODD;
  huart1.Init.Parity = UART_PARITY_NONE;
 8005f78:	4b11      	ldr	r3, [pc, #68]	; (8005fc0 <MX_USART1_UART_Init+0x64>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005f7e:	4b10      	ldr	r3, [pc, #64]	; (8005fc0 <MX_USART1_UART_Init+0x64>)
 8005f80:	220c      	movs	r2, #12
 8005f82:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f84:	4b0e      	ldr	r3, [pc, #56]	; (8005fc0 <MX_USART1_UART_Init+0x64>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f8a:	4b0d      	ldr	r3, [pc, #52]	; (8005fc0 <MX_USART1_UART_Init+0x64>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f90:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <MX_USART1_UART_Init+0x64>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f96:	4b0a      	ldr	r3, [pc, #40]	; (8005fc0 <MX_USART1_UART_Init+0x64>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_DeInit(&huart1) != HAL_OK) {
 8005f9c:	4808      	ldr	r0, [pc, #32]	; (8005fc0 <MX_USART1_UART_Init+0x64>)
 8005f9e:	f002 fdb1 	bl	8008b04 <HAL_UART_DeInit>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <MX_USART1_UART_Init+0x50>
	  Error_Handler();
 8005fa8:	f000 f85a 	bl	8006060 <Error_Handler>
  }
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 8005fac:	4804      	ldr	r0, [pc, #16]	; (8005fc0 <MX_USART1_UART_Init+0x64>)
 8005fae:	f002 fd5b 	bl	8008a68 <HAL_UART_Init>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <MX_USART1_UART_Init+0x60>
	  Error_Handler();
 8005fb8:	f000 f852 	bl	8006060 <Error_Handler>
  }
}
 8005fbc:	bf00      	nop
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	200000a8 	.word	0x200000a8
 8005fc4:	40013800 	.word	0x40013800
 8005fc8:	00012480 	.word	0x00012480

08005fcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) {
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005fd2:	4b10      	ldr	r3, [pc, #64]	; (8006014 <MX_DMA_Init+0x48>)
 8005fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd6:	4a0f      	ldr	r2, [pc, #60]	; (8006014 <MX_DMA_Init+0x48>)
 8005fd8:	f043 0301 	orr.w	r3, r3, #1
 8005fdc:	6493      	str	r3, [r2, #72]	; 0x48
 8005fde:	4b0d      	ldr	r3, [pc, #52]	; (8006014 <MX_DMA_Init+0x48>)
 8005fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	607b      	str	r3, [r7, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8005fea:	2200      	movs	r2, #0
 8005fec:	2100      	movs	r1, #0
 8005fee:	200e      	movs	r0, #14
 8005ff0:	f000 fbe5 	bl	80067be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8005ff4:	200e      	movs	r0, #14
 8005ff6:	f000 fbfe 	bl	80067f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	200f      	movs	r0, #15
 8006000:	f000 fbdd 	bl	80067be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8006004:	200f      	movs	r0, #15
 8006006:	f000 fbf6 	bl	80067f6 <HAL_NVIC_EnableIRQ>
}
 800600a:	bf00      	nop
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	40021000 	.word	0x40021000

08006018 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800601e:	4b0f      	ldr	r3, [pc, #60]	; (800605c <MX_GPIO_Init+0x44>)
 8006020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006022:	4a0e      	ldr	r2, [pc, #56]	; (800605c <MX_GPIO_Init+0x44>)
 8006024:	f043 0304 	orr.w	r3, r3, #4
 8006028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800602a:	4b0c      	ldr	r3, [pc, #48]	; (800605c <MX_GPIO_Init+0x44>)
 800602c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800602e:	f003 0304 	and.w	r3, r3, #4
 8006032:	607b      	str	r3, [r7, #4]
 8006034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006036:	4b09      	ldr	r3, [pc, #36]	; (800605c <MX_GPIO_Init+0x44>)
 8006038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800603a:	4a08      	ldr	r2, [pc, #32]	; (800605c <MX_GPIO_Init+0x44>)
 800603c:	f043 0301 	orr.w	r3, r3, #1
 8006040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006042:	4b06      	ldr	r3, [pc, #24]	; (800605c <MX_GPIO_Init+0x44>)
 8006044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	683b      	ldr	r3, [r7, #0]

}
 800604e:	bf00      	nop
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	40021000 	.word	0x40021000

08006060 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void){
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006064:	b672      	cpsid	i
}
 8006066:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1);
 8006068:	e7fe      	b.n	8006068 <Error_Handler+0x8>
	...

0800606c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006072:	4b0f      	ldr	r3, [pc, #60]	; (80060b0 <HAL_MspInit+0x44>)
 8006074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006076:	4a0e      	ldr	r2, [pc, #56]	; (80060b0 <HAL_MspInit+0x44>)
 8006078:	f043 0301 	orr.w	r3, r3, #1
 800607c:	6613      	str	r3, [r2, #96]	; 0x60
 800607e:	4b0c      	ldr	r3, [pc, #48]	; (80060b0 <HAL_MspInit+0x44>)
 8006080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	607b      	str	r3, [r7, #4]
 8006088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800608a:	4b09      	ldr	r3, [pc, #36]	; (80060b0 <HAL_MspInit+0x44>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608e:	4a08      	ldr	r2, [pc, #32]	; (80060b0 <HAL_MspInit+0x44>)
 8006090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006094:	6593      	str	r3, [r2, #88]	; 0x58
 8006096:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <HAL_MspInit+0x44>)
 8006098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609e:	603b      	str	r3, [r7, #0]
 80060a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80060a2:	bf00      	nop
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40021000 	.word	0x40021000

080060b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b0ac      	sub	sp, #176	; 0xb0
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80060c0:	2200      	movs	r2, #0
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	605a      	str	r2, [r3, #4]
 80060c6:	609a      	str	r2, [r3, #8]
 80060c8:	60da      	str	r2, [r3, #12]
 80060ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80060cc:	f107 0310 	add.w	r3, r7, #16
 80060d0:	228c      	movs	r2, #140	; 0x8c
 80060d2:	2100      	movs	r1, #0
 80060d4:	4618      	mov	r0, r3
 80060d6:	f004 f8df 	bl	800a298 <memset>
  if(huart->Instance==USART1)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a5b      	ldr	r2, [pc, #364]	; (800624c <HAL_UART_MspInit+0x198>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	f040 80af 	bne.w	8006244 <HAL_UART_MspInit+0x190>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80060e6:	2301      	movs	r3, #1
 80060e8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80060ea:	2300      	movs	r3, #0
 80060ec:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80060ee:	f107 0310 	add.w	r3, r7, #16
 80060f2:	4618      	mov	r0, r3
 80060f4:	f001 ffee 	bl	80080d4 <HAL_RCCEx_PeriphCLKConfig>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80060fe:	f7ff ffaf 	bl	8006060 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006102:	4b53      	ldr	r3, [pc, #332]	; (8006250 <HAL_UART_MspInit+0x19c>)
 8006104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006106:	4a52      	ldr	r2, [pc, #328]	; (8006250 <HAL_UART_MspInit+0x19c>)
 8006108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800610c:	6613      	str	r3, [r2, #96]	; 0x60
 800610e:	4b50      	ldr	r3, [pc, #320]	; (8006250 <HAL_UART_MspInit+0x19c>)
 8006110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800611a:	4b4d      	ldr	r3, [pc, #308]	; (8006250 <HAL_UART_MspInit+0x19c>)
 800611c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800611e:	4a4c      	ldr	r2, [pc, #304]	; (8006250 <HAL_UART_MspInit+0x19c>)
 8006120:	f043 0301 	orr.w	r3, r3, #1
 8006124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006126:	4b4a      	ldr	r3, [pc, #296]	; (8006250 <HAL_UART_MspInit+0x19c>)
 8006128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	60bb      	str	r3, [r7, #8]
 8006130:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006132:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006136:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800613a:	2302      	movs	r3, #2
 800613c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006140:	2301      	movs	r3, #1
 8006142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006146:	2303      	movs	r3, #3
 8006148:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800614c:	2307      	movs	r3, #7
 800614e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006152:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006156:	4619      	mov	r1, r3
 8006158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800615c:	f000 fe7c 	bl	8006e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006164:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006168:	2302      	movs	r3, #2
 800616a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800616e:	2300      	movs	r3, #0
 8006170:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006174:	2303      	movs	r3, #3
 8006176:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800617a:	2307      	movs	r3, #7
 800617c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006180:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006184:	4619      	mov	r1, r3
 8006186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800618a:	f000 fe65 	bl	8006e58 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800618e:	4b31      	ldr	r3, [pc, #196]	; (8006254 <HAL_UART_MspInit+0x1a0>)
 8006190:	4a31      	ldr	r2, [pc, #196]	; (8006258 <HAL_UART_MspInit+0x1a4>)
 8006192:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8006194:	4b2f      	ldr	r3, [pc, #188]	; (8006254 <HAL_UART_MspInit+0x1a0>)
 8006196:	2202      	movs	r2, #2
 8006198:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800619a:	4b2e      	ldr	r3, [pc, #184]	; (8006254 <HAL_UART_MspInit+0x1a0>)
 800619c:	2200      	movs	r2, #0
 800619e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061a0:	4b2c      	ldr	r3, [pc, #176]	; (8006254 <HAL_UART_MspInit+0x1a0>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80061a6:	4b2b      	ldr	r3, [pc, #172]	; (8006254 <HAL_UART_MspInit+0x1a0>)
 80061a8:	2280      	movs	r2, #128	; 0x80
 80061aa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061ac:	4b29      	ldr	r3, [pc, #164]	; (8006254 <HAL_UART_MspInit+0x1a0>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061b2:	4b28      	ldr	r3, [pc, #160]	; (8006254 <HAL_UART_MspInit+0x1a0>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80061b8:	4b26      	ldr	r3, [pc, #152]	; (8006254 <HAL_UART_MspInit+0x1a0>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80061be:	4b25      	ldr	r3, [pc, #148]	; (8006254 <HAL_UART_MspInit+0x1a0>)
 80061c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80061c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80061c6:	4823      	ldr	r0, [pc, #140]	; (8006254 <HAL_UART_MspInit+0x1a0>)
 80061c8:	f000 fb3e 	bl	8006848 <HAL_DMA_Init>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 80061d2:	f7ff ff45 	bl	8006060 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a1e      	ldr	r2, [pc, #120]	; (8006254 <HAL_UART_MspInit+0x1a0>)
 80061da:	671a      	str	r2, [r3, #112]	; 0x70
 80061dc:	4a1d      	ldr	r2, [pc, #116]	; (8006254 <HAL_UART_MspInit+0x1a0>)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80061e2:	4b1e      	ldr	r3, [pc, #120]	; (800625c <HAL_UART_MspInit+0x1a8>)
 80061e4:	4a1e      	ldr	r2, [pc, #120]	; (8006260 <HAL_UART_MspInit+0x1ac>)
 80061e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80061e8:	4b1c      	ldr	r3, [pc, #112]	; (800625c <HAL_UART_MspInit+0x1a8>)
 80061ea:	2202      	movs	r2, #2
 80061ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061ee:	4b1b      	ldr	r3, [pc, #108]	; (800625c <HAL_UART_MspInit+0x1a8>)
 80061f0:	2210      	movs	r2, #16
 80061f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061f4:	4b19      	ldr	r3, [pc, #100]	; (800625c <HAL_UART_MspInit+0x1a8>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80061fa:	4b18      	ldr	r3, [pc, #96]	; (800625c <HAL_UART_MspInit+0x1a8>)
 80061fc:	2280      	movs	r2, #128	; 0x80
 80061fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006200:	4b16      	ldr	r3, [pc, #88]	; (800625c <HAL_UART_MspInit+0x1a8>)
 8006202:	2200      	movs	r2, #0
 8006204:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006206:	4b15      	ldr	r3, [pc, #84]	; (800625c <HAL_UART_MspInit+0x1a8>)
 8006208:	2200      	movs	r2, #0
 800620a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800620c:	4b13      	ldr	r3, [pc, #76]	; (800625c <HAL_UART_MspInit+0x1a8>)
 800620e:	2200      	movs	r2, #0
 8006210:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006212:	4b12      	ldr	r3, [pc, #72]	; (800625c <HAL_UART_MspInit+0x1a8>)
 8006214:	2200      	movs	r2, #0
 8006216:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006218:	4810      	ldr	r0, [pc, #64]	; (800625c <HAL_UART_MspInit+0x1a8>)
 800621a:	f000 fb15 	bl	8006848 <HAL_DMA_Init>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <HAL_UART_MspInit+0x174>
    {
      Error_Handler();
 8006224:	f7ff ff1c 	bl	8006060 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a0c      	ldr	r2, [pc, #48]	; (800625c <HAL_UART_MspInit+0x1a8>)
 800622c:	66da      	str	r2, [r3, #108]	; 0x6c
 800622e:	4a0b      	ldr	r2, [pc, #44]	; (800625c <HAL_UART_MspInit+0x1a8>)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006234:	2200      	movs	r2, #0
 8006236:	2100      	movs	r1, #0
 8006238:	2025      	movs	r0, #37	; 0x25
 800623a:	f000 fac0 	bl	80067be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800623e:	2025      	movs	r0, #37	; 0x25
 8006240:	f000 fad9 	bl	80067f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006244:	bf00      	nop
 8006246:	37b0      	adds	r7, #176	; 0xb0
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	40013800 	.word	0x40013800
 8006250:	40021000 	.word	0x40021000
 8006254:	2000012c 	.word	0x2000012c
 8006258:	40020058 	.word	0x40020058
 800625c:	20000174 	.word	0x20000174
 8006260:	40020044 	.word	0x40020044

08006264 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a0f      	ldr	r2, [pc, #60]	; (80062b0 <HAL_UART_MspDeInit+0x4c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d118      	bne.n	80062a8 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8006276:	4b0f      	ldr	r3, [pc, #60]	; (80062b4 <HAL_UART_MspDeInit+0x50>)
 8006278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800627a:	4a0e      	ldr	r2, [pc, #56]	; (80062b4 <HAL_UART_MspDeInit+0x50>)
 800627c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006280:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8006282:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800628a:	f000 ff77 	bl	800717c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006292:	4618      	mov	r0, r3
 8006294:	f000 fb90 	bl	80069b8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fb8b 	bl	80069b8 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80062a2:	2025      	movs	r0, #37	; 0x25
 80062a4:	f000 fab5 	bl	8006812 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 80062a8:	bf00      	nop
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	40013800 	.word	0x40013800
 80062b4:	40021000 	.word	0x40021000

080062b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80062bc:	e7fe      	b.n	80062bc <NMI_Handler+0x4>

080062be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062be:	b480      	push	{r7}
 80062c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80062c2:	e7fe      	b.n	80062c2 <HardFault_Handler+0x4>

080062c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80062c8:	e7fe      	b.n	80062c8 <MemManage_Handler+0x4>

080062ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80062ca:	b480      	push	{r7}
 80062cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80062ce:	e7fe      	b.n	80062ce <BusFault_Handler+0x4>

080062d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80062d4:	e7fe      	b.n	80062d4 <UsageFault_Handler+0x4>

080062d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80062d6:	b480      	push	{r7}
 80062d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80062da:	bf00      	nop
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80062e8:	bf00      	nop
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80062f2:	b480      	push	{r7}
 80062f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80062f6:	bf00      	nop
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006304:	f000 f93c 	bl	8006580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006308:	bf00      	nop
 800630a:	bd80      	pop	{r7, pc}

0800630c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006310:	4802      	ldr	r0, [pc, #8]	; (800631c <DMA1_Channel4_IRQHandler+0x10>)
 8006312:	f000 fcc2 	bl	8006c9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006316:	bf00      	nop
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	20000174 	.word	0x20000174

08006320 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006324:	4802      	ldr	r0, [pc, #8]	; (8006330 <DMA1_Channel5_IRQHandler+0x10>)
 8006326:	f000 fcb8 	bl	8006c9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800632a:	bf00      	nop
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	2000012c 	.word	0x2000012c

08006334 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006338:	4802      	ldr	r0, [pc, #8]	; (8006344 <USART1_IRQHandler+0x10>)
 800633a:	f002 fd03 	bl	8008d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800633e:	bf00      	nop
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	200000a8 	.word	0x200000a8

08006348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006350:	4a14      	ldr	r2, [pc, #80]	; (80063a4 <_sbrk+0x5c>)
 8006352:	4b15      	ldr	r3, [pc, #84]	; (80063a8 <_sbrk+0x60>)
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800635c:	4b13      	ldr	r3, [pc, #76]	; (80063ac <_sbrk+0x64>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d102      	bne.n	800636a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006364:	4b11      	ldr	r3, [pc, #68]	; (80063ac <_sbrk+0x64>)
 8006366:	4a12      	ldr	r2, [pc, #72]	; (80063b0 <_sbrk+0x68>)
 8006368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800636a:	4b10      	ldr	r3, [pc, #64]	; (80063ac <_sbrk+0x64>)
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4413      	add	r3, r2
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	429a      	cmp	r2, r3
 8006376:	d207      	bcs.n	8006388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006378:	f003 ff56 	bl	800a228 <__errno>
 800637c:	4603      	mov	r3, r0
 800637e:	220c      	movs	r2, #12
 8006380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006382:	f04f 33ff 	mov.w	r3, #4294967295
 8006386:	e009      	b.n	800639c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006388:	4b08      	ldr	r3, [pc, #32]	; (80063ac <_sbrk+0x64>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800638e:	4b07      	ldr	r3, [pc, #28]	; (80063ac <_sbrk+0x64>)
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4413      	add	r3, r2
 8006396:	4a05      	ldr	r2, [pc, #20]	; (80063ac <_sbrk+0x64>)
 8006398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800639a:	68fb      	ldr	r3, [r7, #12]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	20050000 	.word	0x20050000
 80063a8:	00000400 	.word	0x00000400
 80063ac:	20000268 	.word	0x20000268
 80063b0:	20000280 	.word	0x20000280

080063b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80063b8:	4b06      	ldr	r3, [pc, #24]	; (80063d4 <SystemInit+0x20>)
 80063ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063be:	4a05      	ldr	r2, [pc, #20]	; (80063d4 <SystemInit+0x20>)
 80063c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80063c8:	bf00      	nop
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	e000ed00 	.word	0xe000ed00

080063d8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08a      	sub	sp, #40	; 0x28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	4603      	mov	r3, r0
 80063e0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80063e2:	79fb      	ldrb	r3, [r7, #7]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10c      	bne.n	8006402 <BSP_LED_Init+0x2a>
 80063e8:	4b1e      	ldr	r3, [pc, #120]	; (8006464 <BSP_LED_Init+0x8c>)
 80063ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ec:	4a1d      	ldr	r2, [pc, #116]	; (8006464 <BSP_LED_Init+0x8c>)
 80063ee:	f043 0304 	orr.w	r3, r3, #4
 80063f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063f4:	4b1b      	ldr	r3, [pc, #108]	; (8006464 <BSP_LED_Init+0x8c>)
 80063f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f8:	f003 0304 	and.w	r3, r3, #4
 80063fc:	613b      	str	r3, [r7, #16]
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	e00b      	b.n	800641a <BSP_LED_Init+0x42>
 8006402:	4b18      	ldr	r3, [pc, #96]	; (8006464 <BSP_LED_Init+0x8c>)
 8006404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006406:	4a17      	ldr	r2, [pc, #92]	; (8006464 <BSP_LED_Init+0x8c>)
 8006408:	f043 0302 	orr.w	r3, r3, #2
 800640c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800640e:	4b15      	ldr	r3, [pc, #84]	; (8006464 <BSP_LED_Init+0x8c>)
 8006410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800641a:	79fb      	ldrb	r3, [r7, #7]
 800641c:	4a12      	ldr	r2, [pc, #72]	; (8006468 <BSP_LED_Init+0x90>)
 800641e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006424:	2301      	movs	r3, #1
 8006426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006428:	2300      	movs	r3, #0
 800642a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800642c:	2302      	movs	r3, #2
 800642e:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8006430:	79fb      	ldrb	r3, [r7, #7]
 8006432:	4a0e      	ldr	r2, [pc, #56]	; (800646c <BSP_LED_Init+0x94>)
 8006434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006438:	f107 0214 	add.w	r2, r7, #20
 800643c:	4611      	mov	r1, r2
 800643e:	4618      	mov	r0, r3
 8006440:	f000 fd0a 	bl	8006e58 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8006444:	79fb      	ldrb	r3, [r7, #7]
 8006446:	4a09      	ldr	r2, [pc, #36]	; (800646c <BSP_LED_Init+0x94>)
 8006448:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	4a06      	ldr	r2, [pc, #24]	; (8006468 <BSP_LED_Init+0x90>)
 8006450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006454:	2200      	movs	r2, #0
 8006456:	4619      	mov	r1, r3
 8006458:	f000 ff82 	bl	8007360 <HAL_GPIO_WritePin>
}
 800645c:	bf00      	nop
 800645e:	3728      	adds	r7, #40	; 0x28
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	40021000 	.word	0x40021000
 8006468:	0800ac38 	.word	0x0800ac38
 800646c:	20000010 	.word	0x20000010

08006470 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	4603      	mov	r3, r0
 8006478:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800647a:	79fb      	ldrb	r3, [r7, #7]
 800647c:	4a07      	ldr	r2, [pc, #28]	; (800649c <BSP_LED_On+0x2c>)
 800647e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006482:	79fb      	ldrb	r3, [r7, #7]
 8006484:	4a06      	ldr	r2, [pc, #24]	; (80064a0 <BSP_LED_On+0x30>)
 8006486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800648a:	2201      	movs	r2, #1
 800648c:	4619      	mov	r1, r3
 800648e:	f000 ff67 	bl	8007360 <HAL_GPIO_WritePin>
}
 8006492:	bf00      	nop
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	20000010 	.word	0x20000010
 80064a0:	0800ac38 	.word	0x0800ac38

080064a4 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	4603      	mov	r3, r0
 80064ac:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80064ae:	79fb      	ldrb	r3, [r7, #7]
 80064b0:	4a07      	ldr	r2, [pc, #28]	; (80064d0 <BSP_LED_Off+0x2c>)
 80064b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80064b6:	79fb      	ldrb	r3, [r7, #7]
 80064b8:	4a06      	ldr	r2, [pc, #24]	; (80064d4 <BSP_LED_Off+0x30>)
 80064ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064be:	2200      	movs	r2, #0
 80064c0:	4619      	mov	r1, r3
 80064c2:	f000 ff4d 	bl	8007360 <HAL_GPIO_WritePin>
}
 80064c6:	bf00      	nop
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	20000010 	.word	0x20000010
 80064d4:	0800ac38 	.word	0x0800ac38

080064d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064e2:	2003      	movs	r0, #3
 80064e4:	f000 f960 	bl	80067a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80064e8:	200f      	movs	r0, #15
 80064ea:	f000 f80d 	bl	8006508 <HAL_InitTick>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	71fb      	strb	r3, [r7, #7]
 80064f8:	e001      	b.n	80064fe <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80064fa:	f7ff fdb7 	bl	800606c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80064fe:	79fb      	ldrb	r3, [r7, #7]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006514:	4b17      	ldr	r3, [pc, #92]	; (8006574 <HAL_InitTick+0x6c>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d023      	beq.n	8006564 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800651c:	4b16      	ldr	r3, [pc, #88]	; (8006578 <HAL_InitTick+0x70>)
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	4b14      	ldr	r3, [pc, #80]	; (8006574 <HAL_InitTick+0x6c>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	4619      	mov	r1, r3
 8006526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800652a:	fbb3 f3f1 	udiv	r3, r3, r1
 800652e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006532:	4618      	mov	r0, r3
 8006534:	f000 f97b 	bl	800682e <HAL_SYSTICK_Config>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10f      	bne.n	800655e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b0f      	cmp	r3, #15
 8006542:	d809      	bhi.n	8006558 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006544:	2200      	movs	r2, #0
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	f04f 30ff 	mov.w	r0, #4294967295
 800654c:	f000 f937 	bl	80067be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006550:	4a0a      	ldr	r2, [pc, #40]	; (800657c <HAL_InitTick+0x74>)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	e007      	b.n	8006568 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	73fb      	strb	r3, [r7, #15]
 800655c:	e004      	b.n	8006568 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	73fb      	strb	r3, [r7, #15]
 8006562:	e001      	b.n	8006568 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006568:	7bfb      	ldrb	r3, [r7, #15]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20000020 	.word	0x20000020
 8006578:	2000000c 	.word	0x2000000c
 800657c:	2000001c 	.word	0x2000001c

08006580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006580:	b480      	push	{r7}
 8006582:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006584:	4b06      	ldr	r3, [pc, #24]	; (80065a0 <HAL_IncTick+0x20>)
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	461a      	mov	r2, r3
 800658a:	4b06      	ldr	r3, [pc, #24]	; (80065a4 <HAL_IncTick+0x24>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4413      	add	r3, r2
 8006590:	4a04      	ldr	r2, [pc, #16]	; (80065a4 <HAL_IncTick+0x24>)
 8006592:	6013      	str	r3, [r2, #0]
}
 8006594:	bf00      	nop
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	20000020 	.word	0x20000020
 80065a4:	2000026c 	.word	0x2000026c

080065a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065a8:	b480      	push	{r7}
 80065aa:	af00      	add	r7, sp, #0
  return uwTick;
 80065ac:	4b03      	ldr	r3, [pc, #12]	; (80065bc <HAL_GetTick+0x14>)
 80065ae:	681b      	ldr	r3, [r3, #0]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	2000026c 	.word	0x2000026c

080065c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f003 0307 	and.w	r3, r3, #7
 80065ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065d0:	4b0c      	ldr	r3, [pc, #48]	; (8006604 <__NVIC_SetPriorityGrouping+0x44>)
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80065dc:	4013      	ands	r3, r2
 80065de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80065e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80065ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065f2:	4a04      	ldr	r2, [pc, #16]	; (8006604 <__NVIC_SetPriorityGrouping+0x44>)
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	60d3      	str	r3, [r2, #12]
}
 80065f8:	bf00      	nop
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	e000ed00 	.word	0xe000ed00

08006608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006608:	b480      	push	{r7}
 800660a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800660c:	4b04      	ldr	r3, [pc, #16]	; (8006620 <__NVIC_GetPriorityGrouping+0x18>)
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	0a1b      	lsrs	r3, r3, #8
 8006612:	f003 0307 	and.w	r3, r3, #7
}
 8006616:	4618      	mov	r0, r3
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	e000ed00 	.word	0xe000ed00

08006624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	4603      	mov	r3, r0
 800662c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800662e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006632:	2b00      	cmp	r3, #0
 8006634:	db0b      	blt.n	800664e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006636:	79fb      	ldrb	r3, [r7, #7]
 8006638:	f003 021f 	and.w	r2, r3, #31
 800663c:	4907      	ldr	r1, [pc, #28]	; (800665c <__NVIC_EnableIRQ+0x38>)
 800663e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	2001      	movs	r0, #1
 8006646:	fa00 f202 	lsl.w	r2, r0, r2
 800664a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800664e:	bf00      	nop
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	e000e100 	.word	0xe000e100

08006660 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	4603      	mov	r3, r0
 8006668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800666a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800666e:	2b00      	cmp	r3, #0
 8006670:	db12      	blt.n	8006698 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006672:	79fb      	ldrb	r3, [r7, #7]
 8006674:	f003 021f 	and.w	r2, r3, #31
 8006678:	490a      	ldr	r1, [pc, #40]	; (80066a4 <__NVIC_DisableIRQ+0x44>)
 800667a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800667e:	095b      	lsrs	r3, r3, #5
 8006680:	2001      	movs	r0, #1
 8006682:	fa00 f202 	lsl.w	r2, r0, r2
 8006686:	3320      	adds	r3, #32
 8006688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800668c:	f3bf 8f4f 	dsb	sy
}
 8006690:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006692:	f3bf 8f6f 	isb	sy
}
 8006696:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	e000e100 	.word	0xe000e100

080066a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	4603      	mov	r3, r0
 80066b0:	6039      	str	r1, [r7, #0]
 80066b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	db0a      	blt.n	80066d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	490c      	ldr	r1, [pc, #48]	; (80066f4 <__NVIC_SetPriority+0x4c>)
 80066c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c6:	0112      	lsls	r2, r2, #4
 80066c8:	b2d2      	uxtb	r2, r2
 80066ca:	440b      	add	r3, r1
 80066cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066d0:	e00a      	b.n	80066e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	4908      	ldr	r1, [pc, #32]	; (80066f8 <__NVIC_SetPriority+0x50>)
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	f003 030f 	and.w	r3, r3, #15
 80066de:	3b04      	subs	r3, #4
 80066e0:	0112      	lsls	r2, r2, #4
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	440b      	add	r3, r1
 80066e6:	761a      	strb	r2, [r3, #24]
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	e000e100 	.word	0xe000e100
 80066f8:	e000ed00 	.word	0xe000ed00

080066fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b089      	sub	sp, #36	; 0x24
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f003 0307 	and.w	r3, r3, #7
 800670e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	f1c3 0307 	rsb	r3, r3, #7
 8006716:	2b04      	cmp	r3, #4
 8006718:	bf28      	it	cs
 800671a:	2304      	movcs	r3, #4
 800671c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	3304      	adds	r3, #4
 8006722:	2b06      	cmp	r3, #6
 8006724:	d902      	bls.n	800672c <NVIC_EncodePriority+0x30>
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	3b03      	subs	r3, #3
 800672a:	e000      	b.n	800672e <NVIC_EncodePriority+0x32>
 800672c:	2300      	movs	r3, #0
 800672e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006730:	f04f 32ff 	mov.w	r2, #4294967295
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	fa02 f303 	lsl.w	r3, r2, r3
 800673a:	43da      	mvns	r2, r3
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	401a      	ands	r2, r3
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006744:	f04f 31ff 	mov.w	r1, #4294967295
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	fa01 f303 	lsl.w	r3, r1, r3
 800674e:	43d9      	mvns	r1, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006754:	4313      	orrs	r3, r2
         );
}
 8006756:	4618      	mov	r0, r3
 8006758:	3724      	adds	r7, #36	; 0x24
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
	...

08006764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3b01      	subs	r3, #1
 8006770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006774:	d301      	bcc.n	800677a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006776:	2301      	movs	r3, #1
 8006778:	e00f      	b.n	800679a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800677a:	4a0a      	ldr	r2, [pc, #40]	; (80067a4 <SysTick_Config+0x40>)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3b01      	subs	r3, #1
 8006780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006782:	210f      	movs	r1, #15
 8006784:	f04f 30ff 	mov.w	r0, #4294967295
 8006788:	f7ff ff8e 	bl	80066a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800678c:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <SysTick_Config+0x40>)
 800678e:	2200      	movs	r2, #0
 8006790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006792:	4b04      	ldr	r3, [pc, #16]	; (80067a4 <SysTick_Config+0x40>)
 8006794:	2207      	movs	r2, #7
 8006796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	e000e010 	.word	0xe000e010

080067a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff ff05 	bl	80065c0 <__NVIC_SetPriorityGrouping>
}
 80067b6:	bf00      	nop
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b086      	sub	sp, #24
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	4603      	mov	r3, r0
 80067c6:	60b9      	str	r1, [r7, #8]
 80067c8:	607a      	str	r2, [r7, #4]
 80067ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80067cc:	2300      	movs	r3, #0
 80067ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80067d0:	f7ff ff1a 	bl	8006608 <__NVIC_GetPriorityGrouping>
 80067d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	68b9      	ldr	r1, [r7, #8]
 80067da:	6978      	ldr	r0, [r7, #20]
 80067dc:	f7ff ff8e 	bl	80066fc <NVIC_EncodePriority>
 80067e0:	4602      	mov	r2, r0
 80067e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067e6:	4611      	mov	r1, r2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff ff5d 	bl	80066a8 <__NVIC_SetPriority>
}
 80067ee:	bf00      	nop
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b082      	sub	sp, #8
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	4603      	mov	r3, r0
 80067fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006804:	4618      	mov	r0, r3
 8006806:	f7ff ff0d 	bl	8006624 <__NVIC_EnableIRQ>
}
 800680a:	bf00      	nop
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	4603      	mov	r3, r0
 800681a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800681c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006820:	4618      	mov	r0, r3
 8006822:	f7ff ff1d 	bl	8006660 <__NVIC_DisableIRQ>
}
 8006826:	bf00      	nop
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b082      	sub	sp, #8
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7ff ff94 	bl	8006764 <SysTick_Config>
 800683c:	4603      	mov	r3, r0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e098      	b.n	800698c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	4b4d      	ldr	r3, [pc, #308]	; (8006998 <HAL_DMA_Init+0x150>)
 8006862:	429a      	cmp	r2, r3
 8006864:	d80f      	bhi.n	8006886 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	4b4b      	ldr	r3, [pc, #300]	; (800699c <HAL_DMA_Init+0x154>)
 800686e:	4413      	add	r3, r2
 8006870:	4a4b      	ldr	r2, [pc, #300]	; (80069a0 <HAL_DMA_Init+0x158>)
 8006872:	fba2 2303 	umull	r2, r3, r2, r3
 8006876:	091b      	lsrs	r3, r3, #4
 8006878:	009a      	lsls	r2, r3, #2
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a48      	ldr	r2, [pc, #288]	; (80069a4 <HAL_DMA_Init+0x15c>)
 8006882:	641a      	str	r2, [r3, #64]	; 0x40
 8006884:	e00e      	b.n	80068a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	4b46      	ldr	r3, [pc, #280]	; (80069a8 <HAL_DMA_Init+0x160>)
 800688e:	4413      	add	r3, r2
 8006890:	4a43      	ldr	r2, [pc, #268]	; (80069a0 <HAL_DMA_Init+0x158>)
 8006892:	fba2 2303 	umull	r2, r3, r2, r3
 8006896:	091b      	lsrs	r3, r3, #4
 8006898:	009a      	lsls	r2, r3, #2
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a42      	ldr	r2, [pc, #264]	; (80069ac <HAL_DMA_Init+0x164>)
 80068a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80068ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80068c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068fe:	d039      	beq.n	8006974 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006904:	4a27      	ldr	r2, [pc, #156]	; (80069a4 <HAL_DMA_Init+0x15c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d11a      	bne.n	8006940 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800690a:	4b29      	ldr	r3, [pc, #164]	; (80069b0 <HAL_DMA_Init+0x168>)
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006912:	f003 031c 	and.w	r3, r3, #28
 8006916:	210f      	movs	r1, #15
 8006918:	fa01 f303 	lsl.w	r3, r1, r3
 800691c:	43db      	mvns	r3, r3
 800691e:	4924      	ldr	r1, [pc, #144]	; (80069b0 <HAL_DMA_Init+0x168>)
 8006920:	4013      	ands	r3, r2
 8006922:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006924:	4b22      	ldr	r3, [pc, #136]	; (80069b0 <HAL_DMA_Init+0x168>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6859      	ldr	r1, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006930:	f003 031c 	and.w	r3, r3, #28
 8006934:	fa01 f303 	lsl.w	r3, r1, r3
 8006938:	491d      	ldr	r1, [pc, #116]	; (80069b0 <HAL_DMA_Init+0x168>)
 800693a:	4313      	orrs	r3, r2
 800693c:	600b      	str	r3, [r1, #0]
 800693e:	e019      	b.n	8006974 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006940:	4b1c      	ldr	r3, [pc, #112]	; (80069b4 <HAL_DMA_Init+0x16c>)
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006948:	f003 031c 	and.w	r3, r3, #28
 800694c:	210f      	movs	r1, #15
 800694e:	fa01 f303 	lsl.w	r3, r1, r3
 8006952:	43db      	mvns	r3, r3
 8006954:	4917      	ldr	r1, [pc, #92]	; (80069b4 <HAL_DMA_Init+0x16c>)
 8006956:	4013      	ands	r3, r2
 8006958:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800695a:	4b16      	ldr	r3, [pc, #88]	; (80069b4 <HAL_DMA_Init+0x16c>)
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6859      	ldr	r1, [r3, #4]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006966:	f003 031c 	and.w	r3, r3, #28
 800696a:	fa01 f303 	lsl.w	r3, r1, r3
 800696e:	4911      	ldr	r1, [pc, #68]	; (80069b4 <HAL_DMA_Init+0x16c>)
 8006970:	4313      	orrs	r3, r2
 8006972:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	40020407 	.word	0x40020407
 800699c:	bffdfff8 	.word	0xbffdfff8
 80069a0:	cccccccd 	.word	0xcccccccd
 80069a4:	40020000 	.word	0x40020000
 80069a8:	bffdfbf8 	.word	0xbffdfbf8
 80069ac:	40020400 	.word	0x40020400
 80069b0:	400200a8 	.word	0x400200a8
 80069b4:	400204a8 	.word	0x400204a8

080069b8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e072      	b.n	8006ab0 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 0201 	bic.w	r2, r2, #1
 80069d8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	4b36      	ldr	r3, [pc, #216]	; (8006abc <HAL_DMA_DeInit+0x104>)
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d80f      	bhi.n	8006a06 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	461a      	mov	r2, r3
 80069ec:	4b34      	ldr	r3, [pc, #208]	; (8006ac0 <HAL_DMA_DeInit+0x108>)
 80069ee:	4413      	add	r3, r2
 80069f0:	4a34      	ldr	r2, [pc, #208]	; (8006ac4 <HAL_DMA_DeInit+0x10c>)
 80069f2:	fba2 2303 	umull	r2, r3, r2, r3
 80069f6:	091b      	lsrs	r3, r3, #4
 80069f8:	009a      	lsls	r2, r3, #2
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a31      	ldr	r2, [pc, #196]	; (8006ac8 <HAL_DMA_DeInit+0x110>)
 8006a02:	641a      	str	r2, [r3, #64]	; 0x40
 8006a04:	e00e      	b.n	8006a24 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	4b2f      	ldr	r3, [pc, #188]	; (8006acc <HAL_DMA_DeInit+0x114>)
 8006a0e:	4413      	add	r3, r2
 8006a10:	4a2c      	ldr	r2, [pc, #176]	; (8006ac4 <HAL_DMA_DeInit+0x10c>)
 8006a12:	fba2 2303 	umull	r2, r3, r2, r3
 8006a16:	091b      	lsrs	r3, r3, #4
 8006a18:	009a      	lsls	r2, r3, #2
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a2b      	ldr	r2, [pc, #172]	; (8006ad0 <HAL_DMA_DeInit+0x118>)
 8006a22:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a30:	f003 021c 	and.w	r2, r3, #28
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a38:	2101      	movs	r1, #1
 8006a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8006a3e:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a44:	4a20      	ldr	r2, [pc, #128]	; (8006ac8 <HAL_DMA_DeInit+0x110>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d10d      	bne.n	8006a66 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006a4a:	4b22      	ldr	r3, [pc, #136]	; (8006ad4 <HAL_DMA_DeInit+0x11c>)
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a52:	f003 031c 	and.w	r3, r3, #28
 8006a56:	210f      	movs	r1, #15
 8006a58:	fa01 f303 	lsl.w	r3, r1, r3
 8006a5c:	43db      	mvns	r3, r3
 8006a5e:	491d      	ldr	r1, [pc, #116]	; (8006ad4 <HAL_DMA_DeInit+0x11c>)
 8006a60:	4013      	ands	r3, r2
 8006a62:	600b      	str	r3, [r1, #0]
 8006a64:	e00c      	b.n	8006a80 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006a66:	4b1c      	ldr	r3, [pc, #112]	; (8006ad8 <HAL_DMA_DeInit+0x120>)
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6e:	f003 031c 	and.w	r3, r3, #28
 8006a72:	210f      	movs	r1, #15
 8006a74:	fa01 f303 	lsl.w	r3, r1, r3
 8006a78:	43db      	mvns	r3, r3
 8006a7a:	4917      	ldr	r1, [pc, #92]	; (8006ad8 <HAL_DMA_DeInit+0x120>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	40020407 	.word	0x40020407
 8006ac0:	bffdfff8 	.word	0xbffdfff8
 8006ac4:	cccccccd 	.word	0xcccccccd
 8006ac8:	40020000 	.word	0x40020000
 8006acc:	bffdfbf8 	.word	0xbffdfbf8
 8006ad0:	40020400 	.word	0x40020400
 8006ad4:	400200a8 	.word	0x400200a8
 8006ad8:	400204a8 	.word	0x400204a8

08006adc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d101      	bne.n	8006afc <HAL_DMA_Start_IT+0x20>
 8006af8:	2302      	movs	r3, #2
 8006afa:	e04b      	b.n	8006b94 <HAL_DMA_Start_IT+0xb8>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d13a      	bne.n	8006b86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0201 	bic.w	r2, r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 f95f 	bl	8006df8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d008      	beq.n	8006b54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 020e 	orr.w	r2, r2, #14
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	e00f      	b.n	8006b74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0204 	bic.w	r2, r2, #4
 8006b62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f042 020a 	orr.w	r2, r2, #10
 8006b72:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0201 	orr.w	r2, r2, #1
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	e005      	b.n	8006b92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006b8e:	2302      	movs	r3, #2
 8006b90:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d008      	beq.n	8006bc6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2204      	movs	r2, #4
 8006bb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e022      	b.n	8006c0c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 020e 	bic.w	r2, r2, #14
 8006bd4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f022 0201 	bic.w	r2, r2, #1
 8006be4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bea:	f003 021c 	and.w	r2, r3, #28
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8006bf8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d005      	beq.n	8006c3c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2204      	movs	r2, #4
 8006c34:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	73fb      	strb	r3, [r7, #15]
 8006c3a:	e029      	b.n	8006c90 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 020e 	bic.w	r2, r2, #14
 8006c4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f022 0201 	bic.w	r2, r2, #1
 8006c5a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c60:	f003 021c 	and.w	r2, r3, #28
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c68:	2101      	movs	r1, #1
 8006c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8006c6e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	4798      	blx	r3
    }
  }
  return status;
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b084      	sub	sp, #16
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb6:	f003 031c 	and.w	r3, r3, #28
 8006cba:	2204      	movs	r2, #4
 8006cbc:	409a      	lsls	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d026      	beq.n	8006d14 <HAL_DMA_IRQHandler+0x7a>
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f003 0304 	and.w	r3, r3, #4
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d021      	beq.n	8006d14 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d107      	bne.n	8006cee <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0204 	bic.w	r2, r2, #4
 8006cec:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf2:	f003 021c 	and.w	r2, r3, #28
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	2104      	movs	r1, #4
 8006cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8006d00:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d071      	beq.n	8006dee <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006d12:	e06c      	b.n	8006dee <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d18:	f003 031c 	and.w	r3, r3, #28
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	409a      	lsls	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4013      	ands	r3, r2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d02e      	beq.n	8006d86 <HAL_DMA_IRQHandler+0xec>
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d029      	beq.n	8006d86 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0320 	and.w	r3, r3, #32
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10b      	bne.n	8006d58 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 020a 	bic.w	r2, r2, #10
 8006d4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5c:	f003 021c 	and.w	r2, r3, #28
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d64:	2102      	movs	r1, #2
 8006d66:	fa01 f202 	lsl.w	r2, r1, r2
 8006d6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d038      	beq.n	8006dee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006d84:	e033      	b.n	8006dee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8a:	f003 031c 	and.w	r3, r3, #28
 8006d8e:	2208      	movs	r2, #8
 8006d90:	409a      	lsls	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	4013      	ands	r3, r2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d02a      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x156>
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f003 0308 	and.w	r3, r3, #8
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d025      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 020e 	bic.w	r2, r2, #14
 8006db2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db8:	f003 021c 	and.w	r2, r3, #28
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8006dc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d004      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006dee:	bf00      	nop
 8006df0:	bf00      	nop
}
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e0a:	f003 021c 	and.w	r2, r3, #28
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	2101      	movs	r1, #1
 8006e14:	fa01 f202 	lsl.w	r2, r1, r2
 8006e18:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2b10      	cmp	r3, #16
 8006e28:	d108      	bne.n	8006e3c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006e3a:	e007      	b.n	8006e4c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	60da      	str	r2, [r3, #12]
}
 8006e4c:	bf00      	nop
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b087      	sub	sp, #28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006e62:	2300      	movs	r3, #0
 8006e64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e66:	e166      	b.n	8007136 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	fa01 f303 	lsl.w	r3, r1, r3
 8006e74:	4013      	ands	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 8158 	beq.w	8007130 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f003 0303 	and.w	r3, r3, #3
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d005      	beq.n	8006e98 <HAL_GPIO_Init+0x40>
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f003 0303 	and.w	r3, r3, #3
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d130      	bne.n	8006efa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	2203      	movs	r2, #3
 8006ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea8:	43db      	mvns	r3, r3
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4013      	ands	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	68da      	ldr	r2, [r3, #12]
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ece:	2201      	movs	r2, #1
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed6:	43db      	mvns	r3, r3
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	4013      	ands	r3, r2
 8006edc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	091b      	lsrs	r3, r3, #4
 8006ee4:	f003 0201 	and.w	r2, r3, #1
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	fa02 f303 	lsl.w	r3, r2, r3
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d017      	beq.n	8006f36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	2203      	movs	r2, #3
 8006f12:	fa02 f303 	lsl.w	r3, r2, r3
 8006f16:	43db      	mvns	r3, r3
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	689a      	ldr	r2, [r3, #8]
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d123      	bne.n	8006f8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	08da      	lsrs	r2, r3, #3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3208      	adds	r2, #8
 8006f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f003 0307 	and.w	r3, r3, #7
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	220f      	movs	r2, #15
 8006f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5e:	43db      	mvns	r3, r3
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	4013      	ands	r3, r2
 8006f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	691a      	ldr	r2, [r3, #16]
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f003 0307 	and.w	r3, r3, #7
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	fa02 f303 	lsl.w	r3, r2, r3
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	08da      	lsrs	r2, r3, #3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3208      	adds	r2, #8
 8006f84:	6939      	ldr	r1, [r7, #16]
 8006f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	005b      	lsls	r3, r3, #1
 8006f94:	2203      	movs	r2, #3
 8006f96:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9a:	43db      	mvns	r3, r3
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f003 0203 	and.w	r2, r3, #3
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 80b2 	beq.w	8007130 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fcc:	4b61      	ldr	r3, [pc, #388]	; (8007154 <HAL_GPIO_Init+0x2fc>)
 8006fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fd0:	4a60      	ldr	r2, [pc, #384]	; (8007154 <HAL_GPIO_Init+0x2fc>)
 8006fd2:	f043 0301 	orr.w	r3, r3, #1
 8006fd6:	6613      	str	r3, [r2, #96]	; 0x60
 8006fd8:	4b5e      	ldr	r3, [pc, #376]	; (8007154 <HAL_GPIO_Init+0x2fc>)
 8006fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	60bb      	str	r3, [r7, #8]
 8006fe2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006fe4:	4a5c      	ldr	r2, [pc, #368]	; (8007158 <HAL_GPIO_Init+0x300>)
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	089b      	lsrs	r3, r3, #2
 8006fea:	3302      	adds	r3, #2
 8006fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f003 0303 	and.w	r3, r3, #3
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	220f      	movs	r2, #15
 8006ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8007000:	43db      	mvns	r3, r3
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	4013      	ands	r3, r2
 8007006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800700e:	d02b      	beq.n	8007068 <HAL_GPIO_Init+0x210>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a52      	ldr	r2, [pc, #328]	; (800715c <HAL_GPIO_Init+0x304>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d025      	beq.n	8007064 <HAL_GPIO_Init+0x20c>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a51      	ldr	r2, [pc, #324]	; (8007160 <HAL_GPIO_Init+0x308>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d01f      	beq.n	8007060 <HAL_GPIO_Init+0x208>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a50      	ldr	r2, [pc, #320]	; (8007164 <HAL_GPIO_Init+0x30c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d019      	beq.n	800705c <HAL_GPIO_Init+0x204>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a4f      	ldr	r2, [pc, #316]	; (8007168 <HAL_GPIO_Init+0x310>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d013      	beq.n	8007058 <HAL_GPIO_Init+0x200>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a4e      	ldr	r2, [pc, #312]	; (800716c <HAL_GPIO_Init+0x314>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d00d      	beq.n	8007054 <HAL_GPIO_Init+0x1fc>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a4d      	ldr	r2, [pc, #308]	; (8007170 <HAL_GPIO_Init+0x318>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d007      	beq.n	8007050 <HAL_GPIO_Init+0x1f8>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a4c      	ldr	r2, [pc, #304]	; (8007174 <HAL_GPIO_Init+0x31c>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d101      	bne.n	800704c <HAL_GPIO_Init+0x1f4>
 8007048:	2307      	movs	r3, #7
 800704a:	e00e      	b.n	800706a <HAL_GPIO_Init+0x212>
 800704c:	2308      	movs	r3, #8
 800704e:	e00c      	b.n	800706a <HAL_GPIO_Init+0x212>
 8007050:	2306      	movs	r3, #6
 8007052:	e00a      	b.n	800706a <HAL_GPIO_Init+0x212>
 8007054:	2305      	movs	r3, #5
 8007056:	e008      	b.n	800706a <HAL_GPIO_Init+0x212>
 8007058:	2304      	movs	r3, #4
 800705a:	e006      	b.n	800706a <HAL_GPIO_Init+0x212>
 800705c:	2303      	movs	r3, #3
 800705e:	e004      	b.n	800706a <HAL_GPIO_Init+0x212>
 8007060:	2302      	movs	r3, #2
 8007062:	e002      	b.n	800706a <HAL_GPIO_Init+0x212>
 8007064:	2301      	movs	r3, #1
 8007066:	e000      	b.n	800706a <HAL_GPIO_Init+0x212>
 8007068:	2300      	movs	r3, #0
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	f002 0203 	and.w	r2, r2, #3
 8007070:	0092      	lsls	r2, r2, #2
 8007072:	4093      	lsls	r3, r2
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	4313      	orrs	r3, r2
 8007078:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800707a:	4937      	ldr	r1, [pc, #220]	; (8007158 <HAL_GPIO_Init+0x300>)
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	089b      	lsrs	r3, r3, #2
 8007080:	3302      	adds	r3, #2
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007088:	4b3b      	ldr	r3, [pc, #236]	; (8007178 <HAL_GPIO_Init+0x320>)
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	43db      	mvns	r3, r3
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	4013      	ands	r3, r2
 8007096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d003      	beq.n	80070ac <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80070ac:	4a32      	ldr	r2, [pc, #200]	; (8007178 <HAL_GPIO_Init+0x320>)
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80070b2:	4b31      	ldr	r3, [pc, #196]	; (8007178 <HAL_GPIO_Init+0x320>)
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	43db      	mvns	r3, r3
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4013      	ands	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80070d6:	4a28      	ldr	r2, [pc, #160]	; (8007178 <HAL_GPIO_Init+0x320>)
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80070dc:	4b26      	ldr	r3, [pc, #152]	; (8007178 <HAL_GPIO_Init+0x320>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	43db      	mvns	r3, r3
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	4013      	ands	r3, r2
 80070ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007100:	4a1d      	ldr	r2, [pc, #116]	; (8007178 <HAL_GPIO_Init+0x320>)
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007106:	4b1c      	ldr	r3, [pc, #112]	; (8007178 <HAL_GPIO_Init+0x320>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	43db      	mvns	r3, r3
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	4013      	ands	r3, r2
 8007114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4313      	orrs	r3, r2
 8007128:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800712a:	4a13      	ldr	r2, [pc, #76]	; (8007178 <HAL_GPIO_Init+0x320>)
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	3301      	adds	r3, #1
 8007134:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	fa22 f303 	lsr.w	r3, r2, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	f47f ae91 	bne.w	8006e68 <HAL_GPIO_Init+0x10>
  }
}
 8007146:	bf00      	nop
 8007148:	bf00      	nop
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	40021000 	.word	0x40021000
 8007158:	40010000 	.word	0x40010000
 800715c:	48000400 	.word	0x48000400
 8007160:	48000800 	.word	0x48000800
 8007164:	48000c00 	.word	0x48000c00
 8007168:	48001000 	.word	0x48001000
 800716c:	48001400 	.word	0x48001400
 8007170:	48001800 	.word	0x48001800
 8007174:	48001c00 	.word	0x48001c00
 8007178:	40010400 	.word	0x40010400

0800717c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007186:	2300      	movs	r3, #0
 8007188:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800718a:	e0c9      	b.n	8007320 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800718c:	2201      	movs	r2, #1
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	fa02 f303 	lsl.w	r3, r2, r3
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	4013      	ands	r3, r2
 8007198:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 80bc 	beq.w	800731a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80071a2:	4a66      	ldr	r2, [pc, #408]	; (800733c <HAL_GPIO_DeInit+0x1c0>)
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	089b      	lsrs	r3, r3, #2
 80071a8:	3302      	adds	r3, #2
 80071aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ae:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f003 0303 	and.w	r3, r3, #3
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	220f      	movs	r2, #15
 80071ba:	fa02 f303 	lsl.w	r3, r2, r3
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	4013      	ands	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80071ca:	d02b      	beq.n	8007224 <HAL_GPIO_DeInit+0xa8>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a5c      	ldr	r2, [pc, #368]	; (8007340 <HAL_GPIO_DeInit+0x1c4>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d025      	beq.n	8007220 <HAL_GPIO_DeInit+0xa4>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a5b      	ldr	r2, [pc, #364]	; (8007344 <HAL_GPIO_DeInit+0x1c8>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d01f      	beq.n	800721c <HAL_GPIO_DeInit+0xa0>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a5a      	ldr	r2, [pc, #360]	; (8007348 <HAL_GPIO_DeInit+0x1cc>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d019      	beq.n	8007218 <HAL_GPIO_DeInit+0x9c>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a59      	ldr	r2, [pc, #356]	; (800734c <HAL_GPIO_DeInit+0x1d0>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d013      	beq.n	8007214 <HAL_GPIO_DeInit+0x98>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a58      	ldr	r2, [pc, #352]	; (8007350 <HAL_GPIO_DeInit+0x1d4>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d00d      	beq.n	8007210 <HAL_GPIO_DeInit+0x94>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a57      	ldr	r2, [pc, #348]	; (8007354 <HAL_GPIO_DeInit+0x1d8>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d007      	beq.n	800720c <HAL_GPIO_DeInit+0x90>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a56      	ldr	r2, [pc, #344]	; (8007358 <HAL_GPIO_DeInit+0x1dc>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d101      	bne.n	8007208 <HAL_GPIO_DeInit+0x8c>
 8007204:	2307      	movs	r3, #7
 8007206:	e00e      	b.n	8007226 <HAL_GPIO_DeInit+0xaa>
 8007208:	2308      	movs	r3, #8
 800720a:	e00c      	b.n	8007226 <HAL_GPIO_DeInit+0xaa>
 800720c:	2306      	movs	r3, #6
 800720e:	e00a      	b.n	8007226 <HAL_GPIO_DeInit+0xaa>
 8007210:	2305      	movs	r3, #5
 8007212:	e008      	b.n	8007226 <HAL_GPIO_DeInit+0xaa>
 8007214:	2304      	movs	r3, #4
 8007216:	e006      	b.n	8007226 <HAL_GPIO_DeInit+0xaa>
 8007218:	2303      	movs	r3, #3
 800721a:	e004      	b.n	8007226 <HAL_GPIO_DeInit+0xaa>
 800721c:	2302      	movs	r3, #2
 800721e:	e002      	b.n	8007226 <HAL_GPIO_DeInit+0xaa>
 8007220:	2301      	movs	r3, #1
 8007222:	e000      	b.n	8007226 <HAL_GPIO_DeInit+0xaa>
 8007224:	2300      	movs	r3, #0
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	f002 0203 	and.w	r2, r2, #3
 800722c:	0092      	lsls	r2, r2, #2
 800722e:	4093      	lsls	r3, r2
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	429a      	cmp	r2, r3
 8007234:	d132      	bne.n	800729c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007236:	4b49      	ldr	r3, [pc, #292]	; (800735c <HAL_GPIO_DeInit+0x1e0>)
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	43db      	mvns	r3, r3
 800723e:	4947      	ldr	r1, [pc, #284]	; (800735c <HAL_GPIO_DeInit+0x1e0>)
 8007240:	4013      	ands	r3, r2
 8007242:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007244:	4b45      	ldr	r3, [pc, #276]	; (800735c <HAL_GPIO_DeInit+0x1e0>)
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	43db      	mvns	r3, r3
 800724c:	4943      	ldr	r1, [pc, #268]	; (800735c <HAL_GPIO_DeInit+0x1e0>)
 800724e:	4013      	ands	r3, r2
 8007250:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007252:	4b42      	ldr	r3, [pc, #264]	; (800735c <HAL_GPIO_DeInit+0x1e0>)
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	43db      	mvns	r3, r3
 800725a:	4940      	ldr	r1, [pc, #256]	; (800735c <HAL_GPIO_DeInit+0x1e0>)
 800725c:	4013      	ands	r3, r2
 800725e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007260:	4b3e      	ldr	r3, [pc, #248]	; (800735c <HAL_GPIO_DeInit+0x1e0>)
 8007262:	689a      	ldr	r2, [r3, #8]
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	43db      	mvns	r3, r3
 8007268:	493c      	ldr	r1, [pc, #240]	; (800735c <HAL_GPIO_DeInit+0x1e0>)
 800726a:	4013      	ands	r3, r2
 800726c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f003 0303 	and.w	r3, r3, #3
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	220f      	movs	r2, #15
 8007278:	fa02 f303 	lsl.w	r3, r2, r3
 800727c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800727e:	4a2f      	ldr	r2, [pc, #188]	; (800733c <HAL_GPIO_DeInit+0x1c0>)
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	089b      	lsrs	r3, r3, #2
 8007284:	3302      	adds	r3, #2
 8007286:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	43da      	mvns	r2, r3
 800728e:	482b      	ldr	r0, [pc, #172]	; (800733c <HAL_GPIO_DeInit+0x1c0>)
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	089b      	lsrs	r3, r3, #2
 8007294:	400a      	ands	r2, r1
 8007296:	3302      	adds	r3, #2
 8007298:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	005b      	lsls	r3, r3, #1
 80072a4:	2103      	movs	r1, #3
 80072a6:	fa01 f303 	lsl.w	r3, r1, r3
 80072aa:	431a      	orrs	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	08da      	lsrs	r2, r3, #3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3208      	adds	r2, #8
 80072b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	f003 0307 	and.w	r3, r3, #7
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	220f      	movs	r2, #15
 80072c6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ca:	43db      	mvns	r3, r3
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	08d2      	lsrs	r2, r2, #3
 80072d0:	4019      	ands	r1, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	3208      	adds	r2, #8
 80072d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	689a      	ldr	r2, [r3, #8]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	2103      	movs	r1, #3
 80072e4:	fa01 f303 	lsl.w	r3, r1, r3
 80072e8:	43db      	mvns	r3, r3
 80072ea:	401a      	ands	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	2101      	movs	r1, #1
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	fa01 f303 	lsl.w	r3, r1, r3
 80072fc:	43db      	mvns	r3, r3
 80072fe:	401a      	ands	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68da      	ldr	r2, [r3, #12]
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	2103      	movs	r1, #3
 800730e:	fa01 f303 	lsl.w	r3, r1, r3
 8007312:	43db      	mvns	r3, r3
 8007314:	401a      	ands	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	3301      	adds	r3, #1
 800731e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	fa22 f303 	lsr.w	r3, r2, r3
 8007328:	2b00      	cmp	r3, #0
 800732a:	f47f af2f 	bne.w	800718c <HAL_GPIO_DeInit+0x10>
  }
}
 800732e:	bf00      	nop
 8007330:	bf00      	nop
 8007332:	371c      	adds	r7, #28
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	40010000 	.word	0x40010000
 8007340:	48000400 	.word	0x48000400
 8007344:	48000800 	.word	0x48000800
 8007348:	48000c00 	.word	0x48000c00
 800734c:	48001000 	.word	0x48001000
 8007350:	48001400 	.word	0x48001400
 8007354:	48001800 	.word	0x48001800
 8007358:	48001c00 	.word	0x48001c00
 800735c:	40010400 	.word	0x40010400

08007360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	807b      	strh	r3, [r7, #2]
 800736c:	4613      	mov	r3, r2
 800736e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007370:	787b      	ldrb	r3, [r7, #1]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d003      	beq.n	800737e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007376:	887a      	ldrh	r2, [r7, #2]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800737c:	e002      	b.n	8007384 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800737e:	887a      	ldrh	r2, [r7, #2]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007390:	b480      	push	{r7}
 8007392:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007394:	4b04      	ldr	r3, [pc, #16]	; (80073a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800739c:	4618      	mov	r0, r3
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	40007000 	.word	0x40007000

080073ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073ba:	d130      	bne.n	800741e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80073bc:	4b23      	ldr	r3, [pc, #140]	; (800744c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80073c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073c8:	d038      	beq.n	800743c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80073ca:	4b20      	ldr	r3, [pc, #128]	; (800744c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80073d2:	4a1e      	ldr	r2, [pc, #120]	; (800744c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80073d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80073d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80073da:	4b1d      	ldr	r3, [pc, #116]	; (8007450 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2232      	movs	r2, #50	; 0x32
 80073e0:	fb02 f303 	mul.w	r3, r2, r3
 80073e4:	4a1b      	ldr	r2, [pc, #108]	; (8007454 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80073e6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ea:	0c9b      	lsrs	r3, r3, #18
 80073ec:	3301      	adds	r3, #1
 80073ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80073f0:	e002      	b.n	80073f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80073f8:	4b14      	ldr	r3, [pc, #80]	; (800744c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007404:	d102      	bne.n	800740c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1f2      	bne.n	80073f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800740c:	4b0f      	ldr	r3, [pc, #60]	; (800744c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007418:	d110      	bne.n	800743c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e00f      	b.n	800743e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800741e:	4b0b      	ldr	r3, [pc, #44]	; (800744c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800742a:	d007      	beq.n	800743c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800742c:	4b07      	ldr	r3, [pc, #28]	; (800744c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007434:	4a05      	ldr	r2, [pc, #20]	; (800744c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800743a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	40007000 	.word	0x40007000
 8007450:	2000000c 	.word	0x2000000c
 8007454:	431bde83 	.word	0x431bde83

08007458 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b088      	sub	sp, #32
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d102      	bne.n	800746c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	f000 bc08 	b.w	8007c7c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800746c:	4b96      	ldr	r3, [pc, #600]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f003 030c 	and.w	r3, r3, #12
 8007474:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007476:	4b94      	ldr	r3, [pc, #592]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f003 0303 	and.w	r3, r3, #3
 800747e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0310 	and.w	r3, r3, #16
 8007488:	2b00      	cmp	r3, #0
 800748a:	f000 80e4 	beq.w	8007656 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d007      	beq.n	80074a4 <HAL_RCC_OscConfig+0x4c>
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	2b0c      	cmp	r3, #12
 8007498:	f040 808b 	bne.w	80075b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	f040 8087 	bne.w	80075b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80074a4:	4b88      	ldr	r3, [pc, #544]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d005      	beq.n	80074bc <HAL_RCC_OscConfig+0x64>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e3df      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a1a      	ldr	r2, [r3, #32]
 80074c0:	4b81      	ldr	r3, [pc, #516]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0308 	and.w	r3, r3, #8
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d004      	beq.n	80074d6 <HAL_RCC_OscConfig+0x7e>
 80074cc:	4b7e      	ldr	r3, [pc, #504]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074d4:	e005      	b.n	80074e2 <HAL_RCC_OscConfig+0x8a>
 80074d6:	4b7c      	ldr	r3, [pc, #496]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 80074d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074dc:	091b      	lsrs	r3, r3, #4
 80074de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d223      	bcs.n	800752e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fd92 	bl	8008014 <RCC_SetFlashLatencyFromMSIRange>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e3c0      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80074fa:	4b73      	ldr	r3, [pc, #460]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a72      	ldr	r2, [pc, #456]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 8007500:	f043 0308 	orr.w	r3, r3, #8
 8007504:	6013      	str	r3, [r2, #0]
 8007506:	4b70      	ldr	r3, [pc, #448]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	496d      	ldr	r1, [pc, #436]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 8007514:	4313      	orrs	r3, r2
 8007516:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007518:	4b6b      	ldr	r3, [pc, #428]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	021b      	lsls	r3, r3, #8
 8007526:	4968      	ldr	r1, [pc, #416]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 8007528:	4313      	orrs	r3, r2
 800752a:	604b      	str	r3, [r1, #4]
 800752c:	e025      	b.n	800757a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800752e:	4b66      	ldr	r3, [pc, #408]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a65      	ldr	r2, [pc, #404]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 8007534:	f043 0308 	orr.w	r3, r3, #8
 8007538:	6013      	str	r3, [r2, #0]
 800753a:	4b63      	ldr	r3, [pc, #396]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	4960      	ldr	r1, [pc, #384]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 8007548:	4313      	orrs	r3, r2
 800754a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800754c:	4b5e      	ldr	r3, [pc, #376]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	69db      	ldr	r3, [r3, #28]
 8007558:	021b      	lsls	r3, r3, #8
 800755a:	495b      	ldr	r1, [pc, #364]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 800755c:	4313      	orrs	r3, r2
 800755e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d109      	bne.n	800757a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	4618      	mov	r0, r3
 800756c:	f000 fd52 	bl	8008014 <RCC_SetFlashLatencyFromMSIRange>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e380      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800757a:	f000 fc87 	bl	8007e8c <HAL_RCC_GetSysClockFreq>
 800757e:	4602      	mov	r2, r0
 8007580:	4b51      	ldr	r3, [pc, #324]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	091b      	lsrs	r3, r3, #4
 8007586:	f003 030f 	and.w	r3, r3, #15
 800758a:	4950      	ldr	r1, [pc, #320]	; (80076cc <HAL_RCC_OscConfig+0x274>)
 800758c:	5ccb      	ldrb	r3, [r1, r3]
 800758e:	f003 031f 	and.w	r3, r3, #31
 8007592:	fa22 f303 	lsr.w	r3, r2, r3
 8007596:	4a4e      	ldr	r2, [pc, #312]	; (80076d0 <HAL_RCC_OscConfig+0x278>)
 8007598:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800759a:	4b4e      	ldr	r3, [pc, #312]	; (80076d4 <HAL_RCC_OscConfig+0x27c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe ffb2 	bl	8006508 <HAL_InitTick>
 80075a4:	4603      	mov	r3, r0
 80075a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d052      	beq.n	8007654 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
 80075b0:	e364      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d032      	beq.n	8007620 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80075ba:	4b43      	ldr	r3, [pc, #268]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a42      	ldr	r2, [pc, #264]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 80075c0:	f043 0301 	orr.w	r3, r3, #1
 80075c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80075c6:	f7fe ffef 	bl	80065a8 <HAL_GetTick>
 80075ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80075cc:	e008      	b.n	80075e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80075ce:	f7fe ffeb 	bl	80065a8 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d901      	bls.n	80075e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e34d      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80075e0:	4b39      	ldr	r3, [pc, #228]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0302 	and.w	r3, r3, #2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0f0      	beq.n	80075ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80075ec:	4b36      	ldr	r3, [pc, #216]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a35      	ldr	r2, [pc, #212]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 80075f2:	f043 0308 	orr.w	r3, r3, #8
 80075f6:	6013      	str	r3, [r2, #0]
 80075f8:	4b33      	ldr	r3, [pc, #204]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	4930      	ldr	r1, [pc, #192]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 8007606:	4313      	orrs	r3, r2
 8007608:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800760a:	4b2f      	ldr	r3, [pc, #188]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	021b      	lsls	r3, r3, #8
 8007618:	492b      	ldr	r1, [pc, #172]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 800761a:	4313      	orrs	r3, r2
 800761c:	604b      	str	r3, [r1, #4]
 800761e:	e01a      	b.n	8007656 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007620:	4b29      	ldr	r3, [pc, #164]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a28      	ldr	r2, [pc, #160]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 8007626:	f023 0301 	bic.w	r3, r3, #1
 800762a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800762c:	f7fe ffbc 	bl	80065a8 <HAL_GetTick>
 8007630:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007632:	e008      	b.n	8007646 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007634:	f7fe ffb8 	bl	80065a8 <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	2b02      	cmp	r3, #2
 8007640:	d901      	bls.n	8007646 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e31a      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007646:	4b20      	ldr	r3, [pc, #128]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0302 	and.w	r3, r3, #2
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1f0      	bne.n	8007634 <HAL_RCC_OscConfig+0x1dc>
 8007652:	e000      	b.n	8007656 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007654:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d073      	beq.n	800774a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	2b08      	cmp	r3, #8
 8007666:	d005      	beq.n	8007674 <HAL_RCC_OscConfig+0x21c>
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	2b0c      	cmp	r3, #12
 800766c:	d10e      	bne.n	800768c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2b03      	cmp	r3, #3
 8007672:	d10b      	bne.n	800768c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007674:	4b14      	ldr	r3, [pc, #80]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d063      	beq.n	8007748 <HAL_RCC_OscConfig+0x2f0>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d15f      	bne.n	8007748 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e2f7      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007694:	d106      	bne.n	80076a4 <HAL_RCC_OscConfig+0x24c>
 8007696:	4b0c      	ldr	r3, [pc, #48]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a0b      	ldr	r2, [pc, #44]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 800769c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076a0:	6013      	str	r3, [r2, #0]
 80076a2:	e025      	b.n	80076f0 <HAL_RCC_OscConfig+0x298>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076ac:	d114      	bne.n	80076d8 <HAL_RCC_OscConfig+0x280>
 80076ae:	4b06      	ldr	r3, [pc, #24]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a05      	ldr	r2, [pc, #20]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 80076b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	4b03      	ldr	r3, [pc, #12]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a02      	ldr	r2, [pc, #8]	; (80076c8 <HAL_RCC_OscConfig+0x270>)
 80076c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	e013      	b.n	80076f0 <HAL_RCC_OscConfig+0x298>
 80076c8:	40021000 	.word	0x40021000
 80076cc:	0800abf0 	.word	0x0800abf0
 80076d0:	2000000c 	.word	0x2000000c
 80076d4:	2000001c 	.word	0x2000001c
 80076d8:	4ba0      	ldr	r3, [pc, #640]	; (800795c <HAL_RCC_OscConfig+0x504>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a9f      	ldr	r2, [pc, #636]	; (800795c <HAL_RCC_OscConfig+0x504>)
 80076de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076e2:	6013      	str	r3, [r2, #0]
 80076e4:	4b9d      	ldr	r3, [pc, #628]	; (800795c <HAL_RCC_OscConfig+0x504>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a9c      	ldr	r2, [pc, #624]	; (800795c <HAL_RCC_OscConfig+0x504>)
 80076ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d013      	beq.n	8007720 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f8:	f7fe ff56 	bl	80065a8 <HAL_GetTick>
 80076fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076fe:	e008      	b.n	8007712 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007700:	f7fe ff52 	bl	80065a8 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b64      	cmp	r3, #100	; 0x64
 800770c:	d901      	bls.n	8007712 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e2b4      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007712:	4b92      	ldr	r3, [pc, #584]	; (800795c <HAL_RCC_OscConfig+0x504>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0f0      	beq.n	8007700 <HAL_RCC_OscConfig+0x2a8>
 800771e:	e014      	b.n	800774a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007720:	f7fe ff42 	bl	80065a8 <HAL_GetTick>
 8007724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007726:	e008      	b.n	800773a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007728:	f7fe ff3e 	bl	80065a8 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	2b64      	cmp	r3, #100	; 0x64
 8007734:	d901      	bls.n	800773a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e2a0      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800773a:	4b88      	ldr	r3, [pc, #544]	; (800795c <HAL_RCC_OscConfig+0x504>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1f0      	bne.n	8007728 <HAL_RCC_OscConfig+0x2d0>
 8007746:	e000      	b.n	800774a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d060      	beq.n	8007818 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	2b04      	cmp	r3, #4
 800775a:	d005      	beq.n	8007768 <HAL_RCC_OscConfig+0x310>
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	2b0c      	cmp	r3, #12
 8007760:	d119      	bne.n	8007796 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2b02      	cmp	r3, #2
 8007766:	d116      	bne.n	8007796 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007768:	4b7c      	ldr	r3, [pc, #496]	; (800795c <HAL_RCC_OscConfig+0x504>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007770:	2b00      	cmp	r3, #0
 8007772:	d005      	beq.n	8007780 <HAL_RCC_OscConfig+0x328>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e27d      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007780:	4b76      	ldr	r3, [pc, #472]	; (800795c <HAL_RCC_OscConfig+0x504>)
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	061b      	lsls	r3, r3, #24
 800778e:	4973      	ldr	r1, [pc, #460]	; (800795c <HAL_RCC_OscConfig+0x504>)
 8007790:	4313      	orrs	r3, r2
 8007792:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007794:	e040      	b.n	8007818 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d023      	beq.n	80077e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800779e:	4b6f      	ldr	r3, [pc, #444]	; (800795c <HAL_RCC_OscConfig+0x504>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a6e      	ldr	r2, [pc, #440]	; (800795c <HAL_RCC_OscConfig+0x504>)
 80077a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077aa:	f7fe fefd 	bl	80065a8 <HAL_GetTick>
 80077ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077b0:	e008      	b.n	80077c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077b2:	f7fe fef9 	bl	80065a8 <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d901      	bls.n	80077c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e25b      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077c4:	4b65      	ldr	r3, [pc, #404]	; (800795c <HAL_RCC_OscConfig+0x504>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d0f0      	beq.n	80077b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077d0:	4b62      	ldr	r3, [pc, #392]	; (800795c <HAL_RCC_OscConfig+0x504>)
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	061b      	lsls	r3, r3, #24
 80077de:	495f      	ldr	r1, [pc, #380]	; (800795c <HAL_RCC_OscConfig+0x504>)
 80077e0:	4313      	orrs	r3, r2
 80077e2:	604b      	str	r3, [r1, #4]
 80077e4:	e018      	b.n	8007818 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077e6:	4b5d      	ldr	r3, [pc, #372]	; (800795c <HAL_RCC_OscConfig+0x504>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a5c      	ldr	r2, [pc, #368]	; (800795c <HAL_RCC_OscConfig+0x504>)
 80077ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077f2:	f7fe fed9 	bl	80065a8 <HAL_GetTick>
 80077f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80077f8:	e008      	b.n	800780c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077fa:	f7fe fed5 	bl	80065a8 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	2b02      	cmp	r3, #2
 8007806:	d901      	bls.n	800780c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e237      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800780c:	4b53      	ldr	r3, [pc, #332]	; (800795c <HAL_RCC_OscConfig+0x504>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1f0      	bne.n	80077fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0308 	and.w	r3, r3, #8
 8007820:	2b00      	cmp	r3, #0
 8007822:	d03c      	beq.n	800789e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d01c      	beq.n	8007866 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800782c:	4b4b      	ldr	r3, [pc, #300]	; (800795c <HAL_RCC_OscConfig+0x504>)
 800782e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007832:	4a4a      	ldr	r2, [pc, #296]	; (800795c <HAL_RCC_OscConfig+0x504>)
 8007834:	f043 0301 	orr.w	r3, r3, #1
 8007838:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800783c:	f7fe feb4 	bl	80065a8 <HAL_GetTick>
 8007840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007842:	e008      	b.n	8007856 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007844:	f7fe feb0 	bl	80065a8 <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	2b02      	cmp	r3, #2
 8007850:	d901      	bls.n	8007856 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e212      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007856:	4b41      	ldr	r3, [pc, #260]	; (800795c <HAL_RCC_OscConfig+0x504>)
 8007858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0ef      	beq.n	8007844 <HAL_RCC_OscConfig+0x3ec>
 8007864:	e01b      	b.n	800789e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007866:	4b3d      	ldr	r3, [pc, #244]	; (800795c <HAL_RCC_OscConfig+0x504>)
 8007868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800786c:	4a3b      	ldr	r2, [pc, #236]	; (800795c <HAL_RCC_OscConfig+0x504>)
 800786e:	f023 0301 	bic.w	r3, r3, #1
 8007872:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007876:	f7fe fe97 	bl	80065a8 <HAL_GetTick>
 800787a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800787c:	e008      	b.n	8007890 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800787e:	f7fe fe93 	bl	80065a8 <HAL_GetTick>
 8007882:	4602      	mov	r2, r0
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	2b02      	cmp	r3, #2
 800788a:	d901      	bls.n	8007890 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e1f5      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007890:	4b32      	ldr	r3, [pc, #200]	; (800795c <HAL_RCC_OscConfig+0x504>)
 8007892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1ef      	bne.n	800787e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0304 	and.w	r3, r3, #4
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f000 80a6 	beq.w	80079f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078ac:	2300      	movs	r3, #0
 80078ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80078b0:	4b2a      	ldr	r3, [pc, #168]	; (800795c <HAL_RCC_OscConfig+0x504>)
 80078b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10d      	bne.n	80078d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078bc:	4b27      	ldr	r3, [pc, #156]	; (800795c <HAL_RCC_OscConfig+0x504>)
 80078be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078c0:	4a26      	ldr	r2, [pc, #152]	; (800795c <HAL_RCC_OscConfig+0x504>)
 80078c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078c6:	6593      	str	r3, [r2, #88]	; 0x58
 80078c8:	4b24      	ldr	r3, [pc, #144]	; (800795c <HAL_RCC_OscConfig+0x504>)
 80078ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078d0:	60bb      	str	r3, [r7, #8]
 80078d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078d4:	2301      	movs	r3, #1
 80078d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078d8:	4b21      	ldr	r3, [pc, #132]	; (8007960 <HAL_RCC_OscConfig+0x508>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d118      	bne.n	8007916 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078e4:	4b1e      	ldr	r3, [pc, #120]	; (8007960 <HAL_RCC_OscConfig+0x508>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a1d      	ldr	r2, [pc, #116]	; (8007960 <HAL_RCC_OscConfig+0x508>)
 80078ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078f0:	f7fe fe5a 	bl	80065a8 <HAL_GetTick>
 80078f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078f6:	e008      	b.n	800790a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078f8:	f7fe fe56 	bl	80065a8 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	2b02      	cmp	r3, #2
 8007904:	d901      	bls.n	800790a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e1b8      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800790a:	4b15      	ldr	r3, [pc, #84]	; (8007960 <HAL_RCC_OscConfig+0x508>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007912:	2b00      	cmp	r3, #0
 8007914:	d0f0      	beq.n	80078f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d108      	bne.n	8007930 <HAL_RCC_OscConfig+0x4d8>
 800791e:	4b0f      	ldr	r3, [pc, #60]	; (800795c <HAL_RCC_OscConfig+0x504>)
 8007920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007924:	4a0d      	ldr	r2, [pc, #52]	; (800795c <HAL_RCC_OscConfig+0x504>)
 8007926:	f043 0301 	orr.w	r3, r3, #1
 800792a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800792e:	e029      	b.n	8007984 <HAL_RCC_OscConfig+0x52c>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	2b05      	cmp	r3, #5
 8007936:	d115      	bne.n	8007964 <HAL_RCC_OscConfig+0x50c>
 8007938:	4b08      	ldr	r3, [pc, #32]	; (800795c <HAL_RCC_OscConfig+0x504>)
 800793a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800793e:	4a07      	ldr	r2, [pc, #28]	; (800795c <HAL_RCC_OscConfig+0x504>)
 8007940:	f043 0304 	orr.w	r3, r3, #4
 8007944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007948:	4b04      	ldr	r3, [pc, #16]	; (800795c <HAL_RCC_OscConfig+0x504>)
 800794a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800794e:	4a03      	ldr	r2, [pc, #12]	; (800795c <HAL_RCC_OscConfig+0x504>)
 8007950:	f043 0301 	orr.w	r3, r3, #1
 8007954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007958:	e014      	b.n	8007984 <HAL_RCC_OscConfig+0x52c>
 800795a:	bf00      	nop
 800795c:	40021000 	.word	0x40021000
 8007960:	40007000 	.word	0x40007000
 8007964:	4b9d      	ldr	r3, [pc, #628]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800796a:	4a9c      	ldr	r2, [pc, #624]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 800796c:	f023 0301 	bic.w	r3, r3, #1
 8007970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007974:	4b99      	ldr	r3, [pc, #612]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800797a:	4a98      	ldr	r2, [pc, #608]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 800797c:	f023 0304 	bic.w	r3, r3, #4
 8007980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d016      	beq.n	80079ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800798c:	f7fe fe0c 	bl	80065a8 <HAL_GetTick>
 8007990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007992:	e00a      	b.n	80079aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007994:	f7fe fe08 	bl	80065a8 <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	f241 3288 	movw	r2, #5000	; 0x1388
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d901      	bls.n	80079aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e168      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079aa:	4b8c      	ldr	r3, [pc, #560]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 80079ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b0:	f003 0302 	and.w	r3, r3, #2
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0ed      	beq.n	8007994 <HAL_RCC_OscConfig+0x53c>
 80079b8:	e015      	b.n	80079e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079ba:	f7fe fdf5 	bl	80065a8 <HAL_GetTick>
 80079be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80079c0:	e00a      	b.n	80079d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079c2:	f7fe fdf1 	bl	80065a8 <HAL_GetTick>
 80079c6:	4602      	mov	r2, r0
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d901      	bls.n	80079d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e151      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80079d8:	4b80      	ldr	r3, [pc, #512]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 80079da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079de:	f003 0302 	and.w	r3, r3, #2
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1ed      	bne.n	80079c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079e6:	7ffb      	ldrb	r3, [r7, #31]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d105      	bne.n	80079f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079ec:	4b7b      	ldr	r3, [pc, #492]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 80079ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f0:	4a7a      	ldr	r2, [pc, #488]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 80079f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0320 	and.w	r3, r3, #32
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d03c      	beq.n	8007a7e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d01c      	beq.n	8007a46 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007a0c:	4b73      	ldr	r3, [pc, #460]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a12:	4a72      	ldr	r2, [pc, #456]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007a14:	f043 0301 	orr.w	r3, r3, #1
 8007a18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a1c:	f7fe fdc4 	bl	80065a8 <HAL_GetTick>
 8007a20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007a22:	e008      	b.n	8007a36 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a24:	f7fe fdc0 	bl	80065a8 <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d901      	bls.n	8007a36 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e122      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007a36:	4b69      	ldr	r3, [pc, #420]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007a38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a3c:	f003 0302 	and.w	r3, r3, #2
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d0ef      	beq.n	8007a24 <HAL_RCC_OscConfig+0x5cc>
 8007a44:	e01b      	b.n	8007a7e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007a46:	4b65      	ldr	r3, [pc, #404]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007a48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a4c:	4a63      	ldr	r2, [pc, #396]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007a4e:	f023 0301 	bic.w	r3, r3, #1
 8007a52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a56:	f7fe fda7 	bl	80065a8 <HAL_GetTick>
 8007a5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007a5c:	e008      	b.n	8007a70 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a5e:	f7fe fda3 	bl	80065a8 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d901      	bls.n	8007a70 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e105      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007a70:	4b5a      	ldr	r3, [pc, #360]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a76:	f003 0302 	and.w	r3, r3, #2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1ef      	bne.n	8007a5e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 80f9 	beq.w	8007c7a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	f040 80cf 	bne.w	8007c30 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007a92:	4b52      	ldr	r3, [pc, #328]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	f003 0203 	and.w	r2, r3, #3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d12c      	bne.n	8007b00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d123      	bne.n	8007b00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d11b      	bne.n	8007b00 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d113      	bne.n	8007b00 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae2:	085b      	lsrs	r3, r3, #1
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d109      	bne.n	8007b00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	085b      	lsrs	r3, r3, #1
 8007af8:	3b01      	subs	r3, #1
 8007afa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d071      	beq.n	8007be4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	2b0c      	cmp	r3, #12
 8007b04:	d068      	beq.n	8007bd8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007b06:	4b35      	ldr	r3, [pc, #212]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d105      	bne.n	8007b1e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007b12:	4b32      	ldr	r3, [pc, #200]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e0ac      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007b22:	4b2e      	ldr	r3, [pc, #184]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a2d      	ldr	r2, [pc, #180]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007b28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b2c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007b2e:	f7fe fd3b 	bl	80065a8 <HAL_GetTick>
 8007b32:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b34:	e008      	b.n	8007b48 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b36:	f7fe fd37 	bl	80065a8 <HAL_GetTick>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d901      	bls.n	8007b48 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e099      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b48:	4b24      	ldr	r3, [pc, #144]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1f0      	bne.n	8007b36 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b54:	4b21      	ldr	r3, [pc, #132]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007b56:	68da      	ldr	r2, [r3, #12]
 8007b58:	4b21      	ldr	r3, [pc, #132]	; (8007be0 <HAL_RCC_OscConfig+0x788>)
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007b64:	3a01      	subs	r2, #1
 8007b66:	0112      	lsls	r2, r2, #4
 8007b68:	4311      	orrs	r1, r2
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007b6e:	0212      	lsls	r2, r2, #8
 8007b70:	4311      	orrs	r1, r2
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007b76:	0852      	lsrs	r2, r2, #1
 8007b78:	3a01      	subs	r2, #1
 8007b7a:	0552      	lsls	r2, r2, #21
 8007b7c:	4311      	orrs	r1, r2
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007b82:	0852      	lsrs	r2, r2, #1
 8007b84:	3a01      	subs	r2, #1
 8007b86:	0652      	lsls	r2, r2, #25
 8007b88:	4311      	orrs	r1, r2
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b8e:	06d2      	lsls	r2, r2, #27
 8007b90:	430a      	orrs	r2, r1
 8007b92:	4912      	ldr	r1, [pc, #72]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007b98:	4b10      	ldr	r3, [pc, #64]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a0f      	ldr	r2, [pc, #60]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ba2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ba4:	4b0d      	ldr	r3, [pc, #52]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	4a0c      	ldr	r2, [pc, #48]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007bb0:	f7fe fcfa 	bl	80065a8 <HAL_GetTick>
 8007bb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bb6:	e008      	b.n	8007bca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bb8:	f7fe fcf6 	bl	80065a8 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d901      	bls.n	8007bca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e058      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bca:	4b04      	ldr	r3, [pc, #16]	; (8007bdc <HAL_RCC_OscConfig+0x784>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0f0      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007bd6:	e050      	b.n	8007c7a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e04f      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
 8007bdc:	40021000 	.word	0x40021000
 8007be0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007be4:	4b27      	ldr	r3, [pc, #156]	; (8007c84 <HAL_RCC_OscConfig+0x82c>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d144      	bne.n	8007c7a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007bf0:	4b24      	ldr	r3, [pc, #144]	; (8007c84 <HAL_RCC_OscConfig+0x82c>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a23      	ldr	r2, [pc, #140]	; (8007c84 <HAL_RCC_OscConfig+0x82c>)
 8007bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bfa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007bfc:	4b21      	ldr	r3, [pc, #132]	; (8007c84 <HAL_RCC_OscConfig+0x82c>)
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	4a20      	ldr	r2, [pc, #128]	; (8007c84 <HAL_RCC_OscConfig+0x82c>)
 8007c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007c08:	f7fe fcce 	bl	80065a8 <HAL_GetTick>
 8007c0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c0e:	e008      	b.n	8007c22 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c10:	f7fe fcca 	bl	80065a8 <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d901      	bls.n	8007c22 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e02c      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c22:	4b18      	ldr	r3, [pc, #96]	; (8007c84 <HAL_RCC_OscConfig+0x82c>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d0f0      	beq.n	8007c10 <HAL_RCC_OscConfig+0x7b8>
 8007c2e:	e024      	b.n	8007c7a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	2b0c      	cmp	r3, #12
 8007c34:	d01f      	beq.n	8007c76 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c36:	4b13      	ldr	r3, [pc, #76]	; (8007c84 <HAL_RCC_OscConfig+0x82c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a12      	ldr	r2, [pc, #72]	; (8007c84 <HAL_RCC_OscConfig+0x82c>)
 8007c3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c42:	f7fe fcb1 	bl	80065a8 <HAL_GetTick>
 8007c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c48:	e008      	b.n	8007c5c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c4a:	f7fe fcad 	bl	80065a8 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d901      	bls.n	8007c5c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e00f      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c5c:	4b09      	ldr	r3, [pc, #36]	; (8007c84 <HAL_RCC_OscConfig+0x82c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1f0      	bne.n	8007c4a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007c68:	4b06      	ldr	r3, [pc, #24]	; (8007c84 <HAL_RCC_OscConfig+0x82c>)
 8007c6a:	68da      	ldr	r2, [r3, #12]
 8007c6c:	4905      	ldr	r1, [pc, #20]	; (8007c84 <HAL_RCC_OscConfig+0x82c>)
 8007c6e:	4b06      	ldr	r3, [pc, #24]	; (8007c88 <HAL_RCC_OscConfig+0x830>)
 8007c70:	4013      	ands	r3, r2
 8007c72:	60cb      	str	r3, [r1, #12]
 8007c74:	e001      	b.n	8007c7a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e000      	b.n	8007c7c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3720      	adds	r7, #32
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	40021000 	.word	0x40021000
 8007c88:	feeefffc 	.word	0xfeeefffc

08007c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d101      	bne.n	8007ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e0e7      	b.n	8007e70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ca0:	4b75      	ldr	r3, [pc, #468]	; (8007e78 <HAL_RCC_ClockConfig+0x1ec>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0307 	and.w	r3, r3, #7
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d910      	bls.n	8007cd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cae:	4b72      	ldr	r3, [pc, #456]	; (8007e78 <HAL_RCC_ClockConfig+0x1ec>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f023 0207 	bic.w	r2, r3, #7
 8007cb6:	4970      	ldr	r1, [pc, #448]	; (8007e78 <HAL_RCC_ClockConfig+0x1ec>)
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cbe:	4b6e      	ldr	r3, [pc, #440]	; (8007e78 <HAL_RCC_ClockConfig+0x1ec>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0307 	and.w	r3, r3, #7
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d001      	beq.n	8007cd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e0cf      	b.n	8007e70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0302 	and.w	r3, r3, #2
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d010      	beq.n	8007cfe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	4b66      	ldr	r3, [pc, #408]	; (8007e7c <HAL_RCC_ClockConfig+0x1f0>)
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d908      	bls.n	8007cfe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cec:	4b63      	ldr	r3, [pc, #396]	; (8007e7c <HAL_RCC_ClockConfig+0x1f0>)
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	4960      	ldr	r1, [pc, #384]	; (8007e7c <HAL_RCC_ClockConfig+0x1f0>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d04c      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d107      	bne.n	8007d22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d12:	4b5a      	ldr	r3, [pc, #360]	; (8007e7c <HAL_RCC_ClockConfig+0x1f0>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d121      	bne.n	8007d62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e0a6      	b.n	8007e70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d107      	bne.n	8007d3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d2a:	4b54      	ldr	r3, [pc, #336]	; (8007e7c <HAL_RCC_ClockConfig+0x1f0>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d115      	bne.n	8007d62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e09a      	b.n	8007e70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d107      	bne.n	8007d52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007d42:	4b4e      	ldr	r3, [pc, #312]	; (8007e7c <HAL_RCC_ClockConfig+0x1f0>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0302 	and.w	r3, r3, #2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d109      	bne.n	8007d62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e08e      	b.n	8007e70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d52:	4b4a      	ldr	r3, [pc, #296]	; (8007e7c <HAL_RCC_ClockConfig+0x1f0>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e086      	b.n	8007e70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007d62:	4b46      	ldr	r3, [pc, #280]	; (8007e7c <HAL_RCC_ClockConfig+0x1f0>)
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f023 0203 	bic.w	r2, r3, #3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	4943      	ldr	r1, [pc, #268]	; (8007e7c <HAL_RCC_ClockConfig+0x1f0>)
 8007d70:	4313      	orrs	r3, r2
 8007d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d74:	f7fe fc18 	bl	80065a8 <HAL_GetTick>
 8007d78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d7a:	e00a      	b.n	8007d92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d7c:	f7fe fc14 	bl	80065a8 <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d901      	bls.n	8007d92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e06e      	b.n	8007e70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d92:	4b3a      	ldr	r3, [pc, #232]	; (8007e7c <HAL_RCC_ClockConfig+0x1f0>)
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f003 020c 	and.w	r2, r3, #12
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d1eb      	bne.n	8007d7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0302 	and.w	r3, r3, #2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d010      	beq.n	8007dd2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689a      	ldr	r2, [r3, #8]
 8007db4:	4b31      	ldr	r3, [pc, #196]	; (8007e7c <HAL_RCC_ClockConfig+0x1f0>)
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d208      	bcs.n	8007dd2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007dc0:	4b2e      	ldr	r3, [pc, #184]	; (8007e7c <HAL_RCC_ClockConfig+0x1f0>)
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	492b      	ldr	r1, [pc, #172]	; (8007e7c <HAL_RCC_ClockConfig+0x1f0>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007dd2:	4b29      	ldr	r3, [pc, #164]	; (8007e78 <HAL_RCC_ClockConfig+0x1ec>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0307 	and.w	r3, r3, #7
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d210      	bcs.n	8007e02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007de0:	4b25      	ldr	r3, [pc, #148]	; (8007e78 <HAL_RCC_ClockConfig+0x1ec>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f023 0207 	bic.w	r2, r3, #7
 8007de8:	4923      	ldr	r1, [pc, #140]	; (8007e78 <HAL_RCC_ClockConfig+0x1ec>)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007df0:	4b21      	ldr	r3, [pc, #132]	; (8007e78 <HAL_RCC_ClockConfig+0x1ec>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0307 	and.w	r3, r3, #7
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d001      	beq.n	8007e02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e036      	b.n	8007e70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0304 	and.w	r3, r3, #4
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d008      	beq.n	8007e20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e0e:	4b1b      	ldr	r3, [pc, #108]	; (8007e7c <HAL_RCC_ClockConfig+0x1f0>)
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	4918      	ldr	r1, [pc, #96]	; (8007e7c <HAL_RCC_ClockConfig+0x1f0>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0308 	and.w	r3, r3, #8
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d009      	beq.n	8007e40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e2c:	4b13      	ldr	r3, [pc, #76]	; (8007e7c <HAL_RCC_ClockConfig+0x1f0>)
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	00db      	lsls	r3, r3, #3
 8007e3a:	4910      	ldr	r1, [pc, #64]	; (8007e7c <HAL_RCC_ClockConfig+0x1f0>)
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007e40:	f000 f824 	bl	8007e8c <HAL_RCC_GetSysClockFreq>
 8007e44:	4602      	mov	r2, r0
 8007e46:	4b0d      	ldr	r3, [pc, #52]	; (8007e7c <HAL_RCC_ClockConfig+0x1f0>)
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	091b      	lsrs	r3, r3, #4
 8007e4c:	f003 030f 	and.w	r3, r3, #15
 8007e50:	490b      	ldr	r1, [pc, #44]	; (8007e80 <HAL_RCC_ClockConfig+0x1f4>)
 8007e52:	5ccb      	ldrb	r3, [r1, r3]
 8007e54:	f003 031f 	and.w	r3, r3, #31
 8007e58:	fa22 f303 	lsr.w	r3, r2, r3
 8007e5c:	4a09      	ldr	r2, [pc, #36]	; (8007e84 <HAL_RCC_ClockConfig+0x1f8>)
 8007e5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007e60:	4b09      	ldr	r3, [pc, #36]	; (8007e88 <HAL_RCC_ClockConfig+0x1fc>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fe fb4f 	bl	8006508 <HAL_InitTick>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8007e6e:	7afb      	ldrb	r3, [r7, #11]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	40022000 	.word	0x40022000
 8007e7c:	40021000 	.word	0x40021000
 8007e80:	0800abf0 	.word	0x0800abf0
 8007e84:	2000000c 	.word	0x2000000c
 8007e88:	2000001c 	.word	0x2000001c

08007e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b089      	sub	sp, #36	; 0x24
 8007e90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	61fb      	str	r3, [r7, #28]
 8007e96:	2300      	movs	r3, #0
 8007e98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e9a:	4b3e      	ldr	r3, [pc, #248]	; (8007f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f003 030c 	and.w	r3, r3, #12
 8007ea2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ea4:	4b3b      	ldr	r3, [pc, #236]	; (8007f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	f003 0303 	and.w	r3, r3, #3
 8007eac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d005      	beq.n	8007ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	2b0c      	cmp	r3, #12
 8007eb8:	d121      	bne.n	8007efe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d11e      	bne.n	8007efe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007ec0:	4b34      	ldr	r3, [pc, #208]	; (8007f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0308 	and.w	r3, r3, #8
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d107      	bne.n	8007edc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007ecc:	4b31      	ldr	r3, [pc, #196]	; (8007f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ed2:	0a1b      	lsrs	r3, r3, #8
 8007ed4:	f003 030f 	and.w	r3, r3, #15
 8007ed8:	61fb      	str	r3, [r7, #28]
 8007eda:	e005      	b.n	8007ee8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007edc:	4b2d      	ldr	r3, [pc, #180]	; (8007f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	091b      	lsrs	r3, r3, #4
 8007ee2:	f003 030f 	and.w	r3, r3, #15
 8007ee6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007ee8:	4a2b      	ldr	r2, [pc, #172]	; (8007f98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ef0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10d      	bne.n	8007f14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007efc:	e00a      	b.n	8007f14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	2b04      	cmp	r3, #4
 8007f02:	d102      	bne.n	8007f0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007f04:	4b25      	ldr	r3, [pc, #148]	; (8007f9c <HAL_RCC_GetSysClockFreq+0x110>)
 8007f06:	61bb      	str	r3, [r7, #24]
 8007f08:	e004      	b.n	8007f14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d101      	bne.n	8007f14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007f10:	4b23      	ldr	r3, [pc, #140]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8007f12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	2b0c      	cmp	r3, #12
 8007f18:	d134      	bne.n	8007f84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f1a:	4b1e      	ldr	r3, [pc, #120]	; (8007f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	f003 0303 	and.w	r3, r3, #3
 8007f22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d003      	beq.n	8007f32 <HAL_RCC_GetSysClockFreq+0xa6>
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	2b03      	cmp	r3, #3
 8007f2e:	d003      	beq.n	8007f38 <HAL_RCC_GetSysClockFreq+0xac>
 8007f30:	e005      	b.n	8007f3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007f32:	4b1a      	ldr	r3, [pc, #104]	; (8007f9c <HAL_RCC_GetSysClockFreq+0x110>)
 8007f34:	617b      	str	r3, [r7, #20]
      break;
 8007f36:	e005      	b.n	8007f44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007f38:	4b19      	ldr	r3, [pc, #100]	; (8007fa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8007f3a:	617b      	str	r3, [r7, #20]
      break;
 8007f3c:	e002      	b.n	8007f44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	617b      	str	r3, [r7, #20]
      break;
 8007f42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f44:	4b13      	ldr	r3, [pc, #76]	; (8007f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	091b      	lsrs	r3, r3, #4
 8007f4a:	f003 0307 	and.w	r3, r3, #7
 8007f4e:	3301      	adds	r3, #1
 8007f50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007f52:	4b10      	ldr	r3, [pc, #64]	; (8007f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	0a1b      	lsrs	r3, r3, #8
 8007f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	fb03 f202 	mul.w	r2, r3, r2
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f6a:	4b0a      	ldr	r3, [pc, #40]	; (8007f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	0e5b      	lsrs	r3, r3, #25
 8007f70:	f003 0303 	and.w	r3, r3, #3
 8007f74:	3301      	adds	r3, #1
 8007f76:	005b      	lsls	r3, r3, #1
 8007f78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007f84:	69bb      	ldr	r3, [r7, #24]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3724      	adds	r7, #36	; 0x24
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	40021000 	.word	0x40021000
 8007f98:	0800ac08 	.word	0x0800ac08
 8007f9c:	00f42400 	.word	0x00f42400
 8007fa0:	007a1200 	.word	0x007a1200

08007fa4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fa8:	4b03      	ldr	r3, [pc, #12]	; (8007fb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007faa:	681b      	ldr	r3, [r3, #0]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	2000000c 	.word	0x2000000c

08007fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007fc0:	f7ff fff0 	bl	8007fa4 <HAL_RCC_GetHCLKFreq>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	4b06      	ldr	r3, [pc, #24]	; (8007fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	0a1b      	lsrs	r3, r3, #8
 8007fcc:	f003 0307 	and.w	r3, r3, #7
 8007fd0:	4904      	ldr	r1, [pc, #16]	; (8007fe4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007fd2:	5ccb      	ldrb	r3, [r1, r3]
 8007fd4:	f003 031f 	and.w	r3, r3, #31
 8007fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	40021000 	.word	0x40021000
 8007fe4:	0800ac00 	.word	0x0800ac00

08007fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007fec:	f7ff ffda 	bl	8007fa4 <HAL_RCC_GetHCLKFreq>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	4b06      	ldr	r3, [pc, #24]	; (800800c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	0adb      	lsrs	r3, r3, #11
 8007ff8:	f003 0307 	and.w	r3, r3, #7
 8007ffc:	4904      	ldr	r1, [pc, #16]	; (8008010 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007ffe:	5ccb      	ldrb	r3, [r1, r3]
 8008000:	f003 031f 	and.w	r3, r3, #31
 8008004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008008:	4618      	mov	r0, r3
 800800a:	bd80      	pop	{r7, pc}
 800800c:	40021000 	.word	0x40021000
 8008010:	0800ac00 	.word	0x0800ac00

08008014 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800801c:	2300      	movs	r3, #0
 800801e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008020:	4b2a      	ldr	r3, [pc, #168]	; (80080cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800802c:	f7ff f9b0 	bl	8007390 <HAL_PWREx_GetVoltageRange>
 8008030:	6178      	str	r0, [r7, #20]
 8008032:	e014      	b.n	800805e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008034:	4b25      	ldr	r3, [pc, #148]	; (80080cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008038:	4a24      	ldr	r2, [pc, #144]	; (80080cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800803a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800803e:	6593      	str	r3, [r2, #88]	; 0x58
 8008040:	4b22      	ldr	r3, [pc, #136]	; (80080cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008048:	60fb      	str	r3, [r7, #12]
 800804a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800804c:	f7ff f9a0 	bl	8007390 <HAL_PWREx_GetVoltageRange>
 8008050:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008052:	4b1e      	ldr	r3, [pc, #120]	; (80080cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008056:	4a1d      	ldr	r2, [pc, #116]	; (80080cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800805c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008064:	d10b      	bne.n	800807e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b80      	cmp	r3, #128	; 0x80
 800806a:	d919      	bls.n	80080a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2ba0      	cmp	r3, #160	; 0xa0
 8008070:	d902      	bls.n	8008078 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008072:	2302      	movs	r3, #2
 8008074:	613b      	str	r3, [r7, #16]
 8008076:	e013      	b.n	80080a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008078:	2301      	movs	r3, #1
 800807a:	613b      	str	r3, [r7, #16]
 800807c:	e010      	b.n	80080a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b80      	cmp	r3, #128	; 0x80
 8008082:	d902      	bls.n	800808a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008084:	2303      	movs	r3, #3
 8008086:	613b      	str	r3, [r7, #16]
 8008088:	e00a      	b.n	80080a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b80      	cmp	r3, #128	; 0x80
 800808e:	d102      	bne.n	8008096 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008090:	2302      	movs	r3, #2
 8008092:	613b      	str	r3, [r7, #16]
 8008094:	e004      	b.n	80080a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2b70      	cmp	r3, #112	; 0x70
 800809a:	d101      	bne.n	80080a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800809c:	2301      	movs	r3, #1
 800809e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80080a0:	4b0b      	ldr	r3, [pc, #44]	; (80080d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f023 0207 	bic.w	r2, r3, #7
 80080a8:	4909      	ldr	r1, [pc, #36]	; (80080d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80080b0:	4b07      	ldr	r3, [pc, #28]	; (80080d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0307 	and.w	r3, r3, #7
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d001      	beq.n	80080c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e000      	b.n	80080c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	40021000 	.word	0x40021000
 80080d0:	40022000 	.word	0x40022000

080080d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80080dc:	2300      	movs	r3, #0
 80080de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80080e0:	2300      	movs	r3, #0
 80080e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d041      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80080f8:	d02a      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80080fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80080fe:	d824      	bhi.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008100:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008104:	d008      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008106:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800810a:	d81e      	bhi.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00a      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008114:	d010      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008116:	e018      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008118:	4b86      	ldr	r3, [pc, #536]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	4a85      	ldr	r2, [pc, #532]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800811e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008122:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008124:	e015      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	3304      	adds	r3, #4
 800812a:	2100      	movs	r1, #0
 800812c:	4618      	mov	r0, r3
 800812e:	f000 facd 	bl	80086cc <RCCEx_PLLSAI1_Config>
 8008132:	4603      	mov	r3, r0
 8008134:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008136:	e00c      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	3320      	adds	r3, #32
 800813c:	2100      	movs	r1, #0
 800813e:	4618      	mov	r0, r3
 8008140:	f000 fbb6 	bl	80088b0 <RCCEx_PLLSAI2_Config>
 8008144:	4603      	mov	r3, r0
 8008146:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008148:	e003      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	74fb      	strb	r3, [r7, #19]
      break;
 800814e:	e000      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008152:	7cfb      	ldrb	r3, [r7, #19]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10b      	bne.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008158:	4b76      	ldr	r3, [pc, #472]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800815a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800815e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008166:	4973      	ldr	r1, [pc, #460]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008168:	4313      	orrs	r3, r2
 800816a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800816e:	e001      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008170:	7cfb      	ldrb	r3, [r7, #19]
 8008172:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d041      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008184:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008188:	d02a      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800818a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800818e:	d824      	bhi.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008190:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008194:	d008      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008196:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800819a:	d81e      	bhi.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00a      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80081a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081a4:	d010      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80081a6:	e018      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80081a8:	4b62      	ldr	r3, [pc, #392]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	4a61      	ldr	r2, [pc, #388]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80081b4:	e015      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	3304      	adds	r3, #4
 80081ba:	2100      	movs	r1, #0
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 fa85 	bl	80086cc <RCCEx_PLLSAI1_Config>
 80081c2:	4603      	mov	r3, r0
 80081c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80081c6:	e00c      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	3320      	adds	r3, #32
 80081cc:	2100      	movs	r1, #0
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 fb6e 	bl	80088b0 <RCCEx_PLLSAI2_Config>
 80081d4:	4603      	mov	r3, r0
 80081d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80081d8:	e003      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	74fb      	strb	r3, [r7, #19]
      break;
 80081de:	e000      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80081e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081e2:	7cfb      	ldrb	r3, [r7, #19]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10b      	bne.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80081e8:	4b52      	ldr	r3, [pc, #328]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081f6:	494f      	ldr	r1, [pc, #316]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80081fe:	e001      	b.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008200:	7cfb      	ldrb	r3, [r7, #19]
 8008202:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 80a0 	beq.w	8008352 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008212:	2300      	movs	r3, #0
 8008214:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008216:	4b47      	ldr	r3, [pc, #284]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800821a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008222:	2301      	movs	r3, #1
 8008224:	e000      	b.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008226:	2300      	movs	r3, #0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00d      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800822c:	4b41      	ldr	r3, [pc, #260]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800822e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008230:	4a40      	ldr	r2, [pc, #256]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008236:	6593      	str	r3, [r2, #88]	; 0x58
 8008238:	4b3e      	ldr	r3, [pc, #248]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800823a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800823c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008240:	60bb      	str	r3, [r7, #8]
 8008242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008244:	2301      	movs	r3, #1
 8008246:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008248:	4b3b      	ldr	r3, [pc, #236]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a3a      	ldr	r2, [pc, #232]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800824e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008252:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008254:	f7fe f9a8 	bl	80065a8 <HAL_GetTick>
 8008258:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800825a:	e009      	b.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800825c:	f7fe f9a4 	bl	80065a8 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	2b02      	cmp	r3, #2
 8008268:	d902      	bls.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	74fb      	strb	r3, [r7, #19]
        break;
 800826e:	e005      	b.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008270:	4b31      	ldr	r3, [pc, #196]	; (8008338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008278:	2b00      	cmp	r3, #0
 800827a:	d0ef      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800827c:	7cfb      	ldrb	r3, [r7, #19]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d15c      	bne.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008282:	4b2c      	ldr	r3, [pc, #176]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800828c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d01f      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	429a      	cmp	r2, r3
 800829e:	d019      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80082a0:	4b24      	ldr	r3, [pc, #144]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80082ac:	4b21      	ldr	r3, [pc, #132]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b2:	4a20      	ldr	r2, [pc, #128]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082bc:	4b1d      	ldr	r3, [pc, #116]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082c2:	4a1c      	ldr	r2, [pc, #112]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80082cc:	4a19      	ldr	r2, [pc, #100]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d016      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082de:	f7fe f963 	bl	80065a8 <HAL_GetTick>
 80082e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082e4:	e00b      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082e6:	f7fe f95f 	bl	80065a8 <HAL_GetTick>
 80082ea:	4602      	mov	r2, r0
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d902      	bls.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	74fb      	strb	r3, [r7, #19]
            break;
 80082fc:	e006      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082fe:	4b0d      	ldr	r3, [pc, #52]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008304:	f003 0302 	and.w	r3, r3, #2
 8008308:	2b00      	cmp	r3, #0
 800830a:	d0ec      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800830c:	7cfb      	ldrb	r3, [r7, #19]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10c      	bne.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008312:	4b08      	ldr	r3, [pc, #32]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008322:	4904      	ldr	r1, [pc, #16]	; (8008334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008324:	4313      	orrs	r3, r2
 8008326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800832a:	e009      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800832c:	7cfb      	ldrb	r3, [r7, #19]
 800832e:	74bb      	strb	r3, [r7, #18]
 8008330:	e006      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008332:	bf00      	nop
 8008334:	40021000 	.word	0x40021000
 8008338:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800833c:	7cfb      	ldrb	r3, [r7, #19]
 800833e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008340:	7c7b      	ldrb	r3, [r7, #17]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d105      	bne.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008346:	4ba6      	ldr	r3, [pc, #664]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800834a:	4aa5      	ldr	r2, [pc, #660]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800834c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008350:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00a      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800835e:	4ba0      	ldr	r3, [pc, #640]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008364:	f023 0203 	bic.w	r2, r3, #3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836c:	499c      	ldr	r1, [pc, #624]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800836e:	4313      	orrs	r3, r2
 8008370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0302 	and.w	r3, r3, #2
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00a      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008380:	4b97      	ldr	r3, [pc, #604]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008386:	f023 020c 	bic.w	r2, r3, #12
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800838e:	4994      	ldr	r1, [pc, #592]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008390:	4313      	orrs	r3, r2
 8008392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0304 	and.w	r3, r3, #4
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00a      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80083a2:	4b8f      	ldr	r3, [pc, #572]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b0:	498b      	ldr	r1, [pc, #556]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0308 	and.w	r3, r3, #8
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00a      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80083c4:	4b86      	ldr	r3, [pc, #536]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d2:	4983      	ldr	r1, [pc, #524]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0310 	and.w	r3, r3, #16
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00a      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80083e6:	4b7e      	ldr	r3, [pc, #504]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083f4:	497a      	ldr	r1, [pc, #488]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0320 	and.w	r3, r3, #32
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00a      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008408:	4b75      	ldr	r3, [pc, #468]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800840a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800840e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008416:	4972      	ldr	r1, [pc, #456]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008418:	4313      	orrs	r3, r2
 800841a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800842a:	4b6d      	ldr	r3, [pc, #436]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800842c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008430:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008438:	4969      	ldr	r1, [pc, #420]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800843a:	4313      	orrs	r3, r2
 800843c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00a      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800844c:	4b64      	ldr	r3, [pc, #400]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800844e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008452:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800845a:	4961      	ldr	r1, [pc, #388]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800845c:	4313      	orrs	r3, r2
 800845e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00a      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800846e:	4b5c      	ldr	r3, [pc, #368]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008474:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800847c:	4958      	ldr	r1, [pc, #352]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800847e:	4313      	orrs	r3, r2
 8008480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00a      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008490:	4b53      	ldr	r3, [pc, #332]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008496:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800849e:	4950      	ldr	r1, [pc, #320]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80084a0:	4313      	orrs	r3, r2
 80084a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00a      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80084b2:	4b4b      	ldr	r3, [pc, #300]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80084b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c0:	4947      	ldr	r1, [pc, #284]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00a      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80084d4:	4b42      	ldr	r3, [pc, #264]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80084d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084da:	f023 0203 	bic.w	r2, r3, #3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084e2:	493f      	ldr	r1, [pc, #252]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d028      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084f6:	4b3a      	ldr	r3, [pc, #232]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80084f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008504:	4936      	ldr	r1, [pc, #216]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008506:	4313      	orrs	r3, r2
 8008508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008514:	d106      	bne.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008516:	4b32      	ldr	r3, [pc, #200]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	4a31      	ldr	r2, [pc, #196]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800851c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008520:	60d3      	str	r3, [r2, #12]
 8008522:	e011      	b.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008528:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800852c:	d10c      	bne.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	3304      	adds	r3, #4
 8008532:	2101      	movs	r1, #1
 8008534:	4618      	mov	r0, r3
 8008536:	f000 f8c9 	bl	80086cc <RCCEx_PLLSAI1_Config>
 800853a:	4603      	mov	r3, r0
 800853c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800853e:	7cfb      	ldrb	r3, [r7, #19]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8008544:	7cfb      	ldrb	r3, [r7, #19]
 8008546:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d028      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008554:	4b22      	ldr	r3, [pc, #136]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800855a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008562:	491f      	ldr	r1, [pc, #124]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008564:	4313      	orrs	r3, r2
 8008566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800856e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008572:	d106      	bne.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008574:	4b1a      	ldr	r3, [pc, #104]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	4a19      	ldr	r2, [pc, #100]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800857a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800857e:	60d3      	str	r3, [r2, #12]
 8008580:	e011      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008586:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800858a:	d10c      	bne.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	3304      	adds	r3, #4
 8008590:	2101      	movs	r1, #1
 8008592:	4618      	mov	r0, r3
 8008594:	f000 f89a 	bl	80086cc <RCCEx_PLLSAI1_Config>
 8008598:	4603      	mov	r3, r0
 800859a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800859c:	7cfb      	ldrb	r3, [r7, #19]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80085a2:	7cfb      	ldrb	r3, [r7, #19]
 80085a4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d02a      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085b2:	4b0b      	ldr	r3, [pc, #44]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80085b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085c0:	4907      	ldr	r1, [pc, #28]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80085c2:	4313      	orrs	r3, r2
 80085c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085d0:	d108      	bne.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085d2:	4b03      	ldr	r3, [pc, #12]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	4a02      	ldr	r2, [pc, #8]	; (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80085d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085dc:	60d3      	str	r3, [r2, #12]
 80085de:	e013      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80085e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085ec:	d10c      	bne.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	3304      	adds	r3, #4
 80085f2:	2101      	movs	r1, #1
 80085f4:	4618      	mov	r0, r3
 80085f6:	f000 f869 	bl	80086cc <RCCEx_PLLSAI1_Config>
 80085fa:	4603      	mov	r3, r0
 80085fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80085fe:	7cfb      	ldrb	r3, [r7, #19]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d001      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8008604:	7cfb      	ldrb	r3, [r7, #19]
 8008606:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d02f      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008614:	4b2c      	ldr	r3, [pc, #176]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800861a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008622:	4929      	ldr	r1, [pc, #164]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008624:	4313      	orrs	r3, r2
 8008626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800862e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008632:	d10d      	bne.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	3304      	adds	r3, #4
 8008638:	2102      	movs	r1, #2
 800863a:	4618      	mov	r0, r3
 800863c:	f000 f846 	bl	80086cc <RCCEx_PLLSAI1_Config>
 8008640:	4603      	mov	r3, r0
 8008642:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008644:	7cfb      	ldrb	r3, [r7, #19]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d014      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800864a:	7cfb      	ldrb	r3, [r7, #19]
 800864c:	74bb      	strb	r3, [r7, #18]
 800864e:	e011      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008658:	d10c      	bne.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	3320      	adds	r3, #32
 800865e:	2102      	movs	r1, #2
 8008660:	4618      	mov	r0, r3
 8008662:	f000 f925 	bl	80088b0 <RCCEx_PLLSAI2_Config>
 8008666:	4603      	mov	r3, r0
 8008668:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800866a:	7cfb      	ldrb	r3, [r7, #19]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8008670:	7cfb      	ldrb	r3, [r7, #19]
 8008672:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00b      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008680:	4b11      	ldr	r3, [pc, #68]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008686:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008690:	490d      	ldr	r1, [pc, #52]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008692:	4313      	orrs	r3, r2
 8008694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00b      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80086a4:	4b08      	ldr	r3, [pc, #32]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80086a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086b4:	4904      	ldr	r1, [pc, #16]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80086b6:	4313      	orrs	r3, r2
 80086b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80086bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3718      	adds	r7, #24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	40021000 	.word	0x40021000

080086cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80086da:	4b74      	ldr	r3, [pc, #464]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	f003 0303 	and.w	r3, r3, #3
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d018      	beq.n	8008718 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80086e6:	4b71      	ldr	r3, [pc, #452]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	f003 0203 	and.w	r2, r3, #3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d10d      	bne.n	8008712 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
       ||
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d009      	beq.n	8008712 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80086fe:	4b6b      	ldr	r3, [pc, #428]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	091b      	lsrs	r3, r3, #4
 8008704:	f003 0307 	and.w	r3, r3, #7
 8008708:	1c5a      	adds	r2, r3, #1
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685b      	ldr	r3, [r3, #4]
       ||
 800870e:	429a      	cmp	r2, r3
 8008710:	d047      	beq.n	80087a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	73fb      	strb	r3, [r7, #15]
 8008716:	e044      	b.n	80087a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b03      	cmp	r3, #3
 800871e:	d018      	beq.n	8008752 <RCCEx_PLLSAI1_Config+0x86>
 8008720:	2b03      	cmp	r3, #3
 8008722:	d825      	bhi.n	8008770 <RCCEx_PLLSAI1_Config+0xa4>
 8008724:	2b01      	cmp	r3, #1
 8008726:	d002      	beq.n	800872e <RCCEx_PLLSAI1_Config+0x62>
 8008728:	2b02      	cmp	r3, #2
 800872a:	d009      	beq.n	8008740 <RCCEx_PLLSAI1_Config+0x74>
 800872c:	e020      	b.n	8008770 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800872e:	4b5f      	ldr	r3, [pc, #380]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b00      	cmp	r3, #0
 8008738:	d11d      	bne.n	8008776 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800873e:	e01a      	b.n	8008776 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008740:	4b5a      	ldr	r3, [pc, #360]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008748:	2b00      	cmp	r3, #0
 800874a:	d116      	bne.n	800877a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008750:	e013      	b.n	800877a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008752:	4b56      	ldr	r3, [pc, #344]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10f      	bne.n	800877e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800875e:	4b53      	ldr	r3, [pc, #332]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d109      	bne.n	800877e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800876e:	e006      	b.n	800877e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	73fb      	strb	r3, [r7, #15]
      break;
 8008774:	e004      	b.n	8008780 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008776:	bf00      	nop
 8008778:	e002      	b.n	8008780 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800877a:	bf00      	nop
 800877c:	e000      	b.n	8008780 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800877e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008780:	7bfb      	ldrb	r3, [r7, #15]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10d      	bne.n	80087a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008786:	4b49      	ldr	r3, [pc, #292]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6819      	ldr	r1, [r3, #0]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	3b01      	subs	r3, #1
 8008798:	011b      	lsls	r3, r3, #4
 800879a:	430b      	orrs	r3, r1
 800879c:	4943      	ldr	r1, [pc, #268]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d17c      	bne.n	80088a2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80087a8:	4b40      	ldr	r3, [pc, #256]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a3f      	ldr	r2, [pc, #252]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80087ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087b4:	f7fd fef8 	bl	80065a8 <HAL_GetTick>
 80087b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80087ba:	e009      	b.n	80087d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80087bc:	f7fd fef4 	bl	80065a8 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d902      	bls.n	80087d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	73fb      	strb	r3, [r7, #15]
        break;
 80087ce:	e005      	b.n	80087dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80087d0:	4b36      	ldr	r3, [pc, #216]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1ef      	bne.n	80087bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d15f      	bne.n	80088a2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d110      	bne.n	800880a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80087e8:	4b30      	ldr	r3, [pc, #192]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80087f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	6892      	ldr	r2, [r2, #8]
 80087f8:	0211      	lsls	r1, r2, #8
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	68d2      	ldr	r2, [r2, #12]
 80087fe:	06d2      	lsls	r2, r2, #27
 8008800:	430a      	orrs	r2, r1
 8008802:	492a      	ldr	r1, [pc, #168]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008804:	4313      	orrs	r3, r2
 8008806:	610b      	str	r3, [r1, #16]
 8008808:	e027      	b.n	800885a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d112      	bne.n	8008836 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008810:	4b26      	ldr	r3, [pc, #152]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008818:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	6892      	ldr	r2, [r2, #8]
 8008820:	0211      	lsls	r1, r2, #8
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	6912      	ldr	r2, [r2, #16]
 8008826:	0852      	lsrs	r2, r2, #1
 8008828:	3a01      	subs	r2, #1
 800882a:	0552      	lsls	r2, r2, #21
 800882c:	430a      	orrs	r2, r1
 800882e:	491f      	ldr	r1, [pc, #124]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008830:	4313      	orrs	r3, r2
 8008832:	610b      	str	r3, [r1, #16]
 8008834:	e011      	b.n	800885a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008836:	4b1d      	ldr	r3, [pc, #116]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800883e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	6892      	ldr	r2, [r2, #8]
 8008846:	0211      	lsls	r1, r2, #8
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	6952      	ldr	r2, [r2, #20]
 800884c:	0852      	lsrs	r2, r2, #1
 800884e:	3a01      	subs	r2, #1
 8008850:	0652      	lsls	r2, r2, #25
 8008852:	430a      	orrs	r2, r1
 8008854:	4915      	ldr	r1, [pc, #84]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008856:	4313      	orrs	r3, r2
 8008858:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800885a:	4b14      	ldr	r3, [pc, #80]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a13      	ldr	r2, [pc, #76]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008860:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008864:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008866:	f7fd fe9f 	bl	80065a8 <HAL_GetTick>
 800886a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800886c:	e009      	b.n	8008882 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800886e:	f7fd fe9b 	bl	80065a8 <HAL_GetTick>
 8008872:	4602      	mov	r2, r0
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	2b02      	cmp	r3, #2
 800887a:	d902      	bls.n	8008882 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	73fb      	strb	r3, [r7, #15]
          break;
 8008880:	e005      	b.n	800888e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008882:	4b0a      	ldr	r3, [pc, #40]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d0ef      	beq.n	800886e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d106      	bne.n	80088a2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008894:	4b05      	ldr	r3, [pc, #20]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8008896:	691a      	ldr	r2, [r3, #16]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	4903      	ldr	r1, [pc, #12]	; (80088ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	40021000 	.word	0x40021000

080088b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80088be:	4b69      	ldr	r3, [pc, #420]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	f003 0303 	and.w	r3, r3, #3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d018      	beq.n	80088fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80088ca:	4b66      	ldr	r3, [pc, #408]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	f003 0203 	and.w	r2, r3, #3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d10d      	bne.n	80088f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
       ||
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d009      	beq.n	80088f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80088e2:	4b60      	ldr	r3, [pc, #384]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	091b      	lsrs	r3, r3, #4
 80088e8:	f003 0307 	and.w	r3, r3, #7
 80088ec:	1c5a      	adds	r2, r3, #1
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
       ||
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d047      	beq.n	8008986 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	73fb      	strb	r3, [r7, #15]
 80088fa:	e044      	b.n	8008986 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b03      	cmp	r3, #3
 8008902:	d018      	beq.n	8008936 <RCCEx_PLLSAI2_Config+0x86>
 8008904:	2b03      	cmp	r3, #3
 8008906:	d825      	bhi.n	8008954 <RCCEx_PLLSAI2_Config+0xa4>
 8008908:	2b01      	cmp	r3, #1
 800890a:	d002      	beq.n	8008912 <RCCEx_PLLSAI2_Config+0x62>
 800890c:	2b02      	cmp	r3, #2
 800890e:	d009      	beq.n	8008924 <RCCEx_PLLSAI2_Config+0x74>
 8008910:	e020      	b.n	8008954 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008912:	4b54      	ldr	r3, [pc, #336]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 0302 	and.w	r3, r3, #2
 800891a:	2b00      	cmp	r3, #0
 800891c:	d11d      	bne.n	800895a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008922:	e01a      	b.n	800895a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008924:	4b4f      	ldr	r3, [pc, #316]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800892c:	2b00      	cmp	r3, #0
 800892e:	d116      	bne.n	800895e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008934:	e013      	b.n	800895e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008936:	4b4b      	ldr	r3, [pc, #300]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10f      	bne.n	8008962 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008942:	4b48      	ldr	r3, [pc, #288]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d109      	bne.n	8008962 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008952:	e006      	b.n	8008962 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	73fb      	strb	r3, [r7, #15]
      break;
 8008958:	e004      	b.n	8008964 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800895a:	bf00      	nop
 800895c:	e002      	b.n	8008964 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800895e:	bf00      	nop
 8008960:	e000      	b.n	8008964 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008962:	bf00      	nop
    }

    if(status == HAL_OK)
 8008964:	7bfb      	ldrb	r3, [r7, #15]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10d      	bne.n	8008986 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800896a:	4b3e      	ldr	r3, [pc, #248]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6819      	ldr	r1, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	3b01      	subs	r3, #1
 800897c:	011b      	lsls	r3, r3, #4
 800897e:	430b      	orrs	r3, r1
 8008980:	4938      	ldr	r1, [pc, #224]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008982:	4313      	orrs	r3, r2
 8008984:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008986:	7bfb      	ldrb	r3, [r7, #15]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d166      	bne.n	8008a5a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800898c:	4b35      	ldr	r3, [pc, #212]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a34      	ldr	r2, [pc, #208]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008998:	f7fd fe06 	bl	80065a8 <HAL_GetTick>
 800899c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800899e:	e009      	b.n	80089b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80089a0:	f7fd fe02 	bl	80065a8 <HAL_GetTick>
 80089a4:	4602      	mov	r2, r0
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d902      	bls.n	80089b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	73fb      	strb	r3, [r7, #15]
        break;
 80089b2:	e005      	b.n	80089c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80089b4:	4b2b      	ldr	r3, [pc, #172]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1ef      	bne.n	80089a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d149      	bne.n	8008a5a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d110      	bne.n	80089ee <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80089cc:	4b25      	ldr	r3, [pc, #148]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 80089ce:	695b      	ldr	r3, [r3, #20]
 80089d0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80089d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	6892      	ldr	r2, [r2, #8]
 80089dc:	0211      	lsls	r1, r2, #8
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	68d2      	ldr	r2, [r2, #12]
 80089e2:	06d2      	lsls	r2, r2, #27
 80089e4:	430a      	orrs	r2, r1
 80089e6:	491f      	ldr	r1, [pc, #124]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 80089e8:	4313      	orrs	r3, r2
 80089ea:	614b      	str	r3, [r1, #20]
 80089ec:	e011      	b.n	8008a12 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80089ee:	4b1d      	ldr	r3, [pc, #116]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80089f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	6892      	ldr	r2, [r2, #8]
 80089fe:	0211      	lsls	r1, r2, #8
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	6912      	ldr	r2, [r2, #16]
 8008a04:	0852      	lsrs	r2, r2, #1
 8008a06:	3a01      	subs	r2, #1
 8008a08:	0652      	lsls	r2, r2, #25
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	4915      	ldr	r1, [pc, #84]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008a12:	4b14      	ldr	r3, [pc, #80]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a13      	ldr	r2, [pc, #76]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a1e:	f7fd fdc3 	bl	80065a8 <HAL_GetTick>
 8008a22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008a24:	e009      	b.n	8008a3a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008a26:	f7fd fdbf 	bl	80065a8 <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d902      	bls.n	8008a3a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	73fb      	strb	r3, [r7, #15]
          break;
 8008a38:	e005      	b.n	8008a46 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008a3a:	4b0a      	ldr	r3, [pc, #40]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d0ef      	beq.n	8008a26 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d106      	bne.n	8008a5a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008a4c:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008a4e:	695a      	ldr	r2, [r3, #20]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	4903      	ldr	r1, [pc, #12]	; (8008a64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008a56:	4313      	orrs	r3, r2
 8008a58:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	40021000 	.word	0x40021000

08008a68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e040      	b.n	8008afc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d106      	bne.n	8008a90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7fd fb12 	bl	80060b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2224      	movs	r2, #36	; 0x24
 8008a94:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f022 0201 	bic.w	r2, r2, #1
 8008aa4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fc6c 	bl	8009384 <UART_SetConfig>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d101      	bne.n	8008ab6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e022      	b.n	8008afc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d002      	beq.n	8008ac4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 ff18 	bl	80098f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	685a      	ldr	r2, [r3, #4]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ad2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689a      	ldr	r2, [r3, #8]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ae2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f042 0201 	orr.w	r2, r2, #1
 8008af2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 ff9f 	bl	8009a38 <UART_CheckIdleState>
 8008afa:	4603      	mov	r3, r0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d101      	bne.n	8008b16 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e02b      	b.n	8008b6e <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2224      	movs	r2, #36	; 0x24
 8008b1a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f022 0201 	bic.w	r2, r2, #1
 8008b2a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2200      	movs	r2, #0
 8008b32:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2200      	movs	r2, #0
 8008b42:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f7fd fb8d 	bl	8006264 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
	...

08008b78 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b08a      	sub	sp, #40	; 0x28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	4613      	mov	r3, r2
 8008b84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b8a:	2b20      	cmp	r3, #32
 8008b8c:	d178      	bne.n	8008c80 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <HAL_UART_Transmit_DMA+0x22>
 8008b94:	88fb      	ldrh	r3, [r7, #6]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d101      	bne.n	8008b9e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e071      	b.n	8008c82 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d101      	bne.n	8008bac <HAL_UART_Transmit_DMA+0x34>
 8008ba8:	2302      	movs	r3, #2
 8008baa:	e06a      	b.n	8008c82 <HAL_UART_Transmit_DMA+0x10a>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	88fa      	ldrh	r2, [r7, #6]
 8008bbe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	88fa      	ldrh	r2, [r7, #6]
 8008bc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2221      	movs	r2, #33	; 0x21
 8008bd6:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d02b      	beq.n	8008c38 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008be4:	4a29      	ldr	r2, [pc, #164]	; (8008c8c <HAL_UART_Transmit_DMA+0x114>)
 8008be6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bec:	4a28      	ldr	r2, [pc, #160]	; (8008c90 <HAL_UART_Transmit_DMA+0x118>)
 8008bee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bf4:	4a27      	ldr	r2, [pc, #156]	; (8008c94 <HAL_UART_Transmit_DMA+0x11c>)
 8008bf6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c08:	4619      	mov	r1, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	3328      	adds	r3, #40	; 0x28
 8008c10:	461a      	mov	r2, r3
 8008c12:	88fb      	ldrh	r3, [r7, #6]
 8008c14:	f7fd ff62 	bl	8006adc <HAL_DMA_Start_IT>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00c      	beq.n	8008c38 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2210      	movs	r2, #16
 8008c22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2220      	movs	r2, #32
 8008c32:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e024      	b.n	8008c82 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2240      	movs	r2, #64	; 0x40
 8008c3e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3308      	adds	r3, #8
 8008c4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	e853 3f00 	ldrex	r3, [r3]
 8008c56:	613b      	str	r3, [r7, #16]
   return(result);
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	3308      	adds	r3, #8
 8008c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c68:	623a      	str	r2, [r7, #32]
 8008c6a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6c:	69f9      	ldr	r1, [r7, #28]
 8008c6e:	6a3a      	ldr	r2, [r7, #32]
 8008c70:	e841 2300 	strex	r3, r2, [r1]
 8008c74:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1e5      	bne.n	8008c48 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	e000      	b.n	8008c82 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008c80:	2302      	movs	r3, #2
  }
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3728      	adds	r7, #40	; 0x28
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	08009eb3 	.word	0x08009eb3
 8008c90:	08009f4d 	.word	0x08009f4d
 8008c94:	0800a0c5 	.word	0x0800a0c5

08008c98 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b08a      	sub	sp, #40	; 0x28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008caa:	2b20      	cmp	r3, #32
 8008cac:	d142      	bne.n	8008d34 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <HAL_UART_Receive_DMA+0x22>
 8008cb4:	88fb      	ldrh	r3, [r7, #6]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d101      	bne.n	8008cbe <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e03b      	b.n	8008d36 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d101      	bne.n	8008ccc <HAL_UART_Receive_DMA+0x34>
 8008cc8:	2302      	movs	r3, #2
 8008cca:	e034      	b.n	8008d36 <HAL_UART_Receive_DMA+0x9e>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a18      	ldr	r2, [pc, #96]	; (8008d40 <HAL_UART_Receive_DMA+0xa8>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d01f      	beq.n	8008d24 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d018      	beq.n	8008d24 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	e853 3f00 	ldrex	r3, [r3]
 8008cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d06:	627b      	str	r3, [r7, #36]	; 0x24
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	623b      	str	r3, [r7, #32]
 8008d12:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d14:	69f9      	ldr	r1, [r7, #28]
 8008d16:	6a3a      	ldr	r2, [r7, #32]
 8008d18:	e841 2300 	strex	r3, r2, [r1]
 8008d1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1e6      	bne.n	8008cf2 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008d24:	88fb      	ldrh	r3, [r7, #6]
 8008d26:	461a      	mov	r2, r3
 8008d28:	68b9      	ldr	r1, [r7, #8]
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f000 ff92 	bl	8009c54 <UART_Start_Receive_DMA>
 8008d30:	4603      	mov	r3, r0
 8008d32:	e000      	b.n	8008d36 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008d34:	2302      	movs	r3, #2
  }
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3728      	adds	r7, #40	; 0x28
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	40008000 	.word	0x40008000

08008d44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b0ba      	sub	sp, #232	; 0xe8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	69db      	ldr	r3, [r3, #28]
 8008d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008d6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008d6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008d72:	4013      	ands	r3, r2
 8008d74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008d78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d115      	bne.n	8008dac <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d84:	f003 0320 	and.w	r3, r3, #32
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00f      	beq.n	8008dac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d90:	f003 0320 	and.w	r3, r3, #32
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d009      	beq.n	8008dac <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 82a6 	beq.w	80092ee <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	4798      	blx	r3
      }
      return;
 8008daa:	e2a0      	b.n	80092ee <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008dac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 8117 	beq.w	8008fe4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008db6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d106      	bne.n	8008dd0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008dc2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008dc6:	4b85      	ldr	r3, [pc, #532]	; (8008fdc <HAL_UART_IRQHandler+0x298>)
 8008dc8:	4013      	ands	r3, r2
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f000 810a 	beq.w	8008fe4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d011      	beq.n	8008e00 <HAL_UART_IRQHandler+0xbc>
 8008ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00b      	beq.n	8008e00 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2201      	movs	r2, #1
 8008dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008df6:	f043 0201 	orr.w	r2, r3, #1
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e04:	f003 0302 	and.w	r3, r3, #2
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d011      	beq.n	8008e30 <HAL_UART_IRQHandler+0xec>
 8008e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00b      	beq.n	8008e30 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2202      	movs	r2, #2
 8008e1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e26:	f043 0204 	orr.w	r2, r3, #4
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e34:	f003 0304 	and.w	r3, r3, #4
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d011      	beq.n	8008e60 <HAL_UART_IRQHandler+0x11c>
 8008e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00b      	beq.n	8008e60 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2204      	movs	r2, #4
 8008e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e56:	f043 0202 	orr.w	r2, r3, #2
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e64:	f003 0308 	and.w	r3, r3, #8
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d017      	beq.n	8008e9c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e70:	f003 0320 	and.w	r3, r3, #32
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d105      	bne.n	8008e84 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e7c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00b      	beq.n	8008e9c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2208      	movs	r2, #8
 8008e8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e92:	f043 0208 	orr.w	r2, r3, #8
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d012      	beq.n	8008ece <HAL_UART_IRQHandler+0x18a>
 8008ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00c      	beq.n	8008ece <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ebc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ec4:	f043 0220 	orr.w	r2, r3, #32
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 820c 	beq.w	80092f2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ede:	f003 0320 	and.w	r3, r3, #32
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00d      	beq.n	8008f02 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eea:	f003 0320 	and.w	r3, r3, #32
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d007      	beq.n	8008f02 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f16:	2b40      	cmp	r3, #64	; 0x40
 8008f18:	d005      	beq.n	8008f26 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d04f      	beq.n	8008fc6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 ff60 	bl	8009dec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f36:	2b40      	cmp	r3, #64	; 0x40
 8008f38:	d141      	bne.n	8008fbe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3308      	adds	r3, #8
 8008f40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f48:	e853 3f00 	ldrex	r3, [r3]
 8008f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3308      	adds	r3, #8
 8008f62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008f66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008f72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f76:	e841 2300 	strex	r3, r2, [r1]
 8008f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008f7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1d9      	bne.n	8008f3a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d013      	beq.n	8008fb6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f92:	4a13      	ldr	r2, [pc, #76]	; (8008fe0 <HAL_UART_IRQHandler+0x29c>)
 8008f94:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fd fe3c 	bl	8006c18 <HAL_DMA_Abort_IT>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d017      	beq.n	8008fd6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008fb0:	4610      	mov	r0, r2
 8008fb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fb4:	e00f      	b.n	8008fd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f9ba 	bl	8009330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fbc:	e00b      	b.n	8008fd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f9b6 	bl	8009330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fc4:	e007      	b.n	8008fd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f9b2 	bl	8009330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008fd4:	e18d      	b.n	80092f2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd6:	bf00      	nop
    return;
 8008fd8:	e18b      	b.n	80092f2 <HAL_UART_IRQHandler+0x5ae>
 8008fda:	bf00      	nop
 8008fdc:	04000120 	.word	0x04000120
 8008fe0:	0800a141 	.word	0x0800a141

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	f040 8146 	bne.w	800927a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ff2:	f003 0310 	and.w	r3, r3, #16
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f000 813f 	beq.w	800927a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009000:	f003 0310 	and.w	r3, r3, #16
 8009004:	2b00      	cmp	r3, #0
 8009006:	f000 8138 	beq.w	800927a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2210      	movs	r2, #16
 8009010:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800901c:	2b40      	cmp	r3, #64	; 0x40
 800901e:	f040 80b4 	bne.w	800918a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800902e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 815f 	beq.w	80092f6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800903e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009042:	429a      	cmp	r2, r3
 8009044:	f080 8157 	bcs.w	80092f6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800904e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 0320 	and.w	r3, r3, #32
 800905e:	2b00      	cmp	r3, #0
 8009060:	f040 8085 	bne.w	800916e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009078:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800907c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009080:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	461a      	mov	r2, r3
 800908a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800908e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009092:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009096:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800909a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80090a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1da      	bne.n	8009064 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3308      	adds	r3, #8
 80090b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090b8:	e853 3f00 	ldrex	r3, [r3]
 80090bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80090be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090c0:	f023 0301 	bic.w	r3, r3, #1
 80090c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3308      	adds	r3, #8
 80090ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80090d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80090d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80090da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80090e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e1      	bne.n	80090ae <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	3308      	adds	r3, #8
 80090f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090f4:	e853 3f00 	ldrex	r3, [r3]
 80090f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80090fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009100:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3308      	adds	r3, #8
 800910a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800910e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009110:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009112:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009114:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009116:	e841 2300 	strex	r3, r2, [r1]
 800911a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800911c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e3      	bne.n	80090ea <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2220      	movs	r2, #32
 8009126:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009136:	e853 3f00 	ldrex	r3, [r3]
 800913a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800913c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800913e:	f023 0310 	bic.w	r3, r3, #16
 8009142:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	461a      	mov	r2, r3
 800914c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009150:	65bb      	str	r3, [r7, #88]	; 0x58
 8009152:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009154:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009156:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009158:	e841 2300 	strex	r3, r2, [r1]
 800915c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800915e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009160:	2b00      	cmp	r3, #0
 8009162:	d1e4      	bne.n	800912e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009168:	4618      	mov	r0, r3
 800916a:	f7fd fd17 	bl	8006b9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800917a:	b29b      	uxth	r3, r3
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	b29b      	uxth	r3, r3
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f8de 	bl	8009344 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009188:	e0b5      	b.n	80092f6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009196:	b29b      	uxth	r3, r3
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 80a7 	beq.w	80092fa <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80091ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f000 80a2 	beq.w	80092fa <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091be:	e853 3f00 	ldrex	r3, [r3]
 80091c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	461a      	mov	r2, r3
 80091d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091d8:	647b      	str	r3, [r7, #68]	; 0x44
 80091da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091e0:	e841 2300 	strex	r3, r2, [r1]
 80091e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1e4      	bne.n	80091b6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	3308      	adds	r3, #8
 80091f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f6:	e853 3f00 	ldrex	r3, [r3]
 80091fa:	623b      	str	r3, [r7, #32]
   return(result);
 80091fc:	6a3b      	ldr	r3, [r7, #32]
 80091fe:	f023 0301 	bic.w	r3, r3, #1
 8009202:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3308      	adds	r3, #8
 800920c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009210:	633a      	str	r2, [r7, #48]	; 0x30
 8009212:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009214:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009218:	e841 2300 	strex	r3, r2, [r1]
 800921c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800921e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1e3      	bne.n	80091ec <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2220      	movs	r2, #32
 8009228:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	e853 3f00 	ldrex	r3, [r3]
 8009242:	60fb      	str	r3, [r7, #12]
   return(result);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f023 0310 	bic.w	r3, r3, #16
 800924a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	461a      	mov	r2, r3
 8009254:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009258:	61fb      	str	r3, [r7, #28]
 800925a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925c:	69b9      	ldr	r1, [r7, #24]
 800925e:	69fa      	ldr	r2, [r7, #28]
 8009260:	e841 2300 	strex	r3, r2, [r1]
 8009264:	617b      	str	r3, [r7, #20]
   return(result);
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e4      	bne.n	8009236 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800926c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f866 	bl	8009344 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009278:	e03f      	b.n	80092fa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800927a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800927e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00e      	beq.n	80092a4 <HAL_UART_IRQHandler+0x560>
 8009286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800928a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800928e:	2b00      	cmp	r3, #0
 8009290:	d008      	beq.n	80092a4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800929a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 ff8f 	bl	800a1c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092a2:	e02d      	b.n	8009300 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80092a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00e      	beq.n	80092ce <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80092b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d008      	beq.n	80092ce <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d01c      	beq.n	80092fe <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	4798      	blx	r3
    }
    return;
 80092cc:	e017      	b.n	80092fe <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80092ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d012      	beq.n	8009300 <HAL_UART_IRQHandler+0x5bc>
 80092da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00c      	beq.n	8009300 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 ff40 	bl	800a16c <UART_EndTransmit_IT>
    return;
 80092ec:	e008      	b.n	8009300 <HAL_UART_IRQHandler+0x5bc>
      return;
 80092ee:	bf00      	nop
 80092f0:	e006      	b.n	8009300 <HAL_UART_IRQHandler+0x5bc>
    return;
 80092f2:	bf00      	nop
 80092f4:	e004      	b.n	8009300 <HAL_UART_IRQHandler+0x5bc>
      return;
 80092f6:	bf00      	nop
 80092f8:	e002      	b.n	8009300 <HAL_UART_IRQHandler+0x5bc>
      return;
 80092fa:	bf00      	nop
 80092fc:	e000      	b.n	8009300 <HAL_UART_IRQHandler+0x5bc>
    return;
 80092fe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009300:	37e8      	adds	r7, #232	; 0xe8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop

08009308 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009368:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800936e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	4313      	orrs	r3, r2
}
 8009376:	4618      	mov	r0, r3
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
	...

08009384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009388:	b08a      	sub	sp, #40	; 0x28
 800938a:	af00      	add	r7, sp, #0
 800938c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800938e:	2300      	movs	r3, #0
 8009390:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	689a      	ldr	r2, [r3, #8]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	431a      	orrs	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	431a      	orrs	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	69db      	ldr	r3, [r3, #28]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	4ba4      	ldr	r3, [pc, #656]	; (8009644 <UART_SetConfig+0x2c0>)
 80093b4:	4013      	ands	r3, r2
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	6812      	ldr	r2, [r2, #0]
 80093ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093bc:	430b      	orrs	r3, r1
 80093be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	68da      	ldr	r2, [r3, #12]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	430a      	orrs	r2, r1
 80093d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a99      	ldr	r2, [pc, #612]	; (8009648 <UART_SetConfig+0x2c4>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d004      	beq.n	80093f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6a1b      	ldr	r3, [r3, #32]
 80093ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ec:	4313      	orrs	r3, r2
 80093ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009400:	430a      	orrs	r2, r1
 8009402:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a90      	ldr	r2, [pc, #576]	; (800964c <UART_SetConfig+0x2c8>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d126      	bne.n	800945c <UART_SetConfig+0xd8>
 800940e:	4b90      	ldr	r3, [pc, #576]	; (8009650 <UART_SetConfig+0x2cc>)
 8009410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009414:	f003 0303 	and.w	r3, r3, #3
 8009418:	2b03      	cmp	r3, #3
 800941a:	d81b      	bhi.n	8009454 <UART_SetConfig+0xd0>
 800941c:	a201      	add	r2, pc, #4	; (adr r2, 8009424 <UART_SetConfig+0xa0>)
 800941e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009422:	bf00      	nop
 8009424:	08009435 	.word	0x08009435
 8009428:	08009445 	.word	0x08009445
 800942c:	0800943d 	.word	0x0800943d
 8009430:	0800944d 	.word	0x0800944d
 8009434:	2301      	movs	r3, #1
 8009436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800943a:	e116      	b.n	800966a <UART_SetConfig+0x2e6>
 800943c:	2302      	movs	r3, #2
 800943e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009442:	e112      	b.n	800966a <UART_SetConfig+0x2e6>
 8009444:	2304      	movs	r3, #4
 8009446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800944a:	e10e      	b.n	800966a <UART_SetConfig+0x2e6>
 800944c:	2308      	movs	r3, #8
 800944e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009452:	e10a      	b.n	800966a <UART_SetConfig+0x2e6>
 8009454:	2310      	movs	r3, #16
 8009456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800945a:	e106      	b.n	800966a <UART_SetConfig+0x2e6>
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a7c      	ldr	r2, [pc, #496]	; (8009654 <UART_SetConfig+0x2d0>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d138      	bne.n	80094d8 <UART_SetConfig+0x154>
 8009466:	4b7a      	ldr	r3, [pc, #488]	; (8009650 <UART_SetConfig+0x2cc>)
 8009468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800946c:	f003 030c 	and.w	r3, r3, #12
 8009470:	2b0c      	cmp	r3, #12
 8009472:	d82d      	bhi.n	80094d0 <UART_SetConfig+0x14c>
 8009474:	a201      	add	r2, pc, #4	; (adr r2, 800947c <UART_SetConfig+0xf8>)
 8009476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947a:	bf00      	nop
 800947c:	080094b1 	.word	0x080094b1
 8009480:	080094d1 	.word	0x080094d1
 8009484:	080094d1 	.word	0x080094d1
 8009488:	080094d1 	.word	0x080094d1
 800948c:	080094c1 	.word	0x080094c1
 8009490:	080094d1 	.word	0x080094d1
 8009494:	080094d1 	.word	0x080094d1
 8009498:	080094d1 	.word	0x080094d1
 800949c:	080094b9 	.word	0x080094b9
 80094a0:	080094d1 	.word	0x080094d1
 80094a4:	080094d1 	.word	0x080094d1
 80094a8:	080094d1 	.word	0x080094d1
 80094ac:	080094c9 	.word	0x080094c9
 80094b0:	2300      	movs	r3, #0
 80094b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094b6:	e0d8      	b.n	800966a <UART_SetConfig+0x2e6>
 80094b8:	2302      	movs	r3, #2
 80094ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094be:	e0d4      	b.n	800966a <UART_SetConfig+0x2e6>
 80094c0:	2304      	movs	r3, #4
 80094c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094c6:	e0d0      	b.n	800966a <UART_SetConfig+0x2e6>
 80094c8:	2308      	movs	r3, #8
 80094ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094ce:	e0cc      	b.n	800966a <UART_SetConfig+0x2e6>
 80094d0:	2310      	movs	r3, #16
 80094d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094d6:	e0c8      	b.n	800966a <UART_SetConfig+0x2e6>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a5e      	ldr	r2, [pc, #376]	; (8009658 <UART_SetConfig+0x2d4>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d125      	bne.n	800952e <UART_SetConfig+0x1aa>
 80094e2:	4b5b      	ldr	r3, [pc, #364]	; (8009650 <UART_SetConfig+0x2cc>)
 80094e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80094ec:	2b30      	cmp	r3, #48	; 0x30
 80094ee:	d016      	beq.n	800951e <UART_SetConfig+0x19a>
 80094f0:	2b30      	cmp	r3, #48	; 0x30
 80094f2:	d818      	bhi.n	8009526 <UART_SetConfig+0x1a2>
 80094f4:	2b20      	cmp	r3, #32
 80094f6:	d00a      	beq.n	800950e <UART_SetConfig+0x18a>
 80094f8:	2b20      	cmp	r3, #32
 80094fa:	d814      	bhi.n	8009526 <UART_SetConfig+0x1a2>
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d002      	beq.n	8009506 <UART_SetConfig+0x182>
 8009500:	2b10      	cmp	r3, #16
 8009502:	d008      	beq.n	8009516 <UART_SetConfig+0x192>
 8009504:	e00f      	b.n	8009526 <UART_SetConfig+0x1a2>
 8009506:	2300      	movs	r3, #0
 8009508:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800950c:	e0ad      	b.n	800966a <UART_SetConfig+0x2e6>
 800950e:	2302      	movs	r3, #2
 8009510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009514:	e0a9      	b.n	800966a <UART_SetConfig+0x2e6>
 8009516:	2304      	movs	r3, #4
 8009518:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800951c:	e0a5      	b.n	800966a <UART_SetConfig+0x2e6>
 800951e:	2308      	movs	r3, #8
 8009520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009524:	e0a1      	b.n	800966a <UART_SetConfig+0x2e6>
 8009526:	2310      	movs	r3, #16
 8009528:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800952c:	e09d      	b.n	800966a <UART_SetConfig+0x2e6>
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a4a      	ldr	r2, [pc, #296]	; (800965c <UART_SetConfig+0x2d8>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d125      	bne.n	8009584 <UART_SetConfig+0x200>
 8009538:	4b45      	ldr	r3, [pc, #276]	; (8009650 <UART_SetConfig+0x2cc>)
 800953a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800953e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009542:	2bc0      	cmp	r3, #192	; 0xc0
 8009544:	d016      	beq.n	8009574 <UART_SetConfig+0x1f0>
 8009546:	2bc0      	cmp	r3, #192	; 0xc0
 8009548:	d818      	bhi.n	800957c <UART_SetConfig+0x1f8>
 800954a:	2b80      	cmp	r3, #128	; 0x80
 800954c:	d00a      	beq.n	8009564 <UART_SetConfig+0x1e0>
 800954e:	2b80      	cmp	r3, #128	; 0x80
 8009550:	d814      	bhi.n	800957c <UART_SetConfig+0x1f8>
 8009552:	2b00      	cmp	r3, #0
 8009554:	d002      	beq.n	800955c <UART_SetConfig+0x1d8>
 8009556:	2b40      	cmp	r3, #64	; 0x40
 8009558:	d008      	beq.n	800956c <UART_SetConfig+0x1e8>
 800955a:	e00f      	b.n	800957c <UART_SetConfig+0x1f8>
 800955c:	2300      	movs	r3, #0
 800955e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009562:	e082      	b.n	800966a <UART_SetConfig+0x2e6>
 8009564:	2302      	movs	r3, #2
 8009566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800956a:	e07e      	b.n	800966a <UART_SetConfig+0x2e6>
 800956c:	2304      	movs	r3, #4
 800956e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009572:	e07a      	b.n	800966a <UART_SetConfig+0x2e6>
 8009574:	2308      	movs	r3, #8
 8009576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800957a:	e076      	b.n	800966a <UART_SetConfig+0x2e6>
 800957c:	2310      	movs	r3, #16
 800957e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009582:	e072      	b.n	800966a <UART_SetConfig+0x2e6>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a35      	ldr	r2, [pc, #212]	; (8009660 <UART_SetConfig+0x2dc>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d12a      	bne.n	80095e4 <UART_SetConfig+0x260>
 800958e:	4b30      	ldr	r3, [pc, #192]	; (8009650 <UART_SetConfig+0x2cc>)
 8009590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800959c:	d01a      	beq.n	80095d4 <UART_SetConfig+0x250>
 800959e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095a2:	d81b      	bhi.n	80095dc <UART_SetConfig+0x258>
 80095a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095a8:	d00c      	beq.n	80095c4 <UART_SetConfig+0x240>
 80095aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095ae:	d815      	bhi.n	80095dc <UART_SetConfig+0x258>
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d003      	beq.n	80095bc <UART_SetConfig+0x238>
 80095b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095b8:	d008      	beq.n	80095cc <UART_SetConfig+0x248>
 80095ba:	e00f      	b.n	80095dc <UART_SetConfig+0x258>
 80095bc:	2300      	movs	r3, #0
 80095be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095c2:	e052      	b.n	800966a <UART_SetConfig+0x2e6>
 80095c4:	2302      	movs	r3, #2
 80095c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095ca:	e04e      	b.n	800966a <UART_SetConfig+0x2e6>
 80095cc:	2304      	movs	r3, #4
 80095ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095d2:	e04a      	b.n	800966a <UART_SetConfig+0x2e6>
 80095d4:	2308      	movs	r3, #8
 80095d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095da:	e046      	b.n	800966a <UART_SetConfig+0x2e6>
 80095dc:	2310      	movs	r3, #16
 80095de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095e2:	e042      	b.n	800966a <UART_SetConfig+0x2e6>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a17      	ldr	r2, [pc, #92]	; (8009648 <UART_SetConfig+0x2c4>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d13a      	bne.n	8009664 <UART_SetConfig+0x2e0>
 80095ee:	4b18      	ldr	r3, [pc, #96]	; (8009650 <UART_SetConfig+0x2cc>)
 80095f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80095f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80095fc:	d01a      	beq.n	8009634 <UART_SetConfig+0x2b0>
 80095fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009602:	d81b      	bhi.n	800963c <UART_SetConfig+0x2b8>
 8009604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009608:	d00c      	beq.n	8009624 <UART_SetConfig+0x2a0>
 800960a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800960e:	d815      	bhi.n	800963c <UART_SetConfig+0x2b8>
 8009610:	2b00      	cmp	r3, #0
 8009612:	d003      	beq.n	800961c <UART_SetConfig+0x298>
 8009614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009618:	d008      	beq.n	800962c <UART_SetConfig+0x2a8>
 800961a:	e00f      	b.n	800963c <UART_SetConfig+0x2b8>
 800961c:	2300      	movs	r3, #0
 800961e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009622:	e022      	b.n	800966a <UART_SetConfig+0x2e6>
 8009624:	2302      	movs	r3, #2
 8009626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800962a:	e01e      	b.n	800966a <UART_SetConfig+0x2e6>
 800962c:	2304      	movs	r3, #4
 800962e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009632:	e01a      	b.n	800966a <UART_SetConfig+0x2e6>
 8009634:	2308      	movs	r3, #8
 8009636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800963a:	e016      	b.n	800966a <UART_SetConfig+0x2e6>
 800963c:	2310      	movs	r3, #16
 800963e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009642:	e012      	b.n	800966a <UART_SetConfig+0x2e6>
 8009644:	efff69f3 	.word	0xefff69f3
 8009648:	40008000 	.word	0x40008000
 800964c:	40013800 	.word	0x40013800
 8009650:	40021000 	.word	0x40021000
 8009654:	40004400 	.word	0x40004400
 8009658:	40004800 	.word	0x40004800
 800965c:	40004c00 	.word	0x40004c00
 8009660:	40005000 	.word	0x40005000
 8009664:	2310      	movs	r3, #16
 8009666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a9f      	ldr	r2, [pc, #636]	; (80098ec <UART_SetConfig+0x568>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d17a      	bne.n	800976a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009674:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009678:	2b08      	cmp	r3, #8
 800967a:	d824      	bhi.n	80096c6 <UART_SetConfig+0x342>
 800967c:	a201      	add	r2, pc, #4	; (adr r2, 8009684 <UART_SetConfig+0x300>)
 800967e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009682:	bf00      	nop
 8009684:	080096a9 	.word	0x080096a9
 8009688:	080096c7 	.word	0x080096c7
 800968c:	080096b1 	.word	0x080096b1
 8009690:	080096c7 	.word	0x080096c7
 8009694:	080096b7 	.word	0x080096b7
 8009698:	080096c7 	.word	0x080096c7
 800969c:	080096c7 	.word	0x080096c7
 80096a0:	080096c7 	.word	0x080096c7
 80096a4:	080096bf 	.word	0x080096bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096a8:	f7fe fc88 	bl	8007fbc <HAL_RCC_GetPCLK1Freq>
 80096ac:	61f8      	str	r0, [r7, #28]
        break;
 80096ae:	e010      	b.n	80096d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096b0:	4b8f      	ldr	r3, [pc, #572]	; (80098f0 <UART_SetConfig+0x56c>)
 80096b2:	61fb      	str	r3, [r7, #28]
        break;
 80096b4:	e00d      	b.n	80096d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096b6:	f7fe fbe9 	bl	8007e8c <HAL_RCC_GetSysClockFreq>
 80096ba:	61f8      	str	r0, [r7, #28]
        break;
 80096bc:	e009      	b.n	80096d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096c2:	61fb      	str	r3, [r7, #28]
        break;
 80096c4:	e005      	b.n	80096d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80096c6:	2300      	movs	r3, #0
 80096c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80096d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f000 80fb 	beq.w	80098d0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	685a      	ldr	r2, [r3, #4]
 80096de:	4613      	mov	r3, r2
 80096e0:	005b      	lsls	r3, r3, #1
 80096e2:	4413      	add	r3, r2
 80096e4:	69fa      	ldr	r2, [r7, #28]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d305      	bcc.n	80096f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80096f0:	69fa      	ldr	r2, [r7, #28]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d903      	bls.n	80096fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80096fc:	e0e8      	b.n	80098d0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	2200      	movs	r2, #0
 8009702:	461c      	mov	r4, r3
 8009704:	4615      	mov	r5, r2
 8009706:	f04f 0200 	mov.w	r2, #0
 800970a:	f04f 0300 	mov.w	r3, #0
 800970e:	022b      	lsls	r3, r5, #8
 8009710:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009714:	0222      	lsls	r2, r4, #8
 8009716:	68f9      	ldr	r1, [r7, #12]
 8009718:	6849      	ldr	r1, [r1, #4]
 800971a:	0849      	lsrs	r1, r1, #1
 800971c:	2000      	movs	r0, #0
 800971e:	4688      	mov	r8, r1
 8009720:	4681      	mov	r9, r0
 8009722:	eb12 0a08 	adds.w	sl, r2, r8
 8009726:	eb43 0b09 	adc.w	fp, r3, r9
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	603b      	str	r3, [r7, #0]
 8009732:	607a      	str	r2, [r7, #4]
 8009734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009738:	4650      	mov	r0, sl
 800973a:	4659      	mov	r1, fp
 800973c:	f7f6 fdb0 	bl	80002a0 <__aeabi_uldivmod>
 8009740:	4602      	mov	r2, r0
 8009742:	460b      	mov	r3, r1
 8009744:	4613      	mov	r3, r2
 8009746:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800974e:	d308      	bcc.n	8009762 <UART_SetConfig+0x3de>
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009756:	d204      	bcs.n	8009762 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	69ba      	ldr	r2, [r7, #24]
 800975e:	60da      	str	r2, [r3, #12]
 8009760:	e0b6      	b.n	80098d0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009768:	e0b2      	b.n	80098d0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009772:	d15e      	bne.n	8009832 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009774:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009778:	2b08      	cmp	r3, #8
 800977a:	d828      	bhi.n	80097ce <UART_SetConfig+0x44a>
 800977c:	a201      	add	r2, pc, #4	; (adr r2, 8009784 <UART_SetConfig+0x400>)
 800977e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009782:	bf00      	nop
 8009784:	080097a9 	.word	0x080097a9
 8009788:	080097b1 	.word	0x080097b1
 800978c:	080097b9 	.word	0x080097b9
 8009790:	080097cf 	.word	0x080097cf
 8009794:	080097bf 	.word	0x080097bf
 8009798:	080097cf 	.word	0x080097cf
 800979c:	080097cf 	.word	0x080097cf
 80097a0:	080097cf 	.word	0x080097cf
 80097a4:	080097c7 	.word	0x080097c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097a8:	f7fe fc08 	bl	8007fbc <HAL_RCC_GetPCLK1Freq>
 80097ac:	61f8      	str	r0, [r7, #28]
        break;
 80097ae:	e014      	b.n	80097da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097b0:	f7fe fc1a 	bl	8007fe8 <HAL_RCC_GetPCLK2Freq>
 80097b4:	61f8      	str	r0, [r7, #28]
        break;
 80097b6:	e010      	b.n	80097da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097b8:	4b4d      	ldr	r3, [pc, #308]	; (80098f0 <UART_SetConfig+0x56c>)
 80097ba:	61fb      	str	r3, [r7, #28]
        break;
 80097bc:	e00d      	b.n	80097da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097be:	f7fe fb65 	bl	8007e8c <HAL_RCC_GetSysClockFreq>
 80097c2:	61f8      	str	r0, [r7, #28]
        break;
 80097c4:	e009      	b.n	80097da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097ca:	61fb      	str	r3, [r7, #28]
        break;
 80097cc:	e005      	b.n	80097da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80097ce:	2300      	movs	r3, #0
 80097d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80097d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d077      	beq.n	80098d0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	005a      	lsls	r2, r3, #1
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	085b      	lsrs	r3, r3, #1
 80097ea:	441a      	add	r2, r3
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80097f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	2b0f      	cmp	r3, #15
 80097fa:	d916      	bls.n	800982a <UART_SetConfig+0x4a6>
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009802:	d212      	bcs.n	800982a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	b29b      	uxth	r3, r3
 8009808:	f023 030f 	bic.w	r3, r3, #15
 800980c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	085b      	lsrs	r3, r3, #1
 8009812:	b29b      	uxth	r3, r3
 8009814:	f003 0307 	and.w	r3, r3, #7
 8009818:	b29a      	uxth	r2, r3
 800981a:	8afb      	ldrh	r3, [r7, #22]
 800981c:	4313      	orrs	r3, r2
 800981e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	8afa      	ldrh	r2, [r7, #22]
 8009826:	60da      	str	r2, [r3, #12]
 8009828:	e052      	b.n	80098d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009830:	e04e      	b.n	80098d0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009832:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009836:	2b08      	cmp	r3, #8
 8009838:	d827      	bhi.n	800988a <UART_SetConfig+0x506>
 800983a:	a201      	add	r2, pc, #4	; (adr r2, 8009840 <UART_SetConfig+0x4bc>)
 800983c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009840:	08009865 	.word	0x08009865
 8009844:	0800986d 	.word	0x0800986d
 8009848:	08009875 	.word	0x08009875
 800984c:	0800988b 	.word	0x0800988b
 8009850:	0800987b 	.word	0x0800987b
 8009854:	0800988b 	.word	0x0800988b
 8009858:	0800988b 	.word	0x0800988b
 800985c:	0800988b 	.word	0x0800988b
 8009860:	08009883 	.word	0x08009883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009864:	f7fe fbaa 	bl	8007fbc <HAL_RCC_GetPCLK1Freq>
 8009868:	61f8      	str	r0, [r7, #28]
        break;
 800986a:	e014      	b.n	8009896 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800986c:	f7fe fbbc 	bl	8007fe8 <HAL_RCC_GetPCLK2Freq>
 8009870:	61f8      	str	r0, [r7, #28]
        break;
 8009872:	e010      	b.n	8009896 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009874:	4b1e      	ldr	r3, [pc, #120]	; (80098f0 <UART_SetConfig+0x56c>)
 8009876:	61fb      	str	r3, [r7, #28]
        break;
 8009878:	e00d      	b.n	8009896 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800987a:	f7fe fb07 	bl	8007e8c <HAL_RCC_GetSysClockFreq>
 800987e:	61f8      	str	r0, [r7, #28]
        break;
 8009880:	e009      	b.n	8009896 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009886:	61fb      	str	r3, [r7, #28]
        break;
 8009888:	e005      	b.n	8009896 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800988a:	2300      	movs	r3, #0
 800988c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009894:	bf00      	nop
    }

    if (pclk != 0U)
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d019      	beq.n	80098d0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	085a      	lsrs	r2, r3, #1
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	441a      	add	r2, r3
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	2b0f      	cmp	r3, #15
 80098b4:	d909      	bls.n	80098ca <UART_SetConfig+0x546>
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098bc:	d205      	bcs.n	80098ca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	b29a      	uxth	r2, r3
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	60da      	str	r2, [r3, #12]
 80098c8:	e002      	b.n	80098d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2200      	movs	r2, #0
 80098d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2200      	movs	r2, #0
 80098da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80098dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3728      	adds	r7, #40	; 0x28
 80098e4:	46bd      	mov	sp, r7
 80098e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098ea:	bf00      	nop
 80098ec:	40008000 	.word	0x40008000
 80098f0:	00f42400 	.word	0x00f42400

080098f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009900:	f003 0301 	and.w	r3, r3, #1
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00a      	beq.n	800991e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	430a      	orrs	r2, r1
 800991c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009922:	f003 0302 	and.w	r3, r3, #2
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00a      	beq.n	8009940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	430a      	orrs	r2, r1
 800993e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009944:	f003 0304 	and.w	r3, r3, #4
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00a      	beq.n	8009962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	430a      	orrs	r2, r1
 8009960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009966:	f003 0308 	and.w	r3, r3, #8
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00a      	beq.n	8009984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	430a      	orrs	r2, r1
 8009982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009988:	f003 0310 	and.w	r3, r3, #16
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00a      	beq.n	80099a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	430a      	orrs	r2, r1
 80099a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099aa:	f003 0320 	and.w	r3, r3, #32
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00a      	beq.n	80099c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	430a      	orrs	r2, r1
 80099c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d01a      	beq.n	8009a0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	430a      	orrs	r2, r1
 80099e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099f2:	d10a      	bne.n	8009a0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	430a      	orrs	r2, r1
 8009a08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00a      	beq.n	8009a2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	430a      	orrs	r2, r1
 8009a2a:	605a      	str	r2, [r3, #4]
  }
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b086      	sub	sp, #24
 8009a3c:	af02      	add	r7, sp, #8
 8009a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a48:	f7fc fdae 	bl	80065a8 <HAL_GetTick>
 8009a4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f003 0308 	and.w	r3, r3, #8
 8009a58:	2b08      	cmp	r3, #8
 8009a5a:	d10e      	bne.n	8009a7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f82d 	bl	8009aca <UART_WaitOnFlagUntilTimeout>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d001      	beq.n	8009a7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e023      	b.n	8009ac2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 0304 	and.w	r3, r3, #4
 8009a84:	2b04      	cmp	r3, #4
 8009a86:	d10e      	bne.n	8009aa6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f817 	bl	8009aca <UART_WaitOnFlagUntilTimeout>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d001      	beq.n	8009aa6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e00d      	b.n	8009ac2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2220      	movs	r2, #32
 8009aaa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2220      	movs	r2, #32
 8009ab0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b09c      	sub	sp, #112	; 0x70
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	60f8      	str	r0, [r7, #12]
 8009ad2:	60b9      	str	r1, [r7, #8]
 8009ad4:	603b      	str	r3, [r7, #0]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ada:	e0a5      	b.n	8009c28 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae2:	f000 80a1 	beq.w	8009c28 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ae6:	f7fc fd5f 	bl	80065a8 <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d302      	bcc.n	8009afc <UART_WaitOnFlagUntilTimeout+0x32>
 8009af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d13e      	bne.n	8009b7a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b04:	e853 3f00 	ldrex	r3, [r3]
 8009b08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b10:	667b      	str	r3, [r7, #100]	; 0x64
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	461a      	mov	r2, r3
 8009b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b1c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009b22:	e841 2300 	strex	r3, r2, [r1]
 8009b26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1e6      	bne.n	8009afc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	3308      	adds	r3, #8
 8009b34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b38:	e853 3f00 	ldrex	r3, [r3]
 8009b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b40:	f023 0301 	bic.w	r3, r3, #1
 8009b44:	663b      	str	r3, [r7, #96]	; 0x60
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	3308      	adds	r3, #8
 8009b4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009b50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b56:	e841 2300 	strex	r3, r2, [r1]
 8009b5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1e5      	bne.n	8009b2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2220      	movs	r2, #32
 8009b66:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	e067      	b.n	8009c4a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0304 	and.w	r3, r3, #4
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d04f      	beq.n	8009c28 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	69db      	ldr	r3, [r3, #28]
 8009b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b96:	d147      	bne.n	8009c28 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ba0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009baa:	e853 3f00 	ldrex	r3, [r3]
 8009bae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009bb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8009bc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bc8:	e841 2300 	strex	r3, r2, [r1]
 8009bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1e6      	bne.n	8009ba2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	3308      	adds	r3, #8
 8009bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	e853 3f00 	ldrex	r3, [r3]
 8009be2:	613b      	str	r3, [r7, #16]
   return(result);
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	f023 0301 	bic.w	r3, r3, #1
 8009bea:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009bf4:	623a      	str	r2, [r7, #32]
 8009bf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf8:	69f9      	ldr	r1, [r7, #28]
 8009bfa:	6a3a      	ldr	r2, [r7, #32]
 8009bfc:	e841 2300 	strex	r3, r2, [r1]
 8009c00:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1e5      	bne.n	8009bd4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2220      	movs	r2, #32
 8009c0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2220      	movs	r2, #32
 8009c12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2220      	movs	r2, #32
 8009c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009c24:	2303      	movs	r3, #3
 8009c26:	e010      	b.n	8009c4a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	69da      	ldr	r2, [r3, #28]
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	4013      	ands	r3, r2
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	bf0c      	ite	eq
 8009c38:	2301      	moveq	r3, #1
 8009c3a:	2300      	movne	r3, #0
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	461a      	mov	r2, r3
 8009c40:	79fb      	ldrb	r3, [r7, #7]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	f43f af4a 	beq.w	8009adc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3770      	adds	r7, #112	; 0x70
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
	...

08009c54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b096      	sub	sp, #88	; 0x58
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	68ba      	ldr	r2, [r7, #8]
 8009c66:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	88fa      	ldrh	r2, [r7, #6]
 8009c6c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2222      	movs	r2, #34	; 0x22
 8009c7c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d02b      	beq.n	8009cde <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c8a:	4a42      	ldr	r2, [pc, #264]	; (8009d94 <UART_Start_Receive_DMA+0x140>)
 8009c8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c92:	4a41      	ldr	r2, [pc, #260]	; (8009d98 <UART_Start_Receive_DMA+0x144>)
 8009c94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c9a:	4a40      	ldr	r2, [pc, #256]	; (8009d9c <UART_Start_Receive_DMA+0x148>)
 8009c9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3324      	adds	r3, #36	; 0x24
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	88fb      	ldrh	r3, [r7, #6]
 8009cba:	f7fc ff0f 	bl	8006adc <HAL_DMA_Start_IT>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00c      	beq.n	8009cde <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2210      	movs	r2, #16
 8009cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2220      	movs	r2, #32
 8009cd8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e055      	b.n	8009d8a <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d018      	beq.n	8009d20 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf6:	e853 3f00 	ldrex	r3, [r3]
 8009cfa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d02:	657b      	str	r3, [r7, #84]	; 0x54
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d0e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d10:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d14:	e841 2300 	strex	r3, r2, [r1]
 8009d18:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1e6      	bne.n	8009cee <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	3308      	adds	r3, #8
 8009d26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2a:	e853 3f00 	ldrex	r3, [r3]
 8009d2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	f043 0301 	orr.w	r3, r3, #1
 8009d36:	653b      	str	r3, [r7, #80]	; 0x50
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	3308      	adds	r3, #8
 8009d3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009d40:	637a      	str	r2, [r7, #52]	; 0x34
 8009d42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d48:	e841 2300 	strex	r3, r2, [r1]
 8009d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d1e5      	bne.n	8009d20 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	3308      	adds	r3, #8
 8009d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	e853 3f00 	ldrex	r3, [r3]
 8009d62:	613b      	str	r3, [r7, #16]
   return(result);
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	3308      	adds	r3, #8
 8009d72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d74:	623a      	str	r2, [r7, #32]
 8009d76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d78:	69f9      	ldr	r1, [r7, #28]
 8009d7a:	6a3a      	ldr	r2, [r7, #32]
 8009d7c:	e841 2300 	strex	r3, r2, [r1]
 8009d80:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1e5      	bne.n	8009d54 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3758      	adds	r7, #88	; 0x58
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	08009f69 	.word	0x08009f69
 8009d98:	0800a08d 	.word	0x0800a08d
 8009d9c:	0800a0c5 	.word	0x0800a0c5

08009da0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b089      	sub	sp, #36	; 0x24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	e853 3f00 	ldrex	r3, [r3]
 8009db4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009dbc:	61fb      	str	r3, [r7, #28]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	61bb      	str	r3, [r7, #24]
 8009dc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dca:	6979      	ldr	r1, [r7, #20]
 8009dcc:	69ba      	ldr	r2, [r7, #24]
 8009dce:	e841 2300 	strex	r3, r2, [r1]
 8009dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1e6      	bne.n	8009da8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2220      	movs	r2, #32
 8009dde:	679a      	str	r2, [r3, #120]	; 0x78
}
 8009de0:	bf00      	nop
 8009de2:	3724      	adds	r7, #36	; 0x24
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b095      	sub	sp, #84	; 0x54
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dfc:	e853 3f00 	ldrex	r3, [r3]
 8009e00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e12:	643b      	str	r3, [r7, #64]	; 0x40
 8009e14:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e1a:	e841 2300 	strex	r3, r2, [r1]
 8009e1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1e6      	bne.n	8009df4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	3308      	adds	r3, #8
 8009e2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2e:	6a3b      	ldr	r3, [r7, #32]
 8009e30:	e853 3f00 	ldrex	r3, [r3]
 8009e34:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	f023 0301 	bic.w	r3, r3, #1
 8009e3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	3308      	adds	r3, #8
 8009e44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e4e:	e841 2300 	strex	r3, r2, [r1]
 8009e52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1e5      	bne.n	8009e26 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d118      	bne.n	8009e94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	e853 3f00 	ldrex	r3, [r3]
 8009e6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	f023 0310 	bic.w	r3, r3, #16
 8009e76:	647b      	str	r3, [r7, #68]	; 0x44
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e80:	61bb      	str	r3, [r7, #24]
 8009e82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e84:	6979      	ldr	r1, [r7, #20]
 8009e86:	69ba      	ldr	r2, [r7, #24]
 8009e88:	e841 2300 	strex	r3, r2, [r1]
 8009e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d1e6      	bne.n	8009e62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2220      	movs	r2, #32
 8009e98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009ea6:	bf00      	nop
 8009ea8:	3754      	adds	r7, #84	; 0x54
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b090      	sub	sp, #64	; 0x40
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ebe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f003 0320 	and.w	r3, r3, #32
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d137      	bne.n	8009f3e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	3308      	adds	r3, #8
 8009edc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee0:	e853 3f00 	ldrex	r3, [r3]
 8009ee4:	623b      	str	r3, [r7, #32]
   return(result);
 8009ee6:	6a3b      	ldr	r3, [r7, #32]
 8009ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009eec:	63bb      	str	r3, [r7, #56]	; 0x38
 8009eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	3308      	adds	r3, #8
 8009ef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ef6:	633a      	str	r2, [r7, #48]	; 0x30
 8009ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009efe:	e841 2300 	strex	r3, r2, [r1]
 8009f02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d1e5      	bne.n	8009ed6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	e853 3f00 	ldrex	r3, [r3]
 8009f16:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8009f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	461a      	mov	r2, r3
 8009f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f28:	61fb      	str	r3, [r7, #28]
 8009f2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2c:	69b9      	ldr	r1, [r7, #24]
 8009f2e:	69fa      	ldr	r2, [r7, #28]
 8009f30:	e841 2300 	strex	r3, r2, [r1]
 8009f34:	617b      	str	r3, [r7, #20]
   return(result);
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1e6      	bne.n	8009f0a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f3c:	e002      	b.n	8009f44 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009f3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009f40:	f7fb ffec 	bl	8005f1c <HAL_UART_TxCpltCallback>
}
 8009f44:	bf00      	nop
 8009f46:	3740      	adds	r7, #64	; 0x40
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f58:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f7ff f9d4 	bl	8009308 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f60:	bf00      	nop
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b09c      	sub	sp, #112	; 0x70
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f74:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 0320 	and.w	r3, r3, #32
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d170      	bne.n	800a066 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8009f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f86:	2200      	movs	r2, #0
 8009f88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f94:	e853 3f00 	ldrex	r3, [r3]
 8009f98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009faa:	65bb      	str	r3, [r7, #88]	; 0x58
 8009fac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009fb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009fb2:	e841 2300 	strex	r3, r2, [r1]
 8009fb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1e6      	bne.n	8009f8c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	3308      	adds	r3, #8
 8009fc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc8:	e853 3f00 	ldrex	r3, [r3]
 8009fcc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd0:	f023 0301 	bic.w	r3, r3, #1
 8009fd4:	667b      	str	r3, [r7, #100]	; 0x64
 8009fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	3308      	adds	r3, #8
 8009fdc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009fde:	647a      	str	r2, [r7, #68]	; 0x44
 8009fe0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fe6:	e841 2300 	strex	r3, r2, [r1]
 8009fea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d1e5      	bne.n	8009fbe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	3308      	adds	r3, #8
 8009ff8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	e853 3f00 	ldrex	r3, [r3]
 800a000:	623b      	str	r3, [r7, #32]
   return(result);
 800a002:	6a3b      	ldr	r3, [r7, #32]
 800a004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a008:	663b      	str	r3, [r7, #96]	; 0x60
 800a00a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	3308      	adds	r3, #8
 800a010:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a012:	633a      	str	r2, [r7, #48]	; 0x30
 800a014:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a016:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a01a:	e841 2300 	strex	r3, r2, [r1]
 800a01e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1e5      	bne.n	8009ff2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a028:	2220      	movs	r2, #32
 800a02a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a02c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a02e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a030:	2b01      	cmp	r3, #1
 800a032:	d118      	bne.n	800a066 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	e853 3f00 	ldrex	r3, [r3]
 800a040:	60fb      	str	r3, [r7, #12]
   return(result);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f023 0310 	bic.w	r3, r3, #16
 800a048:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a04a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	461a      	mov	r2, r3
 800a050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a052:	61fb      	str	r3, [r7, #28]
 800a054:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a056:	69b9      	ldr	r1, [r7, #24]
 800a058:	69fa      	ldr	r2, [r7, #28]
 800a05a:	e841 2300 	strex	r3, r2, [r1]
 800a05e:	617b      	str	r3, [r7, #20]
   return(result);
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1e6      	bne.n	800a034 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d107      	bne.n	800a07e <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a06e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a070:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a074:	4619      	mov	r1, r3
 800a076:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a078:	f7ff f964 	bl	8009344 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a07c:	e002      	b.n	800a084 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800a07e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a080:	f7fb ff5c 	bl	8005f3c <HAL_UART_RxCpltCallback>
}
 800a084:	bf00      	nop
 800a086:	3770      	adds	r7, #112	; 0x70
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a098:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d109      	bne.n	800a0b6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a0a8:	085b      	lsrs	r3, r3, #1
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	68f8      	ldr	r0, [r7, #12]
 800a0b0:	f7ff f948 	bl	8009344 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a0b4:	e002      	b.n	800a0bc <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	f7ff f930 	bl	800931c <HAL_UART_RxHalfCpltCallback>
}
 800a0bc:	bf00      	nop
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b086      	sub	sp, #24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0dc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0e8:	2b80      	cmp	r3, #128	; 0x80
 800a0ea:	d109      	bne.n	800a100 <UART_DMAError+0x3c>
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	2b21      	cmp	r3, #33	; 0x21
 800a0f0:	d106      	bne.n	800a100 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a0fa:	6978      	ldr	r0, [r7, #20]
 800a0fc:	f7ff fe50 	bl	8009da0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a10a:	2b40      	cmp	r3, #64	; 0x40
 800a10c:	d109      	bne.n	800a122 <UART_DMAError+0x5e>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2b22      	cmp	r3, #34	; 0x22
 800a112:	d106      	bne.n	800a122 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	2200      	movs	r2, #0
 800a118:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a11c:	6978      	ldr	r0, [r7, #20]
 800a11e:	f7ff fe65 	bl	8009dec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a128:	f043 0210 	orr.w	r2, r3, #16
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a132:	6978      	ldr	r0, [r7, #20]
 800a134:	f7ff f8fc 	bl	8009330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a138:	bf00      	nop
 800a13a:	3718      	adds	r7, #24
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2200      	movs	r2, #0
 800a152:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2200      	movs	r2, #0
 800a15a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f7ff f8e6 	bl	8009330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a164:	bf00      	nop
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b088      	sub	sp, #32
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	e853 3f00 	ldrex	r3, [r3]
 800a180:	60bb      	str	r3, [r7, #8]
   return(result);
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a188:	61fb      	str	r3, [r7, #28]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	461a      	mov	r2, r3
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	61bb      	str	r3, [r7, #24]
 800a194:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a196:	6979      	ldr	r1, [r7, #20]
 800a198:	69ba      	ldr	r2, [r7, #24]
 800a19a:	e841 2300 	strex	r3, r2, [r1]
 800a19e:	613b      	str	r3, [r7, #16]
   return(result);
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1e6      	bne.n	800a174 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2220      	movs	r2, #32
 800a1aa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f7fb feb2 	bl	8005f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1b8:	bf00      	nop
 800a1ba:	3720      	adds	r7, #32
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800a1d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a20c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a1d8:	f7fc f8ec 	bl	80063b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a1dc:	480c      	ldr	r0, [pc, #48]	; (800a210 <LoopForever+0x6>)
  ldr r1, =_edata
 800a1de:	490d      	ldr	r1, [pc, #52]	; (800a214 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a1e0:	4a0d      	ldr	r2, [pc, #52]	; (800a218 <LoopForever+0xe>)
  movs r3, #0
 800a1e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a1e4:	e002      	b.n	800a1ec <LoopCopyDataInit>

0800a1e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a1e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a1e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a1ea:	3304      	adds	r3, #4

0800a1ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a1ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a1ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a1f0:	d3f9      	bcc.n	800a1e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a1f2:	4a0a      	ldr	r2, [pc, #40]	; (800a21c <LoopForever+0x12>)
  ldr r4, =_ebss
 800a1f4:	4c0a      	ldr	r4, [pc, #40]	; (800a220 <LoopForever+0x16>)
  movs r3, #0
 800a1f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a1f8:	e001      	b.n	800a1fe <LoopFillZerobss>

0800a1fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a1fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a1fc:	3204      	adds	r2, #4

0800a1fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a1fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a200:	d3fb      	bcc.n	800a1fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a202:	f000 f817 	bl	800a234 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a206:	f7fb fc63 	bl	8005ad0 <main>

0800a20a <LoopForever>:

LoopForever:
    b LoopForever
 800a20a:	e7fe      	b.n	800a20a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800a20c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800a210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a214:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800a218:	0800ac84 	.word	0x0800ac84
  ldr r2, =_sbss
 800a21c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800a220:	20000280 	.word	0x20000280

0800a224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a224:	e7fe      	b.n	800a224 <ADC1_2_IRQHandler>
	...

0800a228 <__errno>:
 800a228:	4b01      	ldr	r3, [pc, #4]	; (800a230 <__errno+0x8>)
 800a22a:	6818      	ldr	r0, [r3, #0]
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	20000024 	.word	0x20000024

0800a234 <__libc_init_array>:
 800a234:	b570      	push	{r4, r5, r6, lr}
 800a236:	4d0d      	ldr	r5, [pc, #52]	; (800a26c <__libc_init_array+0x38>)
 800a238:	4c0d      	ldr	r4, [pc, #52]	; (800a270 <__libc_init_array+0x3c>)
 800a23a:	1b64      	subs	r4, r4, r5
 800a23c:	10a4      	asrs	r4, r4, #2
 800a23e:	2600      	movs	r6, #0
 800a240:	42a6      	cmp	r6, r4
 800a242:	d109      	bne.n	800a258 <__libc_init_array+0x24>
 800a244:	4d0b      	ldr	r5, [pc, #44]	; (800a274 <__libc_init_array+0x40>)
 800a246:	4c0c      	ldr	r4, [pc, #48]	; (800a278 <__libc_init_array+0x44>)
 800a248:	f000 fca0 	bl	800ab8c <_init>
 800a24c:	1b64      	subs	r4, r4, r5
 800a24e:	10a4      	asrs	r4, r4, #2
 800a250:	2600      	movs	r6, #0
 800a252:	42a6      	cmp	r6, r4
 800a254:	d105      	bne.n	800a262 <__libc_init_array+0x2e>
 800a256:	bd70      	pop	{r4, r5, r6, pc}
 800a258:	f855 3b04 	ldr.w	r3, [r5], #4
 800a25c:	4798      	blx	r3
 800a25e:	3601      	adds	r6, #1
 800a260:	e7ee      	b.n	800a240 <__libc_init_array+0xc>
 800a262:	f855 3b04 	ldr.w	r3, [r5], #4
 800a266:	4798      	blx	r3
 800a268:	3601      	adds	r6, #1
 800a26a:	e7f2      	b.n	800a252 <__libc_init_array+0x1e>
 800a26c:	0800ac7c 	.word	0x0800ac7c
 800a270:	0800ac7c 	.word	0x0800ac7c
 800a274:	0800ac7c 	.word	0x0800ac7c
 800a278:	0800ac80 	.word	0x0800ac80

0800a27c <memcpy>:
 800a27c:	440a      	add	r2, r1
 800a27e:	4291      	cmp	r1, r2
 800a280:	f100 33ff 	add.w	r3, r0, #4294967295
 800a284:	d100      	bne.n	800a288 <memcpy+0xc>
 800a286:	4770      	bx	lr
 800a288:	b510      	push	{r4, lr}
 800a28a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a28e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a292:	4291      	cmp	r1, r2
 800a294:	d1f9      	bne.n	800a28a <memcpy+0xe>
 800a296:	bd10      	pop	{r4, pc}

0800a298 <memset>:
 800a298:	4402      	add	r2, r0
 800a29a:	4603      	mov	r3, r0
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d100      	bne.n	800a2a2 <memset+0xa>
 800a2a0:	4770      	bx	lr
 800a2a2:	f803 1b01 	strb.w	r1, [r3], #1
 800a2a6:	e7f9      	b.n	800a29c <memset+0x4>

0800a2a8 <siprintf>:
 800a2a8:	b40e      	push	{r1, r2, r3}
 800a2aa:	b500      	push	{lr}
 800a2ac:	b09c      	sub	sp, #112	; 0x70
 800a2ae:	ab1d      	add	r3, sp, #116	; 0x74
 800a2b0:	9002      	str	r0, [sp, #8]
 800a2b2:	9006      	str	r0, [sp, #24]
 800a2b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a2b8:	4809      	ldr	r0, [pc, #36]	; (800a2e0 <siprintf+0x38>)
 800a2ba:	9107      	str	r1, [sp, #28]
 800a2bc:	9104      	str	r1, [sp, #16]
 800a2be:	4909      	ldr	r1, [pc, #36]	; (800a2e4 <siprintf+0x3c>)
 800a2c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2c4:	9105      	str	r1, [sp, #20]
 800a2c6:	6800      	ldr	r0, [r0, #0]
 800a2c8:	9301      	str	r3, [sp, #4]
 800a2ca:	a902      	add	r1, sp, #8
 800a2cc:	f000 f87a 	bl	800a3c4 <_svfiprintf_r>
 800a2d0:	9b02      	ldr	r3, [sp, #8]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	701a      	strb	r2, [r3, #0]
 800a2d6:	b01c      	add	sp, #112	; 0x70
 800a2d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2dc:	b003      	add	sp, #12
 800a2de:	4770      	bx	lr
 800a2e0:	20000024 	.word	0x20000024
 800a2e4:	ffff0208 	.word	0xffff0208

0800a2e8 <strncpy>:
 800a2e8:	b510      	push	{r4, lr}
 800a2ea:	3901      	subs	r1, #1
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	b132      	cbz	r2, 800a2fe <strncpy+0x16>
 800a2f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a2f4:	f803 4b01 	strb.w	r4, [r3], #1
 800a2f8:	3a01      	subs	r2, #1
 800a2fa:	2c00      	cmp	r4, #0
 800a2fc:	d1f7      	bne.n	800a2ee <strncpy+0x6>
 800a2fe:	441a      	add	r2, r3
 800a300:	2100      	movs	r1, #0
 800a302:	4293      	cmp	r3, r2
 800a304:	d100      	bne.n	800a308 <strncpy+0x20>
 800a306:	bd10      	pop	{r4, pc}
 800a308:	f803 1b01 	strb.w	r1, [r3], #1
 800a30c:	e7f9      	b.n	800a302 <strncpy+0x1a>

0800a30e <__ssputs_r>:
 800a30e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a312:	688e      	ldr	r6, [r1, #8]
 800a314:	429e      	cmp	r6, r3
 800a316:	4682      	mov	sl, r0
 800a318:	460c      	mov	r4, r1
 800a31a:	4690      	mov	r8, r2
 800a31c:	461f      	mov	r7, r3
 800a31e:	d838      	bhi.n	800a392 <__ssputs_r+0x84>
 800a320:	898a      	ldrh	r2, [r1, #12]
 800a322:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a326:	d032      	beq.n	800a38e <__ssputs_r+0x80>
 800a328:	6825      	ldr	r5, [r4, #0]
 800a32a:	6909      	ldr	r1, [r1, #16]
 800a32c:	eba5 0901 	sub.w	r9, r5, r1
 800a330:	6965      	ldr	r5, [r4, #20]
 800a332:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a336:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a33a:	3301      	adds	r3, #1
 800a33c:	444b      	add	r3, r9
 800a33e:	106d      	asrs	r5, r5, #1
 800a340:	429d      	cmp	r5, r3
 800a342:	bf38      	it	cc
 800a344:	461d      	movcc	r5, r3
 800a346:	0553      	lsls	r3, r2, #21
 800a348:	d531      	bpl.n	800a3ae <__ssputs_r+0xa0>
 800a34a:	4629      	mov	r1, r5
 800a34c:	f000 fb54 	bl	800a9f8 <_malloc_r>
 800a350:	4606      	mov	r6, r0
 800a352:	b950      	cbnz	r0, 800a36a <__ssputs_r+0x5c>
 800a354:	230c      	movs	r3, #12
 800a356:	f8ca 3000 	str.w	r3, [sl]
 800a35a:	89a3      	ldrh	r3, [r4, #12]
 800a35c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a360:	81a3      	strh	r3, [r4, #12]
 800a362:	f04f 30ff 	mov.w	r0, #4294967295
 800a366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a36a:	6921      	ldr	r1, [r4, #16]
 800a36c:	464a      	mov	r2, r9
 800a36e:	f7ff ff85 	bl	800a27c <memcpy>
 800a372:	89a3      	ldrh	r3, [r4, #12]
 800a374:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a37c:	81a3      	strh	r3, [r4, #12]
 800a37e:	6126      	str	r6, [r4, #16]
 800a380:	6165      	str	r5, [r4, #20]
 800a382:	444e      	add	r6, r9
 800a384:	eba5 0509 	sub.w	r5, r5, r9
 800a388:	6026      	str	r6, [r4, #0]
 800a38a:	60a5      	str	r5, [r4, #8]
 800a38c:	463e      	mov	r6, r7
 800a38e:	42be      	cmp	r6, r7
 800a390:	d900      	bls.n	800a394 <__ssputs_r+0x86>
 800a392:	463e      	mov	r6, r7
 800a394:	6820      	ldr	r0, [r4, #0]
 800a396:	4632      	mov	r2, r6
 800a398:	4641      	mov	r1, r8
 800a39a:	f000 faa7 	bl	800a8ec <memmove>
 800a39e:	68a3      	ldr	r3, [r4, #8]
 800a3a0:	1b9b      	subs	r3, r3, r6
 800a3a2:	60a3      	str	r3, [r4, #8]
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	4433      	add	r3, r6
 800a3a8:	6023      	str	r3, [r4, #0]
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	e7db      	b.n	800a366 <__ssputs_r+0x58>
 800a3ae:	462a      	mov	r2, r5
 800a3b0:	f000 fb96 	bl	800aae0 <_realloc_r>
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d1e1      	bne.n	800a37e <__ssputs_r+0x70>
 800a3ba:	6921      	ldr	r1, [r4, #16]
 800a3bc:	4650      	mov	r0, sl
 800a3be:	f000 faaf 	bl	800a920 <_free_r>
 800a3c2:	e7c7      	b.n	800a354 <__ssputs_r+0x46>

0800a3c4 <_svfiprintf_r>:
 800a3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c8:	4698      	mov	r8, r3
 800a3ca:	898b      	ldrh	r3, [r1, #12]
 800a3cc:	061b      	lsls	r3, r3, #24
 800a3ce:	b09d      	sub	sp, #116	; 0x74
 800a3d0:	4607      	mov	r7, r0
 800a3d2:	460d      	mov	r5, r1
 800a3d4:	4614      	mov	r4, r2
 800a3d6:	d50e      	bpl.n	800a3f6 <_svfiprintf_r+0x32>
 800a3d8:	690b      	ldr	r3, [r1, #16]
 800a3da:	b963      	cbnz	r3, 800a3f6 <_svfiprintf_r+0x32>
 800a3dc:	2140      	movs	r1, #64	; 0x40
 800a3de:	f000 fb0b 	bl	800a9f8 <_malloc_r>
 800a3e2:	6028      	str	r0, [r5, #0]
 800a3e4:	6128      	str	r0, [r5, #16]
 800a3e6:	b920      	cbnz	r0, 800a3f2 <_svfiprintf_r+0x2e>
 800a3e8:	230c      	movs	r3, #12
 800a3ea:	603b      	str	r3, [r7, #0]
 800a3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f0:	e0d1      	b.n	800a596 <_svfiprintf_r+0x1d2>
 800a3f2:	2340      	movs	r3, #64	; 0x40
 800a3f4:	616b      	str	r3, [r5, #20]
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3fa:	2320      	movs	r3, #32
 800a3fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a400:	f8cd 800c 	str.w	r8, [sp, #12]
 800a404:	2330      	movs	r3, #48	; 0x30
 800a406:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5b0 <_svfiprintf_r+0x1ec>
 800a40a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a40e:	f04f 0901 	mov.w	r9, #1
 800a412:	4623      	mov	r3, r4
 800a414:	469a      	mov	sl, r3
 800a416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a41a:	b10a      	cbz	r2, 800a420 <_svfiprintf_r+0x5c>
 800a41c:	2a25      	cmp	r2, #37	; 0x25
 800a41e:	d1f9      	bne.n	800a414 <_svfiprintf_r+0x50>
 800a420:	ebba 0b04 	subs.w	fp, sl, r4
 800a424:	d00b      	beq.n	800a43e <_svfiprintf_r+0x7a>
 800a426:	465b      	mov	r3, fp
 800a428:	4622      	mov	r2, r4
 800a42a:	4629      	mov	r1, r5
 800a42c:	4638      	mov	r0, r7
 800a42e:	f7ff ff6e 	bl	800a30e <__ssputs_r>
 800a432:	3001      	adds	r0, #1
 800a434:	f000 80aa 	beq.w	800a58c <_svfiprintf_r+0x1c8>
 800a438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a43a:	445a      	add	r2, fp
 800a43c:	9209      	str	r2, [sp, #36]	; 0x24
 800a43e:	f89a 3000 	ldrb.w	r3, [sl]
 800a442:	2b00      	cmp	r3, #0
 800a444:	f000 80a2 	beq.w	800a58c <_svfiprintf_r+0x1c8>
 800a448:	2300      	movs	r3, #0
 800a44a:	f04f 32ff 	mov.w	r2, #4294967295
 800a44e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a452:	f10a 0a01 	add.w	sl, sl, #1
 800a456:	9304      	str	r3, [sp, #16]
 800a458:	9307      	str	r3, [sp, #28]
 800a45a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a45e:	931a      	str	r3, [sp, #104]	; 0x68
 800a460:	4654      	mov	r4, sl
 800a462:	2205      	movs	r2, #5
 800a464:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a468:	4851      	ldr	r0, [pc, #324]	; (800a5b0 <_svfiprintf_r+0x1ec>)
 800a46a:	f7f5 fec9 	bl	8000200 <memchr>
 800a46e:	9a04      	ldr	r2, [sp, #16]
 800a470:	b9d8      	cbnz	r0, 800a4aa <_svfiprintf_r+0xe6>
 800a472:	06d0      	lsls	r0, r2, #27
 800a474:	bf44      	itt	mi
 800a476:	2320      	movmi	r3, #32
 800a478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a47c:	0711      	lsls	r1, r2, #28
 800a47e:	bf44      	itt	mi
 800a480:	232b      	movmi	r3, #43	; 0x2b
 800a482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a486:	f89a 3000 	ldrb.w	r3, [sl]
 800a48a:	2b2a      	cmp	r3, #42	; 0x2a
 800a48c:	d015      	beq.n	800a4ba <_svfiprintf_r+0xf6>
 800a48e:	9a07      	ldr	r2, [sp, #28]
 800a490:	4654      	mov	r4, sl
 800a492:	2000      	movs	r0, #0
 800a494:	f04f 0c0a 	mov.w	ip, #10
 800a498:	4621      	mov	r1, r4
 800a49a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a49e:	3b30      	subs	r3, #48	; 0x30
 800a4a0:	2b09      	cmp	r3, #9
 800a4a2:	d94e      	bls.n	800a542 <_svfiprintf_r+0x17e>
 800a4a4:	b1b0      	cbz	r0, 800a4d4 <_svfiprintf_r+0x110>
 800a4a6:	9207      	str	r2, [sp, #28]
 800a4a8:	e014      	b.n	800a4d4 <_svfiprintf_r+0x110>
 800a4aa:	eba0 0308 	sub.w	r3, r0, r8
 800a4ae:	fa09 f303 	lsl.w	r3, r9, r3
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	9304      	str	r3, [sp, #16]
 800a4b6:	46a2      	mov	sl, r4
 800a4b8:	e7d2      	b.n	800a460 <_svfiprintf_r+0x9c>
 800a4ba:	9b03      	ldr	r3, [sp, #12]
 800a4bc:	1d19      	adds	r1, r3, #4
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	9103      	str	r1, [sp, #12]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	bfbb      	ittet	lt
 800a4c6:	425b      	neglt	r3, r3
 800a4c8:	f042 0202 	orrlt.w	r2, r2, #2
 800a4cc:	9307      	strge	r3, [sp, #28]
 800a4ce:	9307      	strlt	r3, [sp, #28]
 800a4d0:	bfb8      	it	lt
 800a4d2:	9204      	strlt	r2, [sp, #16]
 800a4d4:	7823      	ldrb	r3, [r4, #0]
 800a4d6:	2b2e      	cmp	r3, #46	; 0x2e
 800a4d8:	d10c      	bne.n	800a4f4 <_svfiprintf_r+0x130>
 800a4da:	7863      	ldrb	r3, [r4, #1]
 800a4dc:	2b2a      	cmp	r3, #42	; 0x2a
 800a4de:	d135      	bne.n	800a54c <_svfiprintf_r+0x188>
 800a4e0:	9b03      	ldr	r3, [sp, #12]
 800a4e2:	1d1a      	adds	r2, r3, #4
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	9203      	str	r2, [sp, #12]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	bfb8      	it	lt
 800a4ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4f0:	3402      	adds	r4, #2
 800a4f2:	9305      	str	r3, [sp, #20]
 800a4f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5c0 <_svfiprintf_r+0x1fc>
 800a4f8:	7821      	ldrb	r1, [r4, #0]
 800a4fa:	2203      	movs	r2, #3
 800a4fc:	4650      	mov	r0, sl
 800a4fe:	f7f5 fe7f 	bl	8000200 <memchr>
 800a502:	b140      	cbz	r0, 800a516 <_svfiprintf_r+0x152>
 800a504:	2340      	movs	r3, #64	; 0x40
 800a506:	eba0 000a 	sub.w	r0, r0, sl
 800a50a:	fa03 f000 	lsl.w	r0, r3, r0
 800a50e:	9b04      	ldr	r3, [sp, #16]
 800a510:	4303      	orrs	r3, r0
 800a512:	3401      	adds	r4, #1
 800a514:	9304      	str	r3, [sp, #16]
 800a516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a51a:	4826      	ldr	r0, [pc, #152]	; (800a5b4 <_svfiprintf_r+0x1f0>)
 800a51c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a520:	2206      	movs	r2, #6
 800a522:	f7f5 fe6d 	bl	8000200 <memchr>
 800a526:	2800      	cmp	r0, #0
 800a528:	d038      	beq.n	800a59c <_svfiprintf_r+0x1d8>
 800a52a:	4b23      	ldr	r3, [pc, #140]	; (800a5b8 <_svfiprintf_r+0x1f4>)
 800a52c:	bb1b      	cbnz	r3, 800a576 <_svfiprintf_r+0x1b2>
 800a52e:	9b03      	ldr	r3, [sp, #12]
 800a530:	3307      	adds	r3, #7
 800a532:	f023 0307 	bic.w	r3, r3, #7
 800a536:	3308      	adds	r3, #8
 800a538:	9303      	str	r3, [sp, #12]
 800a53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a53c:	4433      	add	r3, r6
 800a53e:	9309      	str	r3, [sp, #36]	; 0x24
 800a540:	e767      	b.n	800a412 <_svfiprintf_r+0x4e>
 800a542:	fb0c 3202 	mla	r2, ip, r2, r3
 800a546:	460c      	mov	r4, r1
 800a548:	2001      	movs	r0, #1
 800a54a:	e7a5      	b.n	800a498 <_svfiprintf_r+0xd4>
 800a54c:	2300      	movs	r3, #0
 800a54e:	3401      	adds	r4, #1
 800a550:	9305      	str	r3, [sp, #20]
 800a552:	4619      	mov	r1, r3
 800a554:	f04f 0c0a 	mov.w	ip, #10
 800a558:	4620      	mov	r0, r4
 800a55a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a55e:	3a30      	subs	r2, #48	; 0x30
 800a560:	2a09      	cmp	r2, #9
 800a562:	d903      	bls.n	800a56c <_svfiprintf_r+0x1a8>
 800a564:	2b00      	cmp	r3, #0
 800a566:	d0c5      	beq.n	800a4f4 <_svfiprintf_r+0x130>
 800a568:	9105      	str	r1, [sp, #20]
 800a56a:	e7c3      	b.n	800a4f4 <_svfiprintf_r+0x130>
 800a56c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a570:	4604      	mov	r4, r0
 800a572:	2301      	movs	r3, #1
 800a574:	e7f0      	b.n	800a558 <_svfiprintf_r+0x194>
 800a576:	ab03      	add	r3, sp, #12
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	462a      	mov	r2, r5
 800a57c:	4b0f      	ldr	r3, [pc, #60]	; (800a5bc <_svfiprintf_r+0x1f8>)
 800a57e:	a904      	add	r1, sp, #16
 800a580:	4638      	mov	r0, r7
 800a582:	f3af 8000 	nop.w
 800a586:	1c42      	adds	r2, r0, #1
 800a588:	4606      	mov	r6, r0
 800a58a:	d1d6      	bne.n	800a53a <_svfiprintf_r+0x176>
 800a58c:	89ab      	ldrh	r3, [r5, #12]
 800a58e:	065b      	lsls	r3, r3, #25
 800a590:	f53f af2c 	bmi.w	800a3ec <_svfiprintf_r+0x28>
 800a594:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a596:	b01d      	add	sp, #116	; 0x74
 800a598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59c:	ab03      	add	r3, sp, #12
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	462a      	mov	r2, r5
 800a5a2:	4b06      	ldr	r3, [pc, #24]	; (800a5bc <_svfiprintf_r+0x1f8>)
 800a5a4:	a904      	add	r1, sp, #16
 800a5a6:	4638      	mov	r0, r7
 800a5a8:	f000 f87a 	bl	800a6a0 <_printf_i>
 800a5ac:	e7eb      	b.n	800a586 <_svfiprintf_r+0x1c2>
 800a5ae:	bf00      	nop
 800a5b0:	0800ac3e 	.word	0x0800ac3e
 800a5b4:	0800ac48 	.word	0x0800ac48
 800a5b8:	00000000 	.word	0x00000000
 800a5bc:	0800a30f 	.word	0x0800a30f
 800a5c0:	0800ac44 	.word	0x0800ac44

0800a5c4 <_printf_common>:
 800a5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c8:	4616      	mov	r6, r2
 800a5ca:	4699      	mov	r9, r3
 800a5cc:	688a      	ldr	r2, [r1, #8]
 800a5ce:	690b      	ldr	r3, [r1, #16]
 800a5d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	bfb8      	it	lt
 800a5d8:	4613      	movlt	r3, r2
 800a5da:	6033      	str	r3, [r6, #0]
 800a5dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5e0:	4607      	mov	r7, r0
 800a5e2:	460c      	mov	r4, r1
 800a5e4:	b10a      	cbz	r2, 800a5ea <_printf_common+0x26>
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	6033      	str	r3, [r6, #0]
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	0699      	lsls	r1, r3, #26
 800a5ee:	bf42      	ittt	mi
 800a5f0:	6833      	ldrmi	r3, [r6, #0]
 800a5f2:	3302      	addmi	r3, #2
 800a5f4:	6033      	strmi	r3, [r6, #0]
 800a5f6:	6825      	ldr	r5, [r4, #0]
 800a5f8:	f015 0506 	ands.w	r5, r5, #6
 800a5fc:	d106      	bne.n	800a60c <_printf_common+0x48>
 800a5fe:	f104 0a19 	add.w	sl, r4, #25
 800a602:	68e3      	ldr	r3, [r4, #12]
 800a604:	6832      	ldr	r2, [r6, #0]
 800a606:	1a9b      	subs	r3, r3, r2
 800a608:	42ab      	cmp	r3, r5
 800a60a:	dc26      	bgt.n	800a65a <_printf_common+0x96>
 800a60c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a610:	1e13      	subs	r3, r2, #0
 800a612:	6822      	ldr	r2, [r4, #0]
 800a614:	bf18      	it	ne
 800a616:	2301      	movne	r3, #1
 800a618:	0692      	lsls	r2, r2, #26
 800a61a:	d42b      	bmi.n	800a674 <_printf_common+0xb0>
 800a61c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a620:	4649      	mov	r1, r9
 800a622:	4638      	mov	r0, r7
 800a624:	47c0      	blx	r8
 800a626:	3001      	adds	r0, #1
 800a628:	d01e      	beq.n	800a668 <_printf_common+0xa4>
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	68e5      	ldr	r5, [r4, #12]
 800a62e:	6832      	ldr	r2, [r6, #0]
 800a630:	f003 0306 	and.w	r3, r3, #6
 800a634:	2b04      	cmp	r3, #4
 800a636:	bf08      	it	eq
 800a638:	1aad      	subeq	r5, r5, r2
 800a63a:	68a3      	ldr	r3, [r4, #8]
 800a63c:	6922      	ldr	r2, [r4, #16]
 800a63e:	bf0c      	ite	eq
 800a640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a644:	2500      	movne	r5, #0
 800a646:	4293      	cmp	r3, r2
 800a648:	bfc4      	itt	gt
 800a64a:	1a9b      	subgt	r3, r3, r2
 800a64c:	18ed      	addgt	r5, r5, r3
 800a64e:	2600      	movs	r6, #0
 800a650:	341a      	adds	r4, #26
 800a652:	42b5      	cmp	r5, r6
 800a654:	d11a      	bne.n	800a68c <_printf_common+0xc8>
 800a656:	2000      	movs	r0, #0
 800a658:	e008      	b.n	800a66c <_printf_common+0xa8>
 800a65a:	2301      	movs	r3, #1
 800a65c:	4652      	mov	r2, sl
 800a65e:	4649      	mov	r1, r9
 800a660:	4638      	mov	r0, r7
 800a662:	47c0      	blx	r8
 800a664:	3001      	adds	r0, #1
 800a666:	d103      	bne.n	800a670 <_printf_common+0xac>
 800a668:	f04f 30ff 	mov.w	r0, #4294967295
 800a66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a670:	3501      	adds	r5, #1
 800a672:	e7c6      	b.n	800a602 <_printf_common+0x3e>
 800a674:	18e1      	adds	r1, r4, r3
 800a676:	1c5a      	adds	r2, r3, #1
 800a678:	2030      	movs	r0, #48	; 0x30
 800a67a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a67e:	4422      	add	r2, r4
 800a680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a688:	3302      	adds	r3, #2
 800a68a:	e7c7      	b.n	800a61c <_printf_common+0x58>
 800a68c:	2301      	movs	r3, #1
 800a68e:	4622      	mov	r2, r4
 800a690:	4649      	mov	r1, r9
 800a692:	4638      	mov	r0, r7
 800a694:	47c0      	blx	r8
 800a696:	3001      	adds	r0, #1
 800a698:	d0e6      	beq.n	800a668 <_printf_common+0xa4>
 800a69a:	3601      	adds	r6, #1
 800a69c:	e7d9      	b.n	800a652 <_printf_common+0x8e>
	...

0800a6a0 <_printf_i>:
 800a6a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a4:	7e0f      	ldrb	r7, [r1, #24]
 800a6a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6a8:	2f78      	cmp	r7, #120	; 0x78
 800a6aa:	4691      	mov	r9, r2
 800a6ac:	4680      	mov	r8, r0
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	469a      	mov	sl, r3
 800a6b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6b6:	d807      	bhi.n	800a6c8 <_printf_i+0x28>
 800a6b8:	2f62      	cmp	r7, #98	; 0x62
 800a6ba:	d80a      	bhi.n	800a6d2 <_printf_i+0x32>
 800a6bc:	2f00      	cmp	r7, #0
 800a6be:	f000 80d8 	beq.w	800a872 <_printf_i+0x1d2>
 800a6c2:	2f58      	cmp	r7, #88	; 0x58
 800a6c4:	f000 80a3 	beq.w	800a80e <_printf_i+0x16e>
 800a6c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6d0:	e03a      	b.n	800a748 <_printf_i+0xa8>
 800a6d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6d6:	2b15      	cmp	r3, #21
 800a6d8:	d8f6      	bhi.n	800a6c8 <_printf_i+0x28>
 800a6da:	a101      	add	r1, pc, #4	; (adr r1, 800a6e0 <_printf_i+0x40>)
 800a6dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6e0:	0800a739 	.word	0x0800a739
 800a6e4:	0800a74d 	.word	0x0800a74d
 800a6e8:	0800a6c9 	.word	0x0800a6c9
 800a6ec:	0800a6c9 	.word	0x0800a6c9
 800a6f0:	0800a6c9 	.word	0x0800a6c9
 800a6f4:	0800a6c9 	.word	0x0800a6c9
 800a6f8:	0800a74d 	.word	0x0800a74d
 800a6fc:	0800a6c9 	.word	0x0800a6c9
 800a700:	0800a6c9 	.word	0x0800a6c9
 800a704:	0800a6c9 	.word	0x0800a6c9
 800a708:	0800a6c9 	.word	0x0800a6c9
 800a70c:	0800a859 	.word	0x0800a859
 800a710:	0800a77d 	.word	0x0800a77d
 800a714:	0800a83b 	.word	0x0800a83b
 800a718:	0800a6c9 	.word	0x0800a6c9
 800a71c:	0800a6c9 	.word	0x0800a6c9
 800a720:	0800a87b 	.word	0x0800a87b
 800a724:	0800a6c9 	.word	0x0800a6c9
 800a728:	0800a77d 	.word	0x0800a77d
 800a72c:	0800a6c9 	.word	0x0800a6c9
 800a730:	0800a6c9 	.word	0x0800a6c9
 800a734:	0800a843 	.word	0x0800a843
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	1d1a      	adds	r2, r3, #4
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	602a      	str	r2, [r5, #0]
 800a740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a748:	2301      	movs	r3, #1
 800a74a:	e0a3      	b.n	800a894 <_printf_i+0x1f4>
 800a74c:	6820      	ldr	r0, [r4, #0]
 800a74e:	6829      	ldr	r1, [r5, #0]
 800a750:	0606      	lsls	r6, r0, #24
 800a752:	f101 0304 	add.w	r3, r1, #4
 800a756:	d50a      	bpl.n	800a76e <_printf_i+0xce>
 800a758:	680e      	ldr	r6, [r1, #0]
 800a75a:	602b      	str	r3, [r5, #0]
 800a75c:	2e00      	cmp	r6, #0
 800a75e:	da03      	bge.n	800a768 <_printf_i+0xc8>
 800a760:	232d      	movs	r3, #45	; 0x2d
 800a762:	4276      	negs	r6, r6
 800a764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a768:	485e      	ldr	r0, [pc, #376]	; (800a8e4 <_printf_i+0x244>)
 800a76a:	230a      	movs	r3, #10
 800a76c:	e019      	b.n	800a7a2 <_printf_i+0x102>
 800a76e:	680e      	ldr	r6, [r1, #0]
 800a770:	602b      	str	r3, [r5, #0]
 800a772:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a776:	bf18      	it	ne
 800a778:	b236      	sxthne	r6, r6
 800a77a:	e7ef      	b.n	800a75c <_printf_i+0xbc>
 800a77c:	682b      	ldr	r3, [r5, #0]
 800a77e:	6820      	ldr	r0, [r4, #0]
 800a780:	1d19      	adds	r1, r3, #4
 800a782:	6029      	str	r1, [r5, #0]
 800a784:	0601      	lsls	r1, r0, #24
 800a786:	d501      	bpl.n	800a78c <_printf_i+0xec>
 800a788:	681e      	ldr	r6, [r3, #0]
 800a78a:	e002      	b.n	800a792 <_printf_i+0xf2>
 800a78c:	0646      	lsls	r6, r0, #25
 800a78e:	d5fb      	bpl.n	800a788 <_printf_i+0xe8>
 800a790:	881e      	ldrh	r6, [r3, #0]
 800a792:	4854      	ldr	r0, [pc, #336]	; (800a8e4 <_printf_i+0x244>)
 800a794:	2f6f      	cmp	r7, #111	; 0x6f
 800a796:	bf0c      	ite	eq
 800a798:	2308      	moveq	r3, #8
 800a79a:	230a      	movne	r3, #10
 800a79c:	2100      	movs	r1, #0
 800a79e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7a2:	6865      	ldr	r5, [r4, #4]
 800a7a4:	60a5      	str	r5, [r4, #8]
 800a7a6:	2d00      	cmp	r5, #0
 800a7a8:	bfa2      	ittt	ge
 800a7aa:	6821      	ldrge	r1, [r4, #0]
 800a7ac:	f021 0104 	bicge.w	r1, r1, #4
 800a7b0:	6021      	strge	r1, [r4, #0]
 800a7b2:	b90e      	cbnz	r6, 800a7b8 <_printf_i+0x118>
 800a7b4:	2d00      	cmp	r5, #0
 800a7b6:	d04d      	beq.n	800a854 <_printf_i+0x1b4>
 800a7b8:	4615      	mov	r5, r2
 800a7ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800a7be:	fb03 6711 	mls	r7, r3, r1, r6
 800a7c2:	5dc7      	ldrb	r7, [r0, r7]
 800a7c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7c8:	4637      	mov	r7, r6
 800a7ca:	42bb      	cmp	r3, r7
 800a7cc:	460e      	mov	r6, r1
 800a7ce:	d9f4      	bls.n	800a7ba <_printf_i+0x11a>
 800a7d0:	2b08      	cmp	r3, #8
 800a7d2:	d10b      	bne.n	800a7ec <_printf_i+0x14c>
 800a7d4:	6823      	ldr	r3, [r4, #0]
 800a7d6:	07de      	lsls	r6, r3, #31
 800a7d8:	d508      	bpl.n	800a7ec <_printf_i+0x14c>
 800a7da:	6923      	ldr	r3, [r4, #16]
 800a7dc:	6861      	ldr	r1, [r4, #4]
 800a7de:	4299      	cmp	r1, r3
 800a7e0:	bfde      	ittt	le
 800a7e2:	2330      	movle	r3, #48	; 0x30
 800a7e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a7ec:	1b52      	subs	r2, r2, r5
 800a7ee:	6122      	str	r2, [r4, #16]
 800a7f0:	f8cd a000 	str.w	sl, [sp]
 800a7f4:	464b      	mov	r3, r9
 800a7f6:	aa03      	add	r2, sp, #12
 800a7f8:	4621      	mov	r1, r4
 800a7fa:	4640      	mov	r0, r8
 800a7fc:	f7ff fee2 	bl	800a5c4 <_printf_common>
 800a800:	3001      	adds	r0, #1
 800a802:	d14c      	bne.n	800a89e <_printf_i+0x1fe>
 800a804:	f04f 30ff 	mov.w	r0, #4294967295
 800a808:	b004      	add	sp, #16
 800a80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a80e:	4835      	ldr	r0, [pc, #212]	; (800a8e4 <_printf_i+0x244>)
 800a810:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a814:	6829      	ldr	r1, [r5, #0]
 800a816:	6823      	ldr	r3, [r4, #0]
 800a818:	f851 6b04 	ldr.w	r6, [r1], #4
 800a81c:	6029      	str	r1, [r5, #0]
 800a81e:	061d      	lsls	r5, r3, #24
 800a820:	d514      	bpl.n	800a84c <_printf_i+0x1ac>
 800a822:	07df      	lsls	r7, r3, #31
 800a824:	bf44      	itt	mi
 800a826:	f043 0320 	orrmi.w	r3, r3, #32
 800a82a:	6023      	strmi	r3, [r4, #0]
 800a82c:	b91e      	cbnz	r6, 800a836 <_printf_i+0x196>
 800a82e:	6823      	ldr	r3, [r4, #0]
 800a830:	f023 0320 	bic.w	r3, r3, #32
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	2310      	movs	r3, #16
 800a838:	e7b0      	b.n	800a79c <_printf_i+0xfc>
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	f043 0320 	orr.w	r3, r3, #32
 800a840:	6023      	str	r3, [r4, #0]
 800a842:	2378      	movs	r3, #120	; 0x78
 800a844:	4828      	ldr	r0, [pc, #160]	; (800a8e8 <_printf_i+0x248>)
 800a846:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a84a:	e7e3      	b.n	800a814 <_printf_i+0x174>
 800a84c:	0659      	lsls	r1, r3, #25
 800a84e:	bf48      	it	mi
 800a850:	b2b6      	uxthmi	r6, r6
 800a852:	e7e6      	b.n	800a822 <_printf_i+0x182>
 800a854:	4615      	mov	r5, r2
 800a856:	e7bb      	b.n	800a7d0 <_printf_i+0x130>
 800a858:	682b      	ldr	r3, [r5, #0]
 800a85a:	6826      	ldr	r6, [r4, #0]
 800a85c:	6961      	ldr	r1, [r4, #20]
 800a85e:	1d18      	adds	r0, r3, #4
 800a860:	6028      	str	r0, [r5, #0]
 800a862:	0635      	lsls	r5, r6, #24
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	d501      	bpl.n	800a86c <_printf_i+0x1cc>
 800a868:	6019      	str	r1, [r3, #0]
 800a86a:	e002      	b.n	800a872 <_printf_i+0x1d2>
 800a86c:	0670      	lsls	r0, r6, #25
 800a86e:	d5fb      	bpl.n	800a868 <_printf_i+0x1c8>
 800a870:	8019      	strh	r1, [r3, #0]
 800a872:	2300      	movs	r3, #0
 800a874:	6123      	str	r3, [r4, #16]
 800a876:	4615      	mov	r5, r2
 800a878:	e7ba      	b.n	800a7f0 <_printf_i+0x150>
 800a87a:	682b      	ldr	r3, [r5, #0]
 800a87c:	1d1a      	adds	r2, r3, #4
 800a87e:	602a      	str	r2, [r5, #0]
 800a880:	681d      	ldr	r5, [r3, #0]
 800a882:	6862      	ldr	r2, [r4, #4]
 800a884:	2100      	movs	r1, #0
 800a886:	4628      	mov	r0, r5
 800a888:	f7f5 fcba 	bl	8000200 <memchr>
 800a88c:	b108      	cbz	r0, 800a892 <_printf_i+0x1f2>
 800a88e:	1b40      	subs	r0, r0, r5
 800a890:	6060      	str	r0, [r4, #4]
 800a892:	6863      	ldr	r3, [r4, #4]
 800a894:	6123      	str	r3, [r4, #16]
 800a896:	2300      	movs	r3, #0
 800a898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a89c:	e7a8      	b.n	800a7f0 <_printf_i+0x150>
 800a89e:	6923      	ldr	r3, [r4, #16]
 800a8a0:	462a      	mov	r2, r5
 800a8a2:	4649      	mov	r1, r9
 800a8a4:	4640      	mov	r0, r8
 800a8a6:	47d0      	blx	sl
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	d0ab      	beq.n	800a804 <_printf_i+0x164>
 800a8ac:	6823      	ldr	r3, [r4, #0]
 800a8ae:	079b      	lsls	r3, r3, #30
 800a8b0:	d413      	bmi.n	800a8da <_printf_i+0x23a>
 800a8b2:	68e0      	ldr	r0, [r4, #12]
 800a8b4:	9b03      	ldr	r3, [sp, #12]
 800a8b6:	4298      	cmp	r0, r3
 800a8b8:	bfb8      	it	lt
 800a8ba:	4618      	movlt	r0, r3
 800a8bc:	e7a4      	b.n	800a808 <_printf_i+0x168>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	4632      	mov	r2, r6
 800a8c2:	4649      	mov	r1, r9
 800a8c4:	4640      	mov	r0, r8
 800a8c6:	47d0      	blx	sl
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	d09b      	beq.n	800a804 <_printf_i+0x164>
 800a8cc:	3501      	adds	r5, #1
 800a8ce:	68e3      	ldr	r3, [r4, #12]
 800a8d0:	9903      	ldr	r1, [sp, #12]
 800a8d2:	1a5b      	subs	r3, r3, r1
 800a8d4:	42ab      	cmp	r3, r5
 800a8d6:	dcf2      	bgt.n	800a8be <_printf_i+0x21e>
 800a8d8:	e7eb      	b.n	800a8b2 <_printf_i+0x212>
 800a8da:	2500      	movs	r5, #0
 800a8dc:	f104 0619 	add.w	r6, r4, #25
 800a8e0:	e7f5      	b.n	800a8ce <_printf_i+0x22e>
 800a8e2:	bf00      	nop
 800a8e4:	0800ac4f 	.word	0x0800ac4f
 800a8e8:	0800ac60 	.word	0x0800ac60

0800a8ec <memmove>:
 800a8ec:	4288      	cmp	r0, r1
 800a8ee:	b510      	push	{r4, lr}
 800a8f0:	eb01 0402 	add.w	r4, r1, r2
 800a8f4:	d902      	bls.n	800a8fc <memmove+0x10>
 800a8f6:	4284      	cmp	r4, r0
 800a8f8:	4623      	mov	r3, r4
 800a8fa:	d807      	bhi.n	800a90c <memmove+0x20>
 800a8fc:	1e43      	subs	r3, r0, #1
 800a8fe:	42a1      	cmp	r1, r4
 800a900:	d008      	beq.n	800a914 <memmove+0x28>
 800a902:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a906:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a90a:	e7f8      	b.n	800a8fe <memmove+0x12>
 800a90c:	4402      	add	r2, r0
 800a90e:	4601      	mov	r1, r0
 800a910:	428a      	cmp	r2, r1
 800a912:	d100      	bne.n	800a916 <memmove+0x2a>
 800a914:	bd10      	pop	{r4, pc}
 800a916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a91a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a91e:	e7f7      	b.n	800a910 <memmove+0x24>

0800a920 <_free_r>:
 800a920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a922:	2900      	cmp	r1, #0
 800a924:	d044      	beq.n	800a9b0 <_free_r+0x90>
 800a926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a92a:	9001      	str	r0, [sp, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f1a1 0404 	sub.w	r4, r1, #4
 800a932:	bfb8      	it	lt
 800a934:	18e4      	addlt	r4, r4, r3
 800a936:	f000 f913 	bl	800ab60 <__malloc_lock>
 800a93a:	4a1e      	ldr	r2, [pc, #120]	; (800a9b4 <_free_r+0x94>)
 800a93c:	9801      	ldr	r0, [sp, #4]
 800a93e:	6813      	ldr	r3, [r2, #0]
 800a940:	b933      	cbnz	r3, 800a950 <_free_r+0x30>
 800a942:	6063      	str	r3, [r4, #4]
 800a944:	6014      	str	r4, [r2, #0]
 800a946:	b003      	add	sp, #12
 800a948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a94c:	f000 b90e 	b.w	800ab6c <__malloc_unlock>
 800a950:	42a3      	cmp	r3, r4
 800a952:	d908      	bls.n	800a966 <_free_r+0x46>
 800a954:	6825      	ldr	r5, [r4, #0]
 800a956:	1961      	adds	r1, r4, r5
 800a958:	428b      	cmp	r3, r1
 800a95a:	bf01      	itttt	eq
 800a95c:	6819      	ldreq	r1, [r3, #0]
 800a95e:	685b      	ldreq	r3, [r3, #4]
 800a960:	1949      	addeq	r1, r1, r5
 800a962:	6021      	streq	r1, [r4, #0]
 800a964:	e7ed      	b.n	800a942 <_free_r+0x22>
 800a966:	461a      	mov	r2, r3
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	b10b      	cbz	r3, 800a970 <_free_r+0x50>
 800a96c:	42a3      	cmp	r3, r4
 800a96e:	d9fa      	bls.n	800a966 <_free_r+0x46>
 800a970:	6811      	ldr	r1, [r2, #0]
 800a972:	1855      	adds	r5, r2, r1
 800a974:	42a5      	cmp	r5, r4
 800a976:	d10b      	bne.n	800a990 <_free_r+0x70>
 800a978:	6824      	ldr	r4, [r4, #0]
 800a97a:	4421      	add	r1, r4
 800a97c:	1854      	adds	r4, r2, r1
 800a97e:	42a3      	cmp	r3, r4
 800a980:	6011      	str	r1, [r2, #0]
 800a982:	d1e0      	bne.n	800a946 <_free_r+0x26>
 800a984:	681c      	ldr	r4, [r3, #0]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	6053      	str	r3, [r2, #4]
 800a98a:	4421      	add	r1, r4
 800a98c:	6011      	str	r1, [r2, #0]
 800a98e:	e7da      	b.n	800a946 <_free_r+0x26>
 800a990:	d902      	bls.n	800a998 <_free_r+0x78>
 800a992:	230c      	movs	r3, #12
 800a994:	6003      	str	r3, [r0, #0]
 800a996:	e7d6      	b.n	800a946 <_free_r+0x26>
 800a998:	6825      	ldr	r5, [r4, #0]
 800a99a:	1961      	adds	r1, r4, r5
 800a99c:	428b      	cmp	r3, r1
 800a99e:	bf04      	itt	eq
 800a9a0:	6819      	ldreq	r1, [r3, #0]
 800a9a2:	685b      	ldreq	r3, [r3, #4]
 800a9a4:	6063      	str	r3, [r4, #4]
 800a9a6:	bf04      	itt	eq
 800a9a8:	1949      	addeq	r1, r1, r5
 800a9aa:	6021      	streq	r1, [r4, #0]
 800a9ac:	6054      	str	r4, [r2, #4]
 800a9ae:	e7ca      	b.n	800a946 <_free_r+0x26>
 800a9b0:	b003      	add	sp, #12
 800a9b2:	bd30      	pop	{r4, r5, pc}
 800a9b4:	20000270 	.word	0x20000270

0800a9b8 <sbrk_aligned>:
 800a9b8:	b570      	push	{r4, r5, r6, lr}
 800a9ba:	4e0e      	ldr	r6, [pc, #56]	; (800a9f4 <sbrk_aligned+0x3c>)
 800a9bc:	460c      	mov	r4, r1
 800a9be:	6831      	ldr	r1, [r6, #0]
 800a9c0:	4605      	mov	r5, r0
 800a9c2:	b911      	cbnz	r1, 800a9ca <sbrk_aligned+0x12>
 800a9c4:	f000 f8bc 	bl	800ab40 <_sbrk_r>
 800a9c8:	6030      	str	r0, [r6, #0]
 800a9ca:	4621      	mov	r1, r4
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	f000 f8b7 	bl	800ab40 <_sbrk_r>
 800a9d2:	1c43      	adds	r3, r0, #1
 800a9d4:	d00a      	beq.n	800a9ec <sbrk_aligned+0x34>
 800a9d6:	1cc4      	adds	r4, r0, #3
 800a9d8:	f024 0403 	bic.w	r4, r4, #3
 800a9dc:	42a0      	cmp	r0, r4
 800a9de:	d007      	beq.n	800a9f0 <sbrk_aligned+0x38>
 800a9e0:	1a21      	subs	r1, r4, r0
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	f000 f8ac 	bl	800ab40 <_sbrk_r>
 800a9e8:	3001      	adds	r0, #1
 800a9ea:	d101      	bne.n	800a9f0 <sbrk_aligned+0x38>
 800a9ec:	f04f 34ff 	mov.w	r4, #4294967295
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	bd70      	pop	{r4, r5, r6, pc}
 800a9f4:	20000274 	.word	0x20000274

0800a9f8 <_malloc_r>:
 800a9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9fc:	1ccd      	adds	r5, r1, #3
 800a9fe:	f025 0503 	bic.w	r5, r5, #3
 800aa02:	3508      	adds	r5, #8
 800aa04:	2d0c      	cmp	r5, #12
 800aa06:	bf38      	it	cc
 800aa08:	250c      	movcc	r5, #12
 800aa0a:	2d00      	cmp	r5, #0
 800aa0c:	4607      	mov	r7, r0
 800aa0e:	db01      	blt.n	800aa14 <_malloc_r+0x1c>
 800aa10:	42a9      	cmp	r1, r5
 800aa12:	d905      	bls.n	800aa20 <_malloc_r+0x28>
 800aa14:	230c      	movs	r3, #12
 800aa16:	603b      	str	r3, [r7, #0]
 800aa18:	2600      	movs	r6, #0
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa20:	4e2e      	ldr	r6, [pc, #184]	; (800aadc <_malloc_r+0xe4>)
 800aa22:	f000 f89d 	bl	800ab60 <__malloc_lock>
 800aa26:	6833      	ldr	r3, [r6, #0]
 800aa28:	461c      	mov	r4, r3
 800aa2a:	bb34      	cbnz	r4, 800aa7a <_malloc_r+0x82>
 800aa2c:	4629      	mov	r1, r5
 800aa2e:	4638      	mov	r0, r7
 800aa30:	f7ff ffc2 	bl	800a9b8 <sbrk_aligned>
 800aa34:	1c43      	adds	r3, r0, #1
 800aa36:	4604      	mov	r4, r0
 800aa38:	d14d      	bne.n	800aad6 <_malloc_r+0xde>
 800aa3a:	6834      	ldr	r4, [r6, #0]
 800aa3c:	4626      	mov	r6, r4
 800aa3e:	2e00      	cmp	r6, #0
 800aa40:	d140      	bne.n	800aac4 <_malloc_r+0xcc>
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	4631      	mov	r1, r6
 800aa46:	4638      	mov	r0, r7
 800aa48:	eb04 0803 	add.w	r8, r4, r3
 800aa4c:	f000 f878 	bl	800ab40 <_sbrk_r>
 800aa50:	4580      	cmp	r8, r0
 800aa52:	d13a      	bne.n	800aaca <_malloc_r+0xd2>
 800aa54:	6821      	ldr	r1, [r4, #0]
 800aa56:	3503      	adds	r5, #3
 800aa58:	1a6d      	subs	r5, r5, r1
 800aa5a:	f025 0503 	bic.w	r5, r5, #3
 800aa5e:	3508      	adds	r5, #8
 800aa60:	2d0c      	cmp	r5, #12
 800aa62:	bf38      	it	cc
 800aa64:	250c      	movcc	r5, #12
 800aa66:	4629      	mov	r1, r5
 800aa68:	4638      	mov	r0, r7
 800aa6a:	f7ff ffa5 	bl	800a9b8 <sbrk_aligned>
 800aa6e:	3001      	adds	r0, #1
 800aa70:	d02b      	beq.n	800aaca <_malloc_r+0xd2>
 800aa72:	6823      	ldr	r3, [r4, #0]
 800aa74:	442b      	add	r3, r5
 800aa76:	6023      	str	r3, [r4, #0]
 800aa78:	e00e      	b.n	800aa98 <_malloc_r+0xa0>
 800aa7a:	6822      	ldr	r2, [r4, #0]
 800aa7c:	1b52      	subs	r2, r2, r5
 800aa7e:	d41e      	bmi.n	800aabe <_malloc_r+0xc6>
 800aa80:	2a0b      	cmp	r2, #11
 800aa82:	d916      	bls.n	800aab2 <_malloc_r+0xba>
 800aa84:	1961      	adds	r1, r4, r5
 800aa86:	42a3      	cmp	r3, r4
 800aa88:	6025      	str	r5, [r4, #0]
 800aa8a:	bf18      	it	ne
 800aa8c:	6059      	strne	r1, [r3, #4]
 800aa8e:	6863      	ldr	r3, [r4, #4]
 800aa90:	bf08      	it	eq
 800aa92:	6031      	streq	r1, [r6, #0]
 800aa94:	5162      	str	r2, [r4, r5]
 800aa96:	604b      	str	r3, [r1, #4]
 800aa98:	4638      	mov	r0, r7
 800aa9a:	f104 060b 	add.w	r6, r4, #11
 800aa9e:	f000 f865 	bl	800ab6c <__malloc_unlock>
 800aaa2:	f026 0607 	bic.w	r6, r6, #7
 800aaa6:	1d23      	adds	r3, r4, #4
 800aaa8:	1af2      	subs	r2, r6, r3
 800aaaa:	d0b6      	beq.n	800aa1a <_malloc_r+0x22>
 800aaac:	1b9b      	subs	r3, r3, r6
 800aaae:	50a3      	str	r3, [r4, r2]
 800aab0:	e7b3      	b.n	800aa1a <_malloc_r+0x22>
 800aab2:	6862      	ldr	r2, [r4, #4]
 800aab4:	42a3      	cmp	r3, r4
 800aab6:	bf0c      	ite	eq
 800aab8:	6032      	streq	r2, [r6, #0]
 800aaba:	605a      	strne	r2, [r3, #4]
 800aabc:	e7ec      	b.n	800aa98 <_malloc_r+0xa0>
 800aabe:	4623      	mov	r3, r4
 800aac0:	6864      	ldr	r4, [r4, #4]
 800aac2:	e7b2      	b.n	800aa2a <_malloc_r+0x32>
 800aac4:	4634      	mov	r4, r6
 800aac6:	6876      	ldr	r6, [r6, #4]
 800aac8:	e7b9      	b.n	800aa3e <_malloc_r+0x46>
 800aaca:	230c      	movs	r3, #12
 800aacc:	603b      	str	r3, [r7, #0]
 800aace:	4638      	mov	r0, r7
 800aad0:	f000 f84c 	bl	800ab6c <__malloc_unlock>
 800aad4:	e7a1      	b.n	800aa1a <_malloc_r+0x22>
 800aad6:	6025      	str	r5, [r4, #0]
 800aad8:	e7de      	b.n	800aa98 <_malloc_r+0xa0>
 800aada:	bf00      	nop
 800aadc:	20000270 	.word	0x20000270

0800aae0 <_realloc_r>:
 800aae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae4:	4680      	mov	r8, r0
 800aae6:	4614      	mov	r4, r2
 800aae8:	460e      	mov	r6, r1
 800aaea:	b921      	cbnz	r1, 800aaf6 <_realloc_r+0x16>
 800aaec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	f7ff bf81 	b.w	800a9f8 <_malloc_r>
 800aaf6:	b92a      	cbnz	r2, 800ab04 <_realloc_r+0x24>
 800aaf8:	f7ff ff12 	bl	800a920 <_free_r>
 800aafc:	4625      	mov	r5, r4
 800aafe:	4628      	mov	r0, r5
 800ab00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab04:	f000 f838 	bl	800ab78 <_malloc_usable_size_r>
 800ab08:	4284      	cmp	r4, r0
 800ab0a:	4607      	mov	r7, r0
 800ab0c:	d802      	bhi.n	800ab14 <_realloc_r+0x34>
 800ab0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab12:	d812      	bhi.n	800ab3a <_realloc_r+0x5a>
 800ab14:	4621      	mov	r1, r4
 800ab16:	4640      	mov	r0, r8
 800ab18:	f7ff ff6e 	bl	800a9f8 <_malloc_r>
 800ab1c:	4605      	mov	r5, r0
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d0ed      	beq.n	800aafe <_realloc_r+0x1e>
 800ab22:	42bc      	cmp	r4, r7
 800ab24:	4622      	mov	r2, r4
 800ab26:	4631      	mov	r1, r6
 800ab28:	bf28      	it	cs
 800ab2a:	463a      	movcs	r2, r7
 800ab2c:	f7ff fba6 	bl	800a27c <memcpy>
 800ab30:	4631      	mov	r1, r6
 800ab32:	4640      	mov	r0, r8
 800ab34:	f7ff fef4 	bl	800a920 <_free_r>
 800ab38:	e7e1      	b.n	800aafe <_realloc_r+0x1e>
 800ab3a:	4635      	mov	r5, r6
 800ab3c:	e7df      	b.n	800aafe <_realloc_r+0x1e>
	...

0800ab40 <_sbrk_r>:
 800ab40:	b538      	push	{r3, r4, r5, lr}
 800ab42:	4d06      	ldr	r5, [pc, #24]	; (800ab5c <_sbrk_r+0x1c>)
 800ab44:	2300      	movs	r3, #0
 800ab46:	4604      	mov	r4, r0
 800ab48:	4608      	mov	r0, r1
 800ab4a:	602b      	str	r3, [r5, #0]
 800ab4c:	f7fb fbfc 	bl	8006348 <_sbrk>
 800ab50:	1c43      	adds	r3, r0, #1
 800ab52:	d102      	bne.n	800ab5a <_sbrk_r+0x1a>
 800ab54:	682b      	ldr	r3, [r5, #0]
 800ab56:	b103      	cbz	r3, 800ab5a <_sbrk_r+0x1a>
 800ab58:	6023      	str	r3, [r4, #0]
 800ab5a:	bd38      	pop	{r3, r4, r5, pc}
 800ab5c:	20000278 	.word	0x20000278

0800ab60 <__malloc_lock>:
 800ab60:	4801      	ldr	r0, [pc, #4]	; (800ab68 <__malloc_lock+0x8>)
 800ab62:	f000 b811 	b.w	800ab88 <__retarget_lock_acquire_recursive>
 800ab66:	bf00      	nop
 800ab68:	2000027c 	.word	0x2000027c

0800ab6c <__malloc_unlock>:
 800ab6c:	4801      	ldr	r0, [pc, #4]	; (800ab74 <__malloc_unlock+0x8>)
 800ab6e:	f000 b80c 	b.w	800ab8a <__retarget_lock_release_recursive>
 800ab72:	bf00      	nop
 800ab74:	2000027c 	.word	0x2000027c

0800ab78 <_malloc_usable_size_r>:
 800ab78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab7c:	1f18      	subs	r0, r3, #4
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	bfbc      	itt	lt
 800ab82:	580b      	ldrlt	r3, [r1, r0]
 800ab84:	18c0      	addlt	r0, r0, r3
 800ab86:	4770      	bx	lr

0800ab88 <__retarget_lock_acquire_recursive>:
 800ab88:	4770      	bx	lr

0800ab8a <__retarget_lock_release_recursive>:
 800ab8a:	4770      	bx	lr

0800ab8c <_init>:
 800ab8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8e:	bf00      	nop
 800ab90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab92:	bc08      	pop	{r3}
 800ab94:	469e      	mov	lr, r3
 800ab96:	4770      	bx	lr

0800ab98 <_fini>:
 800ab98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9a:	bf00      	nop
 800ab9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab9e:	bc08      	pop	{r3}
 800aba0:	469e      	mov	lr, r3
 800aba2:	4770      	bx	lr
