
cube_gen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fcc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004178  08004178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041c8  080041c8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080041c8  080041c8  000141c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041d0  080041d0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041d4  080041d4  000141d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080041d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000080  08004258  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08004258  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d642  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e92  00000000  00000000  0002d6f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002f588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002ffd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d88  00000000  00000000  00030960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7de  00000000  00000000  000596e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9b7f  00000000  00000000  00065ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015fa45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f0  00000000  00000000  0015fa98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000080 	.word	0x20000080
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004160 	.word	0x08004160

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000084 	.word	0x20000084
 80001e8:	08004160 	.word	0x08004160

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000504:	f000 face 	bl	8000aa4 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000508:	f000 f830 	bl	800056c <SystemClock_Config>
	BSP_LED_Init(LED2); // BLUE
 800050c:	2001      	movs	r0, #1
 800050e:	f000 fa49 	bl	80009a4 <BSP_LED_Init>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000512:	f000 f8c7 	bl	80006a4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000516:	f000 f89f 	bl	8000658 <MX_DMA_Init>
	MX_USART1_UART_Init();
 800051a:	f000 f86d 	bl	80005f8 <MX_USART1_UART_Init>
	//while (1);

	while (1) {
		/*##-1- Start the transmission process #####################################*/
		/* User start transmission data through "TxBuffer" buffer */
		if(HAL_UART_Transmit_DMA(&huart1, (uint8_t*)aTxStartMessage, TXSTARTMESSAGESIZE)!= HAL_OK) {
 800051e:	4811      	ldr	r0, [pc, #68]	; (8000564 <main+0x64>)
 8000520:	f7ff fe64 	bl	80001ec <strlen>
 8000524:	4603      	mov	r3, r0
 8000526:	b29b      	uxth	r3, r3
 8000528:	3b01      	subs	r3, #1
 800052a:	b29b      	uxth	r3, r3
 800052c:	461a      	mov	r2, r3
 800052e:	490d      	ldr	r1, [pc, #52]	; (8000564 <main+0x64>)
 8000530:	480d      	ldr	r0, [pc, #52]	; (8000568 <main+0x68>)
 8000532:	f002 fc3b 	bl	8002dac <HAL_UART_Transmit_DMA>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <main+0x40>
			Error_Handler(); /* Transfer error in transmission process */
 800053c:	f000 f8d6 	bl	80006ec <Error_Handler>
			state of the peripheral; if it's busy you need to wait for the end of current
			transfer before starting a new one.
			For simplicity reasons, this example is just waiting till the end of the
			transfer, but application may perform other tasks while transfer operation
			is ongoing. */
		while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000540:	bf00      	nop
 8000542:	4809      	ldr	r0, [pc, #36]	; (8000568 <main+0x68>)
 8000544:	f002 ffce 	bl	80034e4 <HAL_UART_GetState>
 8000548:	4603      	mov	r3, r0
 800054a:	2b20      	cmp	r3, #32
 800054c:	d1f9      	bne.n	8000542 <main+0x42>

		/*##-7- Wait for the end of the transfer ###################################*/
		//while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);

		/* Turn on LED2 if test passes then enter infinite loop */
		BSP_LED_On(LED2); // BLUE
 800054e:	2001      	movs	r0, #1
 8000550:	f000 fa74 	bl	8000a3c <BSP_LED_On>
		HAL_Delay(100);
 8000554:	2064      	movs	r0, #100	; 0x64
 8000556:	f000 fb19 	bl	8000b8c <HAL_Delay>
		BSP_LED_Off(LED2); // BLUE
 800055a:	2001      	movs	r0, #1
 800055c:	f000 fa88 	bl	8000a70 <BSP_LED_Off>
		if(HAL_UART_Transmit_DMA(&huart1, (uint8_t*)aTxStartMessage, TXSTARTMESSAGESIZE)!= HAL_OK) {
 8000560:	e7dd      	b.n	800051e <main+0x1e>
 8000562:	bf00      	nop
 8000564:	20000000 	.word	0x20000000
 8000568:	2000009c 	.word	0x2000009c

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b096      	sub	sp, #88	; 0x58
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2244      	movs	r2, #68	; 0x44
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 fde8 	bl	8004150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800058e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000592:	f001 f85f 	bl	8001654 <HAL_PWREx_ControlVoltageScaling>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800059c:	f000 f8a6 	bl	80006ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005a0:	2310      	movs	r3, #16
 80005a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005ac:	2360      	movs	r3, #96	; 0x60
 80005ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 f8a1 	bl	8001700 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005c4:	f000 f892 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005dc:	463b      	mov	r3, r7
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fca7 	bl	8001f34 <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005ec:	f000 f87e 	bl	80006ec <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3758      	adds	r7, #88	; 0x58
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_USART1_UART_Init+0x54>)
 80005fe:	4a14      	ldr	r2, [pc, #80]	; (8000650 <MX_USART1_UART_Init+0x58>)
 8000600:	601a      	str	r2, [r3, #0]
  //huart1.Init.BaudRate = 38400;
  huart1.Init.BaudRate = 74880;
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_USART1_UART_Init+0x54>)
 8000604:	4a13      	ldr	r2, [pc, #76]	; (8000654 <MX_USART1_UART_Init+0x5c>)
 8000606:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <MX_USART1_UART_Init+0x54>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_USART1_UART_Init+0x54>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  //huart1.Init.Parity = UART_PARITY_ODD;
  huart1.Init.Parity = UART_PARITY_NONE;
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <MX_USART1_UART_Init+0x54>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_USART1_UART_Init+0x54>)
 800061c:	220c      	movs	r2, #12
 800061e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <MX_USART1_UART_Init+0x54>)
 8000622:	2200      	movs	r2, #0
 8000624:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_USART1_UART_Init+0x54>)
 8000628:	2200      	movs	r2, #0
 800062a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <MX_USART1_UART_Init+0x54>)
 800062e:	2200      	movs	r2, #0
 8000630:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_USART1_UART_Init+0x54>)
 8000634:	2200      	movs	r2, #0
 8000636:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_USART1_UART_Init+0x54>)
 800063a:	f002 fb69 	bl	8002d10 <HAL_UART_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000644:	f000 f852 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000009c 	.word	0x2000009c
 8000650:	40013800 	.word	0x40013800
 8000654:	00012480 	.word	0x00012480

08000658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_DMA_Init+0x48>)
 8000660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000662:	4a0f      	ldr	r2, [pc, #60]	; (80006a0 <MX_DMA_Init+0x48>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6493      	str	r3, [r2, #72]	; 0x48
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MX_DMA_Init+0x48>)
 800066c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	200e      	movs	r0, #14
 800067c:	f000 fb85 	bl	8000d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000680:	200e      	movs	r0, #14
 8000682:	f000 fb9e 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	200f      	movs	r0, #15
 800068c:	f000 fb7d 	bl	8000d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000690:	200f      	movs	r0, #15
 8000692:	f000 fb96 	bl	8000dc2 <HAL_NVIC_EnableIRQ>

}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_GPIO_Init+0x44>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <MX_GPIO_Init+0x44>)
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_GPIO_Init+0x44>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_GPIO_Init+0x44>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <MX_GPIO_Init+0x44>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_GPIO_Init+0x44>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40021000 	.word	0x40021000

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <Error_Handler+0x8>
	...

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <HAL_MspInit+0x44>)
 8000700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <HAL_MspInit+0x44>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6613      	str	r3, [r2, #96]	; 0x60
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <HAL_MspInit+0x44>)
 800070c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <HAL_MspInit+0x44>)
 8000718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071a:	4a08      	ldr	r2, [pc, #32]	; (800073c <HAL_MspInit+0x44>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000720:	6593      	str	r3, [r2, #88]	; 0x58
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_MspInit+0x44>)
 8000724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000

08000740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b0ac      	sub	sp, #176	; 0xb0
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	228c      	movs	r2, #140	; 0x8c
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f003 fcf5 	bl	8004150 <memset>
  if(huart->Instance==USART1)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a5b      	ldr	r2, [pc, #364]	; (80008d8 <HAL_UART_MspInit+0x198>)
 800076c:	4293      	cmp	r3, r2
 800076e:	f040 80af 	bne.w	80008d0 <HAL_UART_MspInit+0x190>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000772:	2301      	movs	r3, #1
 8000774:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000776:	2300      	movs	r3, #0
 8000778:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	4618      	mov	r0, r3
 8000780:	f001 fdfc 	bl	800237c <HAL_RCCEx_PeriphCLKConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800078a:	f7ff ffaf 	bl	80006ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800078e:	4b53      	ldr	r3, [pc, #332]	; (80008dc <HAL_UART_MspInit+0x19c>)
 8000790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000792:	4a52      	ldr	r2, [pc, #328]	; (80008dc <HAL_UART_MspInit+0x19c>)
 8000794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000798:	6613      	str	r3, [r2, #96]	; 0x60
 800079a:	4b50      	ldr	r3, [pc, #320]	; (80008dc <HAL_UART_MspInit+0x19c>)
 800079c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b4d      	ldr	r3, [pc, #308]	; (80008dc <HAL_UART_MspInit+0x19c>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a4c      	ldr	r2, [pc, #304]	; (80008dc <HAL_UART_MspInit+0x19c>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b4a      	ldr	r3, [pc, #296]	; (80008dc <HAL_UART_MspInit+0x19c>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007d8:	2307      	movs	r3, #7
 80007da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007e2:	4619      	mov	r1, r3
 80007e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e8:	f000 fd7c 	bl	80012e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000806:	2307      	movs	r3, #7
 8000808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000810:	4619      	mov	r1, r3
 8000812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000816:	f000 fd65 	bl	80012e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800081a:	4b31      	ldr	r3, [pc, #196]	; (80008e0 <HAL_UART_MspInit+0x1a0>)
 800081c:	4a31      	ldr	r2, [pc, #196]	; (80008e4 <HAL_UART_MspInit+0x1a4>)
 800081e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000820:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <HAL_UART_MspInit+0x1a0>)
 8000822:	2202      	movs	r2, #2
 8000824:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000826:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <HAL_UART_MspInit+0x1a0>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800082c:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <HAL_UART_MspInit+0x1a0>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000832:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <HAL_UART_MspInit+0x1a0>)
 8000834:	2280      	movs	r2, #128	; 0x80
 8000836:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000838:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <HAL_UART_MspInit+0x1a0>)
 800083a:	2200      	movs	r2, #0
 800083c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800083e:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <HAL_UART_MspInit+0x1a0>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000844:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <HAL_UART_MspInit+0x1a0>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800084a:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <HAL_UART_MspInit+0x1a0>)
 800084c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000850:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000852:	4823      	ldr	r0, [pc, #140]	; (80008e0 <HAL_UART_MspInit+0x1a0>)
 8000854:	f000 fad0 	bl	8000df8 <HAL_DMA_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 800085e:	f7ff ff45 	bl	80006ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a1e      	ldr	r2, [pc, #120]	; (80008e0 <HAL_UART_MspInit+0x1a0>)
 8000866:	671a      	str	r2, [r3, #112]	; 0x70
 8000868:	4a1d      	ldr	r2, [pc, #116]	; (80008e0 <HAL_UART_MspInit+0x1a0>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800086e:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <HAL_UART_MspInit+0x1a8>)
 8000870:	4a1e      	ldr	r2, [pc, #120]	; (80008ec <HAL_UART_MspInit+0x1ac>)
 8000872:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8000874:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <HAL_UART_MspInit+0x1a8>)
 8000876:	2202      	movs	r2, #2
 8000878:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800087a:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <HAL_UART_MspInit+0x1a8>)
 800087c:	2210      	movs	r2, #16
 800087e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <HAL_UART_MspInit+0x1a8>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <HAL_UART_MspInit+0x1a8>)
 8000888:	2280      	movs	r2, #128	; 0x80
 800088a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <HAL_UART_MspInit+0x1a8>)
 800088e:	2200      	movs	r2, #0
 8000890:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <HAL_UART_MspInit+0x1a8>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <HAL_UART_MspInit+0x1a8>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_UART_MspInit+0x1a8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80008a4:	4810      	ldr	r0, [pc, #64]	; (80008e8 <HAL_UART_MspInit+0x1a8>)
 80008a6:	f000 faa7 	bl	8000df8 <HAL_DMA_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <HAL_UART_MspInit+0x174>
    {
      Error_Handler();
 80008b0:	f7ff ff1c 	bl	80006ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <HAL_UART_MspInit+0x1a8>)
 80008b8:	66da      	str	r2, [r3, #108]	; 0x6c
 80008ba:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <HAL_UART_MspInit+0x1a8>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	2025      	movs	r0, #37	; 0x25
 80008c6:	f000 fa60 	bl	8000d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008ca:	2025      	movs	r0, #37	; 0x25
 80008cc:	f000 fa79 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008d0:	bf00      	nop
 80008d2:	37b0      	adds	r7, #176	; 0xb0
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40013800 	.word	0x40013800
 80008dc:	40021000 	.word	0x40021000
 80008e0:	20000120 	.word	0x20000120
 80008e4:	40020058 	.word	0x40020058
 80008e8:	20000168 	.word	0x20000168
 80008ec:	40020044 	.word	0x40020044

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093c:	f000 f906 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <DMA1_Channel4_IRQHandler+0x10>)
 800094a:	f000 fbec 	bl	8001126 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000168 	.word	0x20000168

08000958 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800095c:	4802      	ldr	r0, [pc, #8]	; (8000968 <DMA1_Channel5_IRQHandler+0x10>)
 800095e:	f000 fbe2 	bl	8001126 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000120 	.word	0x20000120

0800096c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000970:	4802      	ldr	r0, [pc, #8]	; (800097c <USART1_IRQHandler+0x10>)
 8000972:	f002 faab 	bl	8002ecc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000009c 	.word	0x2000009c

08000980 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <SystemInit+0x20>)
 8000986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098a:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <SystemInit+0x20>)
 800098c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d10c      	bne.n	80009ce <BSP_LED_Init+0x2a>
 80009b4:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <BSP_LED_Init+0x8c>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b8:	4a1d      	ldr	r2, [pc, #116]	; (8000a30 <BSP_LED_Init+0x8c>)
 80009ba:	f043 0304 	orr.w	r3, r3, #4
 80009be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <BSP_LED_Init+0x8c>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	e00b      	b.n	80009e6 <BSP_LED_Init+0x42>
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <BSP_LED_Init+0x8c>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <BSP_LED_Init+0x8c>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <BSP_LED_Init+0x8c>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <BSP_LED_Init+0x90>)
 80009ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f8:	2302      	movs	r3, #2
 80009fa:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <BSP_LED_Init+0x94>)
 8000a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a04:	f107 0214 	add.w	r2, r7, #20
 8000a08:	4611      	mov	r1, r2
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 fc6a 	bl	80012e4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <BSP_LED_Init+0x94>)
 8000a14:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	4a06      	ldr	r2, [pc, #24]	; (8000a34 <BSP_LED_Init+0x90>)
 8000a1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a20:	2200      	movs	r2, #0
 8000a22:	4619      	mov	r1, r3
 8000a24:	f000 fdf0 	bl	8001608 <HAL_GPIO_WritePin>
}
 8000a28:	bf00      	nop
 8000a2a:	3728      	adds	r7, #40	; 0x28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40021000 	.word	0x40021000
 8000a34:	080041c0 	.word	0x080041c0
 8000a38:	2000006c 	.word	0x2000006c

08000a3c <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <BSP_LED_On+0x2c>)
 8000a4a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	4a06      	ldr	r2, [pc, #24]	; (8000a6c <BSP_LED_On+0x30>)
 8000a52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a56:	2201      	movs	r2, #1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f000 fdd5 	bl	8001608 <HAL_GPIO_WritePin>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000006c 	.word	0x2000006c
 8000a6c:	080041c0 	.word	0x080041c0

08000a70 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <BSP_LED_Off+0x2c>)
 8000a7e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4a06      	ldr	r2, [pc, #24]	; (8000aa0 <BSP_LED_Off+0x30>)
 8000a86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f000 fdbb 	bl	8001608 <HAL_GPIO_WritePin>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000006c 	.word	0x2000006c
 8000aa0:	080041c0 	.word	0x080041c0

08000aa4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aae:	2003      	movs	r0, #3
 8000ab0:	f000 f960 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab4:	200f      	movs	r0, #15
 8000ab6:	f000 f80d 	bl	8000ad4 <HAL_InitTick>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d002      	beq.n	8000ac6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	71fb      	strb	r3, [r7, #7]
 8000ac4:	e001      	b.n	8000aca <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac6:	f7ff fe17 	bl	80006f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aca:	79fb      	ldrb	r3, [r7, #7]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <HAL_InitTick+0x6c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d023      	beq.n	8000b30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <HAL_InitTick+0x70>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_InitTick+0x6c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f96d 	bl	8000dde <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d10f      	bne.n	8000b2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d809      	bhi.n	8000b24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f000 f937 	bl	8000d8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_InitTick+0x74>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
 8000b22:	e007      	b.n	8000b34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	73fb      	strb	r3, [r7, #15]
 8000b28:	e004      	b.n	8000b34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	73fb      	strb	r3, [r7, #15]
 8000b2e:	e001      	b.n	8000b34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000007c 	.word	0x2000007c
 8000b44:	20000068 	.word	0x20000068
 8000b48:	20000078 	.word	0x20000078

08000b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x20>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x24>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_IncTick+0x24>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	2000007c 	.word	0x2000007c
 8000b70:	200001b0 	.word	0x200001b0

08000b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <HAL_GetTick+0x14>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	200001b0 	.word	0x200001b0

08000b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b94:	f7ff ffee 	bl	8000b74 <HAL_GetTick>
 8000b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba4:	d005      	beq.n	8000bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HAL_Delay+0x44>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bb2:	bf00      	nop
 8000bb4:	f7ff ffde 	bl	8000b74 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d8f7      	bhi.n	8000bb4 <HAL_Delay+0x28>
  {
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000007c 	.word	0x2000007c

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db0b      	blt.n	8000c62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4907      	ldr	r1, [pc, #28]	; (8000c70 <__NVIC_EnableIRQ+0x38>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	; (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	; 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d40:	d301      	bcc.n	8000d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00f      	b.n	8000d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <SysTick_Config+0x40>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4e:	210f      	movs	r1, #15
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f7ff ff8e 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <SysTick_Config+0x40>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <SysTick_Config+0x40>)
 8000d60:	2207      	movs	r2, #7
 8000d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff29 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9c:	f7ff ff3e 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000da0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	f7ff ff8e 	bl	8000cc8 <NVIC_EncodePriority>
 8000dac:	4602      	mov	r2, r0
 8000dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff5d 	bl	8000c74 <__NVIC_SetPriority>
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff31 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ffa2 	bl	8000d30 <SysTick_Config>
 8000dec:	4603      	mov	r3, r0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e098      	b.n	8000f3c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b4d      	ldr	r3, [pc, #308]	; (8000f48 <HAL_DMA_Init+0x150>)
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d80f      	bhi.n	8000e36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b4b      	ldr	r3, [pc, #300]	; (8000f4c <HAL_DMA_Init+0x154>)
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a4b      	ldr	r2, [pc, #300]	; (8000f50 <HAL_DMA_Init+0x158>)
 8000e22:	fba2 2303 	umull	r2, r3, r2, r3
 8000e26:	091b      	lsrs	r3, r3, #4
 8000e28:	009a      	lsls	r2, r3, #2
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a48      	ldr	r2, [pc, #288]	; (8000f54 <HAL_DMA_Init+0x15c>)
 8000e32:	641a      	str	r2, [r3, #64]	; 0x40
 8000e34:	e00e      	b.n	8000e54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b46      	ldr	r3, [pc, #280]	; (8000f58 <HAL_DMA_Init+0x160>)
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a43      	ldr	r2, [pc, #268]	; (8000f50 <HAL_DMA_Init+0x158>)
 8000e42:	fba2 2303 	umull	r2, r3, r2, r3
 8000e46:	091b      	lsrs	r3, r3, #4
 8000e48:	009a      	lsls	r2, r3, #2
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a42      	ldr	r2, [pc, #264]	; (8000f5c <HAL_DMA_Init+0x164>)
 8000e52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2202      	movs	r2, #2
 8000e58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a1b      	ldr	r3, [r3, #32]
 8000e96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000eae:	d039      	beq.n	8000f24 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	4a27      	ldr	r2, [pc, #156]	; (8000f54 <HAL_DMA_Init+0x15c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d11a      	bne.n	8000ef0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000eba:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <HAL_DMA_Init+0x168>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	f003 031c 	and.w	r3, r3, #28
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	4924      	ldr	r1, [pc, #144]	; (8000f60 <HAL_DMA_Init+0x168>)
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ed4:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <HAL_DMA_Init+0x168>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6859      	ldr	r1, [r3, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee0:	f003 031c 	and.w	r3, r3, #28
 8000ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee8:	491d      	ldr	r1, [pc, #116]	; (8000f60 <HAL_DMA_Init+0x168>)
 8000eea:	4313      	orrs	r3, r2
 8000eec:	600b      	str	r3, [r1, #0]
 8000eee:	e019      	b.n	8000f24 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <HAL_DMA_Init+0x16c>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef8:	f003 031c 	and.w	r3, r3, #28
 8000efc:	210f      	movs	r1, #15
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	4917      	ldr	r1, [pc, #92]	; (8000f64 <HAL_DMA_Init+0x16c>)
 8000f06:	4013      	ands	r3, r2
 8000f08:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_DMA_Init+0x16c>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6859      	ldr	r1, [r3, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f003 031c 	and.w	r3, r3, #28
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	4911      	ldr	r1, [pc, #68]	; (8000f64 <HAL_DMA_Init+0x16c>)
 8000f20:	4313      	orrs	r3, r2
 8000f22:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	40020407 	.word	0x40020407
 8000f4c:	bffdfff8 	.word	0xbffdfff8
 8000f50:	cccccccd 	.word	0xcccccccd
 8000f54:	40020000 	.word	0x40020000
 8000f58:	bffdfbf8 	.word	0xbffdfbf8
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	400200a8 	.word	0x400200a8
 8000f64:	400204a8 	.word	0x400204a8

08000f68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d101      	bne.n	8000f88 <HAL_DMA_Start_IT+0x20>
 8000f84:	2302      	movs	r3, #2
 8000f86:	e04b      	b.n	8001020 <HAL_DMA_Start_IT+0xb8>
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d13a      	bne.n	8001012 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 0201 	bic.w	r2, r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	68b9      	ldr	r1, [r7, #8]
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f000 f95f 	bl	8001284 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d008      	beq.n	8000fe0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f042 020e 	orr.w	r2, r2, #14
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e00f      	b.n	8001000 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 0204 	bic.w	r2, r2, #4
 8000fee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 020a 	orr.w	r2, r2, #10
 8000ffe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	e005      	b.n	800101e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800101a:	2302      	movs	r3, #2
 800101c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800101e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d008      	beq.n	8001052 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2204      	movs	r2, #4
 8001044:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e022      	b.n	8001098 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 020e 	bic.w	r2, r2, #14
 8001060:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 0201 	bic.w	r2, r2, #1
 8001070:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f003 021c 	and.w	r2, r3, #28
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f202 	lsl.w	r2, r1, r2
 8001084:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001096:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001098:	4618      	mov	r0, r3
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d005      	beq.n	80010c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2204      	movs	r2, #4
 80010c0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	e029      	b.n	800111c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 020e 	bic.w	r2, r2, #14
 80010d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0201 	bic.w	r2, r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ec:	f003 021c 	and.w	r2, r3, #28
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	2101      	movs	r1, #1
 80010f6:	fa01 f202 	lsl.w	r2, r1, r2
 80010fa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	4798      	blx	r3
    }
  }
  return status;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	f003 031c 	and.w	r3, r3, #28
 8001146:	2204      	movs	r2, #4
 8001148:	409a      	lsls	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4013      	ands	r3, r2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d026      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x7a>
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	2b00      	cmp	r3, #0
 800115a:	d021      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0320 	and.w	r3, r3, #32
 8001166:	2b00      	cmp	r3, #0
 8001168:	d107      	bne.n	800117a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0204 	bic.w	r2, r2, #4
 8001178:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f003 021c 	and.w	r2, r3, #28
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	2104      	movs	r1, #4
 8001188:	fa01 f202 	lsl.w	r2, r1, r2
 800118c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	2b00      	cmp	r3, #0
 8001194:	d071      	beq.n	800127a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800119e:	e06c      	b.n	800127a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a4:	f003 031c 	and.w	r3, r3, #28
 80011a8:	2202      	movs	r2, #2
 80011aa:	409a      	lsls	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d02e      	beq.n	8001212 <HAL_DMA_IRQHandler+0xec>
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d029      	beq.n	8001212 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0320 	and.w	r3, r3, #32
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d10b      	bne.n	80011e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 020a 	bic.w	r2, r2, #10
 80011da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	f003 021c 	and.w	r2, r3, #28
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	2102      	movs	r1, #2
 80011f2:	fa01 f202 	lsl.w	r2, r1, r2
 80011f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001204:	2b00      	cmp	r3, #0
 8001206:	d038      	beq.n	800127a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001210:	e033      	b.n	800127a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f003 031c 	and.w	r3, r3, #28
 800121a:	2208      	movs	r2, #8
 800121c:	409a      	lsls	r2, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4013      	ands	r3, r2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d02a      	beq.n	800127c <HAL_DMA_IRQHandler+0x156>
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	2b00      	cmp	r3, #0
 800122e:	d025      	beq.n	800127c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 020e 	bic.w	r2, r2, #14
 800123e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001244:	f003 021c 	and.w	r2, r3, #28
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	2101      	movs	r1, #1
 800124e:	fa01 f202 	lsl.w	r2, r1, r2
 8001252:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126e:	2b00      	cmp	r3, #0
 8001270:	d004      	beq.n	800127c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800127a:	bf00      	nop
 800127c:	bf00      	nop
}
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f003 021c 	and.w	r2, r3, #28
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	2101      	movs	r1, #1
 80012a0:	fa01 f202 	lsl.w	r2, r1, r2
 80012a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b10      	cmp	r3, #16
 80012b4:	d108      	bne.n	80012c8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012c6:	e007      	b.n	80012d8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	60da      	str	r2, [r3, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f2:	e166      	b.n	80015c2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2101      	movs	r1, #1
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001300:	4013      	ands	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8158 	beq.w	80015bc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b01      	cmp	r3, #1
 8001316:	d005      	beq.n	8001324 <HAL_GPIO_Init+0x40>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d130      	bne.n	8001386 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800135a:	2201      	movs	r2, #1
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	091b      	lsrs	r3, r3, #4
 8001370:	f003 0201 	and.w	r2, r3, #1
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b03      	cmp	r3, #3
 8001390:	d017      	beq.n	80013c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	2203      	movs	r2, #3
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d123      	bne.n	8001416 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	08da      	lsrs	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3208      	adds	r2, #8
 80013d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	220f      	movs	r2, #15
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	691a      	ldr	r2, [r3, #16]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	08da      	lsrs	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3208      	adds	r2, #8
 8001410:	6939      	ldr	r1, [r7, #16]
 8001412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0203 	and.w	r2, r3, #3
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 80b2 	beq.w	80015bc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001458:	4b61      	ldr	r3, [pc, #388]	; (80015e0 <HAL_GPIO_Init+0x2fc>)
 800145a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145c:	4a60      	ldr	r2, [pc, #384]	; (80015e0 <HAL_GPIO_Init+0x2fc>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6613      	str	r3, [r2, #96]	; 0x60
 8001464:	4b5e      	ldr	r3, [pc, #376]	; (80015e0 <HAL_GPIO_Init+0x2fc>)
 8001466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001470:	4a5c      	ldr	r2, [pc, #368]	; (80015e4 <HAL_GPIO_Init+0x300>)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	3302      	adds	r3, #2
 8001478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	220f      	movs	r2, #15
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800149a:	d02b      	beq.n	80014f4 <HAL_GPIO_Init+0x210>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a52      	ldr	r2, [pc, #328]	; (80015e8 <HAL_GPIO_Init+0x304>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d025      	beq.n	80014f0 <HAL_GPIO_Init+0x20c>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a51      	ldr	r2, [pc, #324]	; (80015ec <HAL_GPIO_Init+0x308>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d01f      	beq.n	80014ec <HAL_GPIO_Init+0x208>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a50      	ldr	r2, [pc, #320]	; (80015f0 <HAL_GPIO_Init+0x30c>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d019      	beq.n	80014e8 <HAL_GPIO_Init+0x204>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a4f      	ldr	r2, [pc, #316]	; (80015f4 <HAL_GPIO_Init+0x310>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d013      	beq.n	80014e4 <HAL_GPIO_Init+0x200>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a4e      	ldr	r2, [pc, #312]	; (80015f8 <HAL_GPIO_Init+0x314>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d00d      	beq.n	80014e0 <HAL_GPIO_Init+0x1fc>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a4d      	ldr	r2, [pc, #308]	; (80015fc <HAL_GPIO_Init+0x318>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d007      	beq.n	80014dc <HAL_GPIO_Init+0x1f8>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a4c      	ldr	r2, [pc, #304]	; (8001600 <HAL_GPIO_Init+0x31c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d101      	bne.n	80014d8 <HAL_GPIO_Init+0x1f4>
 80014d4:	2307      	movs	r3, #7
 80014d6:	e00e      	b.n	80014f6 <HAL_GPIO_Init+0x212>
 80014d8:	2308      	movs	r3, #8
 80014da:	e00c      	b.n	80014f6 <HAL_GPIO_Init+0x212>
 80014dc:	2306      	movs	r3, #6
 80014de:	e00a      	b.n	80014f6 <HAL_GPIO_Init+0x212>
 80014e0:	2305      	movs	r3, #5
 80014e2:	e008      	b.n	80014f6 <HAL_GPIO_Init+0x212>
 80014e4:	2304      	movs	r3, #4
 80014e6:	e006      	b.n	80014f6 <HAL_GPIO_Init+0x212>
 80014e8:	2303      	movs	r3, #3
 80014ea:	e004      	b.n	80014f6 <HAL_GPIO_Init+0x212>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e002      	b.n	80014f6 <HAL_GPIO_Init+0x212>
 80014f0:	2301      	movs	r3, #1
 80014f2:	e000      	b.n	80014f6 <HAL_GPIO_Init+0x212>
 80014f4:	2300      	movs	r3, #0
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	f002 0203 	and.w	r2, r2, #3
 80014fc:	0092      	lsls	r2, r2, #2
 80014fe:	4093      	lsls	r3, r2
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001506:	4937      	ldr	r1, [pc, #220]	; (80015e4 <HAL_GPIO_Init+0x300>)
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3302      	adds	r3, #2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001514:	4b3b      	ldr	r3, [pc, #236]	; (8001604 <HAL_GPIO_Init+0x320>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	43db      	mvns	r3, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001538:	4a32      	ldr	r2, [pc, #200]	; (8001604 <HAL_GPIO_Init+0x320>)
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800153e:	4b31      	ldr	r3, [pc, #196]	; (8001604 <HAL_GPIO_Init+0x320>)
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	43db      	mvns	r3, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001562:	4a28      	ldr	r2, [pc, #160]	; (8001604 <HAL_GPIO_Init+0x320>)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001568:	4b26      	ldr	r3, [pc, #152]	; (8001604 <HAL_GPIO_Init+0x320>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_GPIO_Init+0x320>)
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <HAL_GPIO_Init+0x320>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015b6:	4a13      	ldr	r2, [pc, #76]	; (8001604 <HAL_GPIO_Init+0x320>)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	3301      	adds	r3, #1
 80015c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	fa22 f303 	lsr.w	r3, r2, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f47f ae91 	bne.w	80012f4 <HAL_GPIO_Init+0x10>
  }
}
 80015d2:	bf00      	nop
 80015d4:	bf00      	nop
 80015d6:	371c      	adds	r7, #28
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010000 	.word	0x40010000
 80015e8:	48000400 	.word	0x48000400
 80015ec:	48000800 	.word	0x48000800
 80015f0:	48000c00 	.word	0x48000c00
 80015f4:	48001000 	.word	0x48001000
 80015f8:	48001400 	.word	0x48001400
 80015fc:	48001800 	.word	0x48001800
 8001600:	48001c00 	.word	0x48001c00
 8001604:	40010400 	.word	0x40010400

08001608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	807b      	strh	r3, [r7, #2]
 8001614:	4613      	mov	r3, r2
 8001616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001618:	787b      	ldrb	r3, [r7, #1]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800161e:	887a      	ldrh	r2, [r7, #2]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001624:	e002      	b.n	800162c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <HAL_PWREx_GetVoltageRange+0x18>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40007000 	.word	0x40007000

08001654 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001662:	d130      	bne.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001664:	4b23      	ldr	r3, [pc, #140]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800166c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001670:	d038      	beq.n	80016e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001672:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800167a:	4a1e      	ldr	r2, [pc, #120]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800167c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001680:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001682:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2232      	movs	r2, #50	; 0x32
 8001688:	fb02 f303 	mul.w	r3, r2, r3
 800168c:	4a1b      	ldr	r2, [pc, #108]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	0c9b      	lsrs	r3, r3, #18
 8001694:	3301      	adds	r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001698:	e002      	b.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3b01      	subs	r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ac:	d102      	bne.n	80016b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f2      	bne.n	800169a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c0:	d110      	bne.n	80016e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e00f      	b.n	80016e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d2:	d007      	beq.n	80016e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016dc:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40007000 	.word	0x40007000
 80016f8:	20000068 	.word	0x20000068
 80016fc:	431bde83 	.word	0x431bde83

08001700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	f000 bc08 	b.w	8001f24 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001714:	4b96      	ldr	r3, [pc, #600]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 030c 	and.w	r3, r3, #12
 800171c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800171e:	4b94      	ldr	r3, [pc, #592]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 80e4 	beq.w	80018fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d007      	beq.n	800174c <HAL_RCC_OscConfig+0x4c>
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b0c      	cmp	r3, #12
 8001740:	f040 808b 	bne.w	800185a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2b01      	cmp	r3, #1
 8001748:	f040 8087 	bne.w	800185a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800174c:	4b88      	ldr	r3, [pc, #544]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_RCC_OscConfig+0x64>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e3df      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1a      	ldr	r2, [r3, #32]
 8001768:	4b81      	ldr	r3, [pc, #516]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d004      	beq.n	800177e <HAL_RCC_OscConfig+0x7e>
 8001774:	4b7e      	ldr	r3, [pc, #504]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800177c:	e005      	b.n	800178a <HAL_RCC_OscConfig+0x8a>
 800177e:	4b7c      	ldr	r3, [pc, #496]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800178a:	4293      	cmp	r3, r2
 800178c:	d223      	bcs.n	80017d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fd92 	bl	80022bc <RCC_SetFlashLatencyFromMSIRange>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e3c0      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017a2:	4b73      	ldr	r3, [pc, #460]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a72      	ldr	r2, [pc, #456]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80017a8:	f043 0308 	orr.w	r3, r3, #8
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b70      	ldr	r3, [pc, #448]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	496d      	ldr	r1, [pc, #436]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017c0:	4b6b      	ldr	r3, [pc, #428]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	4968      	ldr	r1, [pc, #416]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
 80017d4:	e025      	b.n	8001822 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d6:	4b66      	ldr	r3, [pc, #408]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a65      	ldr	r2, [pc, #404]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80017dc:	f043 0308 	orr.w	r3, r3, #8
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	4b63      	ldr	r3, [pc, #396]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	4960      	ldr	r1, [pc, #384]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f4:	4b5e      	ldr	r3, [pc, #376]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	021b      	lsls	r3, r3, #8
 8001802:	495b      	ldr	r1, [pc, #364]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	4618      	mov	r0, r3
 8001814:	f000 fd52 	bl	80022bc <RCC_SetFlashLatencyFromMSIRange>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e380      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001822:	f000 fc87 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 8001826:	4602      	mov	r2, r0
 8001828:	4b51      	ldr	r3, [pc, #324]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	091b      	lsrs	r3, r3, #4
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	4950      	ldr	r1, [pc, #320]	; (8001974 <HAL_RCC_OscConfig+0x274>)
 8001834:	5ccb      	ldrb	r3, [r1, r3]
 8001836:	f003 031f 	and.w	r3, r3, #31
 800183a:	fa22 f303 	lsr.w	r3, r2, r3
 800183e:	4a4e      	ldr	r2, [pc, #312]	; (8001978 <HAL_RCC_OscConfig+0x278>)
 8001840:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001842:	4b4e      	ldr	r3, [pc, #312]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff f944 	bl	8000ad4 <HAL_InitTick>
 800184c:	4603      	mov	r3, r0
 800184e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d052      	beq.n	80018fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	e364      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d032      	beq.n	80018c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001862:	4b43      	ldr	r3, [pc, #268]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a42      	ldr	r2, [pc, #264]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800186e:	f7ff f981 	bl	8000b74 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001876:	f7ff f97d 	bl	8000b74 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e34d      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001888:	4b39      	ldr	r3, [pc, #228]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001894:	4b36      	ldr	r3, [pc, #216]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a35      	ldr	r2, [pc, #212]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 800189a:	f043 0308 	orr.w	r3, r3, #8
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b33      	ldr	r3, [pc, #204]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4930      	ldr	r1, [pc, #192]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018b2:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	021b      	lsls	r3, r3, #8
 80018c0:	492b      	ldr	r1, [pc, #172]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	604b      	str	r3, [r1, #4]
 80018c6:	e01a      	b.n	80018fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018c8:	4b29      	ldr	r3, [pc, #164]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a28      	ldr	r2, [pc, #160]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80018ce:	f023 0301 	bic.w	r3, r3, #1
 80018d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018d4:	f7ff f94e 	bl	8000b74 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018dc:	f7ff f94a 	bl	8000b74 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e31a      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x1dc>
 80018fa:	e000      	b.n	80018fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d073      	beq.n	80019f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	2b08      	cmp	r3, #8
 800190e:	d005      	beq.n	800191c <HAL_RCC_OscConfig+0x21c>
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2b0c      	cmp	r3, #12
 8001914:	d10e      	bne.n	8001934 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2b03      	cmp	r3, #3
 800191a:	d10b      	bne.n	8001934 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d063      	beq.n	80019f0 <HAL_RCC_OscConfig+0x2f0>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d15f      	bne.n	80019f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e2f7      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193c:	d106      	bne.n	800194c <HAL_RCC_OscConfig+0x24c>
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e025      	b.n	8001998 <HAL_RCC_OscConfig+0x298>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001954:	d114      	bne.n	8001980 <HAL_RCC_OscConfig+0x280>
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 800195c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b03      	ldr	r3, [pc, #12]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a02      	ldr	r2, [pc, #8]	; (8001970 <HAL_RCC_OscConfig+0x270>)
 8001968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e013      	b.n	8001998 <HAL_RCC_OscConfig+0x298>
 8001970:	40021000 	.word	0x40021000
 8001974:	08004178 	.word	0x08004178
 8001978:	20000068 	.word	0x20000068
 800197c:	20000078 	.word	0x20000078
 8001980:	4ba0      	ldr	r3, [pc, #640]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a9f      	ldr	r2, [pc, #636]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	4b9d      	ldr	r3, [pc, #628]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a9c      	ldr	r2, [pc, #624]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d013      	beq.n	80019c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a0:	f7ff f8e8 	bl	8000b74 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a8:	f7ff f8e4 	bl	8000b74 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	; 0x64
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e2b4      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ba:	4b92      	ldr	r3, [pc, #584]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCC_OscConfig+0x2a8>
 80019c6:	e014      	b.n	80019f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff f8d4 	bl	8000b74 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff f8d0 	bl	8000b74 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	; 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e2a0      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019e2:	4b88      	ldr	r3, [pc, #544]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x2d0>
 80019ee:	e000      	b.n	80019f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d060      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d005      	beq.n	8001a10 <HAL_RCC_OscConfig+0x310>
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2b0c      	cmp	r3, #12
 8001a08:	d119      	bne.n	8001a3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d116      	bne.n	8001a3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a10:	4b7c      	ldr	r3, [pc, #496]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_OscConfig+0x328>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e27d      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a28:	4b76      	ldr	r3, [pc, #472]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	061b      	lsls	r3, r3, #24
 8001a36:	4973      	ldr	r1, [pc, #460]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a3c:	e040      	b.n	8001ac0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d023      	beq.n	8001a8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a46:	4b6f      	ldr	r3, [pc, #444]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a6e      	ldr	r2, [pc, #440]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a52:	f7ff f88f 	bl	8000b74 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a5a:	f7ff f88b 	bl	8000b74 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e25b      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a6c:	4b65      	ldr	r3, [pc, #404]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a78:	4b62      	ldr	r3, [pc, #392]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	061b      	lsls	r3, r3, #24
 8001a86:	495f      	ldr	r1, [pc, #380]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
 8001a8c:	e018      	b.n	8001ac0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a5c      	ldr	r2, [pc, #368]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9a:	f7ff f86b 	bl	8000b74 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa2:	f7ff f867 	bl	8000b74 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e237      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ab4:	4b53      	ldr	r3, [pc, #332]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1f0      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d03c      	beq.n	8001b46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d01c      	beq.n	8001b0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad4:	4b4b      	ldr	r3, [pc, #300]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ada:	4a4a      	ldr	r2, [pc, #296]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae4:	f7ff f846 	bl	8000b74 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aec:	f7ff f842 	bl	8000b74 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e212      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001afe:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0ef      	beq.n	8001aec <HAL_RCC_OscConfig+0x3ec>
 8001b0c:	e01b      	b.n	8001b46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b14:	4a3b      	ldr	r2, [pc, #236]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001b16:	f023 0301 	bic.w	r3, r3, #1
 8001b1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1e:	f7ff f829 	bl	8000b74 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b26:	f7ff f825 	bl	8000b74 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e1f5      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b38:	4b32      	ldr	r3, [pc, #200]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1ef      	bne.n	8001b26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 80a6 	beq.w	8001ca0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b58:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10d      	bne.n	8001b80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b64:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b68:	4a26      	ldr	r2, [pc, #152]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b80:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <HAL_RCC_OscConfig+0x508>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d118      	bne.n	8001bbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b8c:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <HAL_RCC_OscConfig+0x508>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1d      	ldr	r2, [pc, #116]	; (8001c08 <HAL_RCC_OscConfig+0x508>)
 8001b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b98:	f7fe ffec 	bl	8000b74 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba0:	f7fe ffe8 	bl	8000b74 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e1b8      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_RCC_OscConfig+0x508>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d108      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x4d8>
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bd6:	e029      	b.n	8001c2c <HAL_RCC_OscConfig+0x52c>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b05      	cmp	r3, #5
 8001bde:	d115      	bne.n	8001c0c <HAL_RCC_OscConfig+0x50c>
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be6:	4a07      	ldr	r2, [pc, #28]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001be8:	f043 0304 	orr.w	r3, r3, #4
 8001bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf6:	4a03      	ldr	r2, [pc, #12]	; (8001c04 <HAL_RCC_OscConfig+0x504>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c00:	e014      	b.n	8001c2c <HAL_RCC_OscConfig+0x52c>
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40007000 	.word	0x40007000
 8001c0c:	4b9d      	ldr	r3, [pc, #628]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c12:	4a9c      	ldr	r2, [pc, #624]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c1c:	4b99      	ldr	r3, [pc, #612]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c22:	4a98      	ldr	r2, [pc, #608]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001c24:	f023 0304 	bic.w	r3, r3, #4
 8001c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d016      	beq.n	8001c62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7fe ff9e 	bl	8000b74 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3c:	f7fe ff9a 	bl	8000b74 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e168      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c52:	4b8c      	ldr	r3, [pc, #560]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0ed      	beq.n	8001c3c <HAL_RCC_OscConfig+0x53c>
 8001c60:	e015      	b.n	8001c8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c62:	f7fe ff87 	bl	8000b74 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c68:	e00a      	b.n	8001c80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6a:	f7fe ff83 	bl	8000b74 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e151      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c80:	4b80      	ldr	r3, [pc, #512]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1ed      	bne.n	8001c6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c8e:	7ffb      	ldrb	r3, [r7, #31]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d105      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c94:	4b7b      	ldr	r3, [pc, #492]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c98:	4a7a      	ldr	r2, [pc, #488]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0320 	and.w	r3, r3, #32
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d03c      	beq.n	8001d26 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d01c      	beq.n	8001cee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cb4:	4b73      	ldr	r3, [pc, #460]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001cb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cba:	4a72      	ldr	r2, [pc, #456]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc4:	f7fe ff56 	bl	8000b74 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ccc:	f7fe ff52 	bl	8000b74 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e122      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cde:	4b69      	ldr	r3, [pc, #420]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0ef      	beq.n	8001ccc <HAL_RCC_OscConfig+0x5cc>
 8001cec:	e01b      	b.n	8001d26 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cee:	4b65      	ldr	r3, [pc, #404]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001cf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cf4:	4a63      	ldr	r2, [pc, #396]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001cf6:	f023 0301 	bic.w	r3, r3, #1
 8001cfa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfe:	f7fe ff39 	bl	8000b74 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d06:	f7fe ff35 	bl	8000b74 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e105      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d18:	4b5a      	ldr	r3, [pc, #360]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ef      	bne.n	8001d06 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 80f9 	beq.w	8001f22 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	f040 80cf 	bne.w	8001ed8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d3a:	4b52      	ldr	r3, [pc, #328]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0203 	and.w	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d12c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d123      	bne.n	8001da8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d11b      	bne.n	8001da8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d113      	bne.n	8001da8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8a:	085b      	lsrs	r3, r3, #1
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d109      	bne.n	8001da8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	3b01      	subs	r3, #1
 8001da2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d071      	beq.n	8001e8c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	2b0c      	cmp	r3, #12
 8001dac:	d068      	beq.n	8001e80 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dae:	4b35      	ldr	r3, [pc, #212]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d105      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001dba:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e0ac      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dca:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a2d      	ldr	r2, [pc, #180]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001dd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dd4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dd6:	f7fe fecd 	bl	8000b74 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dde:	f7fe fec9 	bl	8000b74 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e099      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f0      	bne.n	8001dde <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <HAL_RCC_OscConfig+0x788>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e0c:	3a01      	subs	r2, #1
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	4311      	orrs	r1, r2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e16:	0212      	lsls	r2, r2, #8
 8001e18:	4311      	orrs	r1, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e1e:	0852      	lsrs	r2, r2, #1
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0552      	lsls	r2, r2, #21
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e2a:	0852      	lsrs	r2, r2, #1
 8001e2c:	3a01      	subs	r2, #1
 8001e2e:	0652      	lsls	r2, r2, #25
 8001e30:	4311      	orrs	r1, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e36:	06d2      	lsls	r2, r2, #27
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	4912      	ldr	r1, [pc, #72]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e40:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0f      	ldr	r2, [pc, #60]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	4a0c      	ldr	r2, [pc, #48]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e58:	f7fe fe8c 	bl	8000b74 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e60:	f7fe fe88 	bl	8000b74 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e058      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <HAL_RCC_OscConfig+0x784>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e7e:	e050      	b.n	8001f22 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e04f      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
 8001e84:	40021000 	.word	0x40021000
 8001e88:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d144      	bne.n	8001f22 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e98:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a23      	ldr	r2, [pc, #140]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ea2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ea4:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4a20      	ldr	r2, [pc, #128]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001eb0:	f7fe fe60 	bl	8000b74 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7fe fe5c 	bl	8000b74 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e02c      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eca:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x7b8>
 8001ed6:	e024      	b.n	8001f22 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2b0c      	cmp	r3, #12
 8001edc:	d01f      	beq.n	8001f1e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ede:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001ee4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7fe fe43 	bl	8000b74 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7fe fe3f 	bl	8000b74 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e00f      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	4905      	ldr	r1, [pc, #20]	; (8001f2c <HAL_RCC_OscConfig+0x82c>)
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_RCC_OscConfig+0x830>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60cb      	str	r3, [r1, #12]
 8001f1c:	e001      	b.n	8001f22 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3720      	adds	r7, #32
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	feeefffc 	.word	0xfeeefffc

08001f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0e7      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f48:	4b75      	ldr	r3, [pc, #468]	; (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d910      	bls.n	8001f78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4b72      	ldr	r3, [pc, #456]	; (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 0207 	bic.w	r2, r3, #7
 8001f5e:	4970      	ldr	r1, [pc, #448]	; (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f66:	4b6e      	ldr	r3, [pc, #440]	; (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d001      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0cf      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d010      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	4b66      	ldr	r3, [pc, #408]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d908      	bls.n	8001fa6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f94:	4b63      	ldr	r3, [pc, #396]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	4960      	ldr	r1, [pc, #384]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d04c      	beq.n	800204c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d107      	bne.n	8001fca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fba:	4b5a      	ldr	r3, [pc, #360]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d121      	bne.n	800200a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e0a6      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d107      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fd2:	4b54      	ldr	r3, [pc, #336]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d115      	bne.n	800200a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e09a      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fea:	4b4e      	ldr	r3, [pc, #312]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e08e      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ffa:	4b4a      	ldr	r3, [pc, #296]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e086      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800200a:	4b46      	ldr	r3, [pc, #280]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f023 0203 	bic.w	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4943      	ldr	r1, [pc, #268]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8002018:	4313      	orrs	r3, r2
 800201a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800201c:	f7fe fdaa 	bl	8000b74 <HAL_GetTick>
 8002020:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002022:	e00a      	b.n	800203a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002024:	f7fe fda6 	bl	8000b74 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e06e      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	4b3a      	ldr	r3, [pc, #232]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 020c 	and.w	r2, r3, #12
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	429a      	cmp	r2, r3
 800204a:	d1eb      	bne.n	8002024 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d010      	beq.n	800207a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	4b31      	ldr	r3, [pc, #196]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002064:	429a      	cmp	r2, r3
 8002066:	d208      	bcs.n	800207a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002068:	4b2e      	ldr	r3, [pc, #184]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	492b      	ldr	r1, [pc, #172]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800207a:	4b29      	ldr	r3, [pc, #164]	; (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d210      	bcs.n	80020aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002088:	4b25      	ldr	r3, [pc, #148]	; (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 0207 	bic.w	r2, r3, #7
 8002090:	4923      	ldr	r1, [pc, #140]	; (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	4313      	orrs	r3, r2
 8002096:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002098:	4b21      	ldr	r3, [pc, #132]	; (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d001      	beq.n	80020aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e036      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d008      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b6:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	4918      	ldr	r1, [pc, #96]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d4:	4b13      	ldr	r3, [pc, #76]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4910      	ldr	r1, [pc, #64]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020e8:	f000 f824 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	091b      	lsrs	r3, r3, #4
 80020f4:	f003 030f 	and.w	r3, r3, #15
 80020f8:	490b      	ldr	r1, [pc, #44]	; (8002128 <HAL_RCC_ClockConfig+0x1f4>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
 8002104:	4a09      	ldr	r2, [pc, #36]	; (800212c <HAL_RCC_ClockConfig+0x1f8>)
 8002106:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002108:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_RCC_ClockConfig+0x1fc>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fce1 	bl	8000ad4 <HAL_InitTick>
 8002112:	4603      	mov	r3, r0
 8002114:	72fb      	strb	r3, [r7, #11]

  return status;
 8002116:	7afb      	ldrb	r3, [r7, #11]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40022000 	.word	0x40022000
 8002124:	40021000 	.word	0x40021000
 8002128:	08004178 	.word	0x08004178
 800212c:	20000068 	.word	0x20000068
 8002130:	20000078 	.word	0x20000078

08002134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	; 0x24
 8002138:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002142:	4b3e      	ldr	r3, [pc, #248]	; (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800214c:	4b3b      	ldr	r3, [pc, #236]	; (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x34>
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d121      	bne.n	80021a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d11e      	bne.n	80021a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002168:	4b34      	ldr	r3, [pc, #208]	; (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d107      	bne.n	8002184 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002174:	4b31      	ldr	r3, [pc, #196]	; (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 8002176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	e005      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002184:	4b2d      	ldr	r3, [pc, #180]	; (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002190:	4a2b      	ldr	r2, [pc, #172]	; (8002240 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002198:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10d      	bne.n	80021bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d102      	bne.n	80021b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021ac:	4b25      	ldr	r3, [pc, #148]	; (8002244 <HAL_RCC_GetSysClockFreq+0x110>)
 80021ae:	61bb      	str	r3, [r7, #24]
 80021b0:	e004      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021b8:	4b23      	ldr	r3, [pc, #140]	; (8002248 <HAL_RCC_GetSysClockFreq+0x114>)
 80021ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	2b0c      	cmp	r3, #12
 80021c0:	d134      	bne.n	800222c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d003      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0xa6>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d003      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0xac>
 80021d8:	e005      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021da:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <HAL_RCC_GetSysClockFreq+0x110>)
 80021dc:	617b      	str	r3, [r7, #20]
      break;
 80021de:	e005      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_RCC_GetSysClockFreq+0x114>)
 80021e2:	617b      	str	r3, [r7, #20]
      break;
 80021e4:	e002      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	617b      	str	r3, [r7, #20]
      break;
 80021ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021ec:	4b13      	ldr	r3, [pc, #76]	; (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	3301      	adds	r3, #1
 80021f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021fa:	4b10      	ldr	r3, [pc, #64]	; (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	fb03 f202 	mul.w	r2, r3, r2
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002210:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	0e5b      	lsrs	r3, r3, #25
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	3301      	adds	r3, #1
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800222c:	69bb      	ldr	r3, [r7, #24]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3724      	adds	r7, #36	; 0x24
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	08004190 	.word	0x08004190
 8002244:	00f42400 	.word	0x00f42400
 8002248:	007a1200 	.word	0x007a1200

0800224c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <HAL_RCC_GetHCLKFreq+0x14>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000068 	.word	0x20000068

08002264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002268:	f7ff fff0 	bl	800224c <HAL_RCC_GetHCLKFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4904      	ldr	r1, [pc, #16]	; (800228c <HAL_RCC_GetPCLK1Freq+0x28>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002284:	4618      	mov	r0, r3
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000
 800228c:	08004188 	.word	0x08004188

08002290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002294:	f7ff ffda 	bl	800224c <HAL_RCC_GetHCLKFreq>
 8002298:	4602      	mov	r2, r0
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	0adb      	lsrs	r3, r3, #11
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	4904      	ldr	r1, [pc, #16]	; (80022b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022a6:	5ccb      	ldrb	r3, [r1, r3]
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000
 80022b8:	08004188 	.word	0x08004188

080022bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022c8:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022d4:	f7ff f9b0 	bl	8001638 <HAL_PWREx_GetVoltageRange>
 80022d8:	6178      	str	r0, [r7, #20]
 80022da:	e014      	b.n	8002306 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022dc:	4b25      	ldr	r3, [pc, #148]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e0:	4a24      	ldr	r2, [pc, #144]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e6:	6593      	str	r3, [r2, #88]	; 0x58
 80022e8:	4b22      	ldr	r3, [pc, #136]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022f4:	f7ff f9a0 	bl	8001638 <HAL_PWREx_GetVoltageRange>
 80022f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022fa:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	4a1d      	ldr	r2, [pc, #116]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002304:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800230c:	d10b      	bne.n	8002326 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b80      	cmp	r3, #128	; 0x80
 8002312:	d919      	bls.n	8002348 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2ba0      	cmp	r3, #160	; 0xa0
 8002318:	d902      	bls.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800231a:	2302      	movs	r3, #2
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	e013      	b.n	8002348 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002320:	2301      	movs	r3, #1
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	e010      	b.n	8002348 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b80      	cmp	r3, #128	; 0x80
 800232a:	d902      	bls.n	8002332 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800232c:	2303      	movs	r3, #3
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	e00a      	b.n	8002348 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b80      	cmp	r3, #128	; 0x80
 8002336:	d102      	bne.n	800233e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002338:	2302      	movs	r3, #2
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	e004      	b.n	8002348 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b70      	cmp	r3, #112	; 0x70
 8002342:	d101      	bne.n	8002348 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002344:	2301      	movs	r3, #1
 8002346:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 0207 	bic.w	r2, r3, #7
 8002350:	4909      	ldr	r1, [pc, #36]	; (8002378 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002358:	4b07      	ldr	r3, [pc, #28]	; (8002378 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	429a      	cmp	r2, r3
 8002364:	d001      	beq.n	800236a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	40022000 	.word	0x40022000

0800237c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002384:	2300      	movs	r3, #0
 8002386:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002388:	2300      	movs	r3, #0
 800238a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002394:	2b00      	cmp	r3, #0
 8002396:	d041      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800239c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023a0:	d02a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80023a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023a6:	d824      	bhi.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023ac:	d008      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023b2:	d81e      	bhi.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023bc:	d010      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023be:	e018      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023c0:	4b86      	ldr	r3, [pc, #536]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4a85      	ldr	r2, [pc, #532]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023cc:	e015      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3304      	adds	r3, #4
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 facd 	bl	8002974 <RCCEx_PLLSAI1_Config>
 80023da:	4603      	mov	r3, r0
 80023dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023de:	e00c      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3320      	adds	r3, #32
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fbb6 	bl	8002b58 <RCCEx_PLLSAI2_Config>
 80023ec:	4603      	mov	r3, r0
 80023ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023f0:	e003      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	74fb      	strb	r3, [r7, #19]
      break;
 80023f6:	e000      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023fa:	7cfb      	ldrb	r3, [r7, #19]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10b      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002400:	4b76      	ldr	r3, [pc, #472]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800240e:	4973      	ldr	r1, [pc, #460]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002416:	e001      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d041      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800242c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002430:	d02a      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002432:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002436:	d824      	bhi.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002438:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800243c:	d008      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800243e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002442:	d81e      	bhi.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800244c:	d010      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800244e:	e018      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002450:	4b62      	ldr	r3, [pc, #392]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4a61      	ldr	r2, [pc, #388]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800245c:	e015      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3304      	adds	r3, #4
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f000 fa85 	bl	8002974 <RCCEx_PLLSAI1_Config>
 800246a:	4603      	mov	r3, r0
 800246c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800246e:	e00c      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3320      	adds	r3, #32
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fb6e 	bl	8002b58 <RCCEx_PLLSAI2_Config>
 800247c:	4603      	mov	r3, r0
 800247e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002480:	e003      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	74fb      	strb	r3, [r7, #19]
      break;
 8002486:	e000      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800248a:	7cfb      	ldrb	r3, [r7, #19]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10b      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002490:	4b52      	ldr	r3, [pc, #328]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800249e:	494f      	ldr	r1, [pc, #316]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024a6:	e001      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80a0 	beq.w	80025fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ba:	2300      	movs	r3, #0
 80024bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024be:	4b47      	ldr	r3, [pc, #284]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024ce:	2300      	movs	r3, #0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00d      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d4:	4b41      	ldr	r3, [pc, #260]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d8:	4a40      	ldr	r2, [pc, #256]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024de:	6593      	str	r3, [r2, #88]	; 0x58
 80024e0:	4b3e      	ldr	r3, [pc, #248]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ec:	2301      	movs	r3, #1
 80024ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024f0:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a3a      	ldr	r2, [pc, #232]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024fc:	f7fe fb3a 	bl	8000b74 <HAL_GetTick>
 8002500:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002502:	e009      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002504:	f7fe fb36 	bl	8000b74 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d902      	bls.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	74fb      	strb	r3, [r7, #19]
        break;
 8002516:	e005      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002518:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ef      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002524:	7cfb      	ldrb	r3, [r7, #19]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d15c      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800252a:	4b2c      	ldr	r3, [pc, #176]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002534:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01f      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	429a      	cmp	r2, r3
 8002546:	d019      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002548:	4b24      	ldr	r3, [pc, #144]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002552:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002554:	4b21      	ldr	r3, [pc, #132]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255a:	4a20      	ldr	r2, [pc, #128]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002564:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256a:	4a1c      	ldr	r2, [pc, #112]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002574:	4a19      	ldr	r2, [pc, #100]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d016      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002586:	f7fe faf5 	bl	8000b74 <HAL_GetTick>
 800258a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258c:	e00b      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7fe faf1 	bl	8000b74 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d902      	bls.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	74fb      	strb	r3, [r7, #19]
            break;
 80025a4:	e006      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a6:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ec      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025b4:	7cfb      	ldrb	r3, [r7, #19]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	4904      	ldr	r1, [pc, #16]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025d2:	e009      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025d4:	7cfb      	ldrb	r3, [r7, #19]
 80025d6:	74bb      	strb	r3, [r7, #18]
 80025d8:	e006      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e4:	7cfb      	ldrb	r3, [r7, #19]
 80025e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025e8:	7c7b      	ldrb	r3, [r7, #17]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d105      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ee:	4ba6      	ldr	r3, [pc, #664]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f2:	4aa5      	ldr	r2, [pc, #660]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002606:	4ba0      	ldr	r3, [pc, #640]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260c:	f023 0203 	bic.w	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002614:	499c      	ldr	r1, [pc, #624]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002628:	4b97      	ldr	r3, [pc, #604]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	f023 020c 	bic.w	r2, r3, #12
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002636:	4994      	ldr	r1, [pc, #592]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800264a:	4b8f      	ldr	r3, [pc, #572]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800264c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002650:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	498b      	ldr	r1, [pc, #556]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800266c:	4b86      	ldr	r3, [pc, #536]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	4983      	ldr	r1, [pc, #524]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0310 	and.w	r3, r3, #16
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800268e:	4b7e      	ldr	r3, [pc, #504]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002694:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269c:	497a      	ldr	r1, [pc, #488]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026b0:	4b75      	ldr	r3, [pc, #468]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	4972      	ldr	r1, [pc, #456]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026d2:	4b6d      	ldr	r3, [pc, #436]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e0:	4969      	ldr	r1, [pc, #420]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026f4:	4b64      	ldr	r3, [pc, #400]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002702:	4961      	ldr	r1, [pc, #388]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002716:	4b5c      	ldr	r3, [pc, #368]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002724:	4958      	ldr	r1, [pc, #352]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002738:	4b53      	ldr	r3, [pc, #332]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002746:	4950      	ldr	r1, [pc, #320]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800275a:	4b4b      	ldr	r3, [pc, #300]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800275c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002760:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002768:	4947      	ldr	r1, [pc, #284]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800277c:	4b42      	ldr	r3, [pc, #264]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800277e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002782:	f023 0203 	bic.w	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278a:	493f      	ldr	r1, [pc, #252]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d028      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800279e:	4b3a      	ldr	r3, [pc, #232]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	4936      	ldr	r1, [pc, #216]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027bc:	d106      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027be:	4b32      	ldr	r3, [pc, #200]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	4a31      	ldr	r2, [pc, #196]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027c8:	60d3      	str	r3, [r2, #12]
 80027ca:	e011      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027d4:	d10c      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3304      	adds	r3, #4
 80027da:	2101      	movs	r1, #1
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 f8c9 	bl	8002974 <RCCEx_PLLSAI1_Config>
 80027e2:	4603      	mov	r3, r0
 80027e4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027e6:	7cfb      	ldrb	r3, [r7, #19]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80027ec:	7cfb      	ldrb	r3, [r7, #19]
 80027ee:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d028      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027fc:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002802:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280a:	491f      	ldr	r1, [pc, #124]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002816:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800281a:	d106      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800281c:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4a19      	ldr	r2, [pc, #100]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002826:	60d3      	str	r3, [r2, #12]
 8002828:	e011      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002832:	d10c      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3304      	adds	r3, #4
 8002838:	2101      	movs	r1, #1
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f89a 	bl	8002974 <RCCEx_PLLSAI1_Config>
 8002840:	4603      	mov	r3, r0
 8002842:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002844:	7cfb      	ldrb	r3, [r7, #19]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d02a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800285c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002860:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002868:	4907      	ldr	r1, [pc, #28]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002874:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002878:	d108      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800287a:	4b03      	ldr	r3, [pc, #12]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	4a02      	ldr	r2, [pc, #8]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002880:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002884:	60d3      	str	r3, [r2, #12]
 8002886:	e013      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002888:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002890:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002894:	d10c      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3304      	adds	r3, #4
 800289a:	2101      	movs	r1, #1
 800289c:	4618      	mov	r0, r3
 800289e:	f000 f869 	bl	8002974 <RCCEx_PLLSAI1_Config>
 80028a2:	4603      	mov	r3, r0
 80028a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028a6:	7cfb      	ldrb	r3, [r7, #19]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d02f      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028bc:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ca:	4929      	ldr	r1, [pc, #164]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028da:	d10d      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3304      	adds	r3, #4
 80028e0:	2102      	movs	r1, #2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 f846 	bl	8002974 <RCCEx_PLLSAI1_Config>
 80028e8:	4603      	mov	r3, r0
 80028ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ec:	7cfb      	ldrb	r3, [r7, #19]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d014      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80028f2:	7cfb      	ldrb	r3, [r7, #19]
 80028f4:	74bb      	strb	r3, [r7, #18]
 80028f6:	e011      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002900:	d10c      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3320      	adds	r3, #32
 8002906:	2102      	movs	r1, #2
 8002908:	4618      	mov	r0, r3
 800290a:	f000 f925 	bl	8002b58 <RCCEx_PLLSAI2_Config>
 800290e:	4603      	mov	r3, r0
 8002910:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002912:	7cfb      	ldrb	r3, [r7, #19]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00b      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002938:	490d      	ldr	r1, [pc, #52]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00b      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800294c:	4b08      	ldr	r3, [pc, #32]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800295c:	4904      	ldr	r1, [pc, #16]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002964:	7cbb      	ldrb	r3, [r7, #18]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000

08002974 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002982:	4b74      	ldr	r3, [pc, #464]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d018      	beq.n	80029c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800298e:	4b71      	ldr	r3, [pc, #452]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0203 	and.w	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d10d      	bne.n	80029ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
       ||
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029a6:	4b6b      	ldr	r3, [pc, #428]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
       ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d047      	beq.n	8002a4a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	e044      	b.n	8002a4a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d018      	beq.n	80029fa <RCCEx_PLLSAI1_Config+0x86>
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d825      	bhi.n	8002a18 <RCCEx_PLLSAI1_Config+0xa4>
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d002      	beq.n	80029d6 <RCCEx_PLLSAI1_Config+0x62>
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d009      	beq.n	80029e8 <RCCEx_PLLSAI1_Config+0x74>
 80029d4:	e020      	b.n	8002a18 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029d6:	4b5f      	ldr	r3, [pc, #380]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d11d      	bne.n	8002a1e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e6:	e01a      	b.n	8002a1e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029e8:	4b5a      	ldr	r3, [pc, #360]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d116      	bne.n	8002a22 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f8:	e013      	b.n	8002a22 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029fa:	4b56      	ldr	r3, [pc, #344]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10f      	bne.n	8002a26 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a06:	4b53      	ldr	r3, [pc, #332]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a16:	e006      	b.n	8002a26 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1c:	e004      	b.n	8002a28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a1e:	bf00      	nop
 8002a20:	e002      	b.n	8002a28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a22:	bf00      	nop
 8002a24:	e000      	b.n	8002a28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a26:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10d      	bne.n	8002a4a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a2e:	4b49      	ldr	r3, [pc, #292]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6819      	ldr	r1, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	430b      	orrs	r3, r1
 8002a44:	4943      	ldr	r1, [pc, #268]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d17c      	bne.n	8002b4a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a50:	4b40      	ldr	r3, [pc, #256]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a3f      	ldr	r2, [pc, #252]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a5c:	f7fe f88a 	bl	8000b74 <HAL_GetTick>
 8002a60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a62:	e009      	b.n	8002a78 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a64:	f7fe f886 	bl	8000b74 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d902      	bls.n	8002a78 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	73fb      	strb	r3, [r7, #15]
        break;
 8002a76:	e005      	b.n	8002a84 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a78:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1ef      	bne.n	8002a64 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d15f      	bne.n	8002b4a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d110      	bne.n	8002ab2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a90:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002a98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6892      	ldr	r2, [r2, #8]
 8002aa0:	0211      	lsls	r1, r2, #8
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68d2      	ldr	r2, [r2, #12]
 8002aa6:	06d2      	lsls	r2, r2, #27
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	492a      	ldr	r1, [pc, #168]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	610b      	str	r3, [r1, #16]
 8002ab0:	e027      	b.n	8002b02 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d112      	bne.n	8002ade <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ab8:	4b26      	ldr	r3, [pc, #152]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ac0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6892      	ldr	r2, [r2, #8]
 8002ac8:	0211      	lsls	r1, r2, #8
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6912      	ldr	r2, [r2, #16]
 8002ace:	0852      	lsrs	r2, r2, #1
 8002ad0:	3a01      	subs	r2, #1
 8002ad2:	0552      	lsls	r2, r2, #21
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	491f      	ldr	r1, [pc, #124]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	610b      	str	r3, [r1, #16]
 8002adc:	e011      	b.n	8002b02 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ade:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ae6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6892      	ldr	r2, [r2, #8]
 8002aee:	0211      	lsls	r1, r2, #8
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6952      	ldr	r2, [r2, #20]
 8002af4:	0852      	lsrs	r2, r2, #1
 8002af6:	3a01      	subs	r2, #1
 8002af8:	0652      	lsls	r2, r2, #25
 8002afa:	430a      	orrs	r2, r1
 8002afc:	4915      	ldr	r1, [pc, #84]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b02:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a13      	ldr	r2, [pc, #76]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b0c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0e:	f7fe f831 	bl	8000b74 <HAL_GetTick>
 8002b12:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b14:	e009      	b.n	8002b2a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b16:	f7fe f82d 	bl	8000b74 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d902      	bls.n	8002b2a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	73fb      	strb	r3, [r7, #15]
          break;
 8002b28:	e005      	b.n	8002b36 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0ef      	beq.n	8002b16 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d106      	bne.n	8002b4a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	4903      	ldr	r1, [pc, #12]	; (8002b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40021000 	.word	0x40021000

08002b58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b66:	4b69      	ldr	r3, [pc, #420]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d018      	beq.n	8002ba4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b72:	4b66      	ldr	r3, [pc, #408]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f003 0203 	and.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d10d      	bne.n	8002b9e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
       ||
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b8a:	4b60      	ldr	r3, [pc, #384]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	091b      	lsrs	r3, r3, #4
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
       ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d047      	beq.n	8002c2e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
 8002ba2:	e044      	b.n	8002c2e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d018      	beq.n	8002bde <RCCEx_PLLSAI2_Config+0x86>
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d825      	bhi.n	8002bfc <RCCEx_PLLSAI2_Config+0xa4>
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d002      	beq.n	8002bba <RCCEx_PLLSAI2_Config+0x62>
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d009      	beq.n	8002bcc <RCCEx_PLLSAI2_Config+0x74>
 8002bb8:	e020      	b.n	8002bfc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bba:	4b54      	ldr	r3, [pc, #336]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d11d      	bne.n	8002c02 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bca:	e01a      	b.n	8002c02 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bcc:	4b4f      	ldr	r3, [pc, #316]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d116      	bne.n	8002c06 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bdc:	e013      	b.n	8002c06 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bde:	4b4b      	ldr	r3, [pc, #300]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10f      	bne.n	8002c0a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bea:	4b48      	ldr	r3, [pc, #288]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bfa:	e006      	b.n	8002c0a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002c00:	e004      	b.n	8002c0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c02:	bf00      	nop
 8002c04:	e002      	b.n	8002c0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c06:	bf00      	nop
 8002c08:	e000      	b.n	8002c0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10d      	bne.n	8002c2e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c12:	4b3e      	ldr	r3, [pc, #248]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6819      	ldr	r1, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	430b      	orrs	r3, r1
 8002c28:	4938      	ldr	r1, [pc, #224]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d166      	bne.n	8002d02 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c34:	4b35      	ldr	r3, [pc, #212]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a34      	ldr	r2, [pc, #208]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c40:	f7fd ff98 	bl	8000b74 <HAL_GetTick>
 8002c44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c46:	e009      	b.n	8002c5c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c48:	f7fd ff94 	bl	8000b74 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d902      	bls.n	8002c5c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	73fb      	strb	r3, [r7, #15]
        break;
 8002c5a:	e005      	b.n	8002c68 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c5c:	4b2b      	ldr	r3, [pc, #172]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1ef      	bne.n	8002c48 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d149      	bne.n	8002d02 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d110      	bne.n	8002c96 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c74:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002c7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6892      	ldr	r2, [r2, #8]
 8002c84:	0211      	lsls	r1, r2, #8
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68d2      	ldr	r2, [r2, #12]
 8002c8a:	06d2      	lsls	r2, r2, #27
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	491f      	ldr	r1, [pc, #124]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	614b      	str	r3, [r1, #20]
 8002c94:	e011      	b.n	8002cba <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c96:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6892      	ldr	r2, [r2, #8]
 8002ca6:	0211      	lsls	r1, r2, #8
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6912      	ldr	r2, [r2, #16]
 8002cac:	0852      	lsrs	r2, r2, #1
 8002cae:	3a01      	subs	r2, #1
 8002cb0:	0652      	lsls	r2, r2, #25
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	4915      	ldr	r1, [pc, #84]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002cba:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc6:	f7fd ff55 	bl	8000b74 <HAL_GetTick>
 8002cca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ccc:	e009      	b.n	8002ce2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cce:	f7fd ff51 	bl	8000b74 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d902      	bls.n	8002ce2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	73fb      	strb	r3, [r7, #15]
          break;
 8002ce0:	e005      	b.n	8002cee <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0ef      	beq.n	8002cce <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d106      	bne.n	8002d02 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	4903      	ldr	r1, [pc, #12]	; (8002d0c <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000

08002d10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e040      	b.n	8002da4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fd fd04 	bl	8000740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2224      	movs	r2, #36	; 0x24
 8002d3c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0201 	bic.w	r2, r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fbdc 	bl	800350c <UART_SetConfig>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e022      	b.n	8002da4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fe88 	bl	8003a7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 ff0f 	bl	8003bc0 <UART_CheckIdleState>
 8002da2:	4603      	mov	r3, r0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	; 0x28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	4613      	mov	r3, r2
 8002db8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	d178      	bne.n	8002eb4 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_UART_Transmit_DMA+0x22>
 8002dc8:	88fb      	ldrh	r3, [r7, #6]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e071      	b.n	8002eb6 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_UART_Transmit_DMA+0x34>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e06a      	b.n	8002eb6 <HAL_UART_Transmit_DMA+0x10a>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	88fa      	ldrh	r2, [r7, #6]
 8002df2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	88fa      	ldrh	r2, [r7, #6]
 8002dfa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2221      	movs	r2, #33	; 0x21
 8002e0a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d02b      	beq.n	8002e6c <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e18:	4a29      	ldr	r2, [pc, #164]	; (8002ec0 <HAL_UART_Transmit_DMA+0x114>)
 8002e1a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e20:	4a28      	ldr	r2, [pc, #160]	; (8002ec4 <HAL_UART_Transmit_DMA+0x118>)
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e28:	4a27      	ldr	r2, [pc, #156]	; (8002ec8 <HAL_UART_Transmit_DMA+0x11c>)
 8002e2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e30:	2200      	movs	r2, #0
 8002e32:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	3328      	adds	r3, #40	; 0x28
 8002e44:	461a      	mov	r2, r3
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	f7fe f88e 	bl	8000f68 <HAL_DMA_Start_IT>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00c      	beq.n	8002e6c <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2210      	movs	r2, #16
 8002e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e024      	b.n	8002eb6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2240      	movs	r2, #64	; 0x40
 8002e72:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3308      	adds	r3, #8
 8002e82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	e853 3f00 	ldrex	r3, [r3]
 8002e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	3308      	adds	r3, #8
 8002e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9c:	623a      	str	r2, [r7, #32]
 8002e9e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea0:	69f9      	ldr	r1, [r7, #28]
 8002ea2:	6a3a      	ldr	r2, [r7, #32]
 8002ea4:	e841 2300 	strex	r3, r2, [r1]
 8002ea8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1e5      	bne.n	8002e7c <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	e000      	b.n	8002eb6 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002eb4:	2302      	movs	r3, #2
  }
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3728      	adds	r7, #40	; 0x28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	08003eed 	.word	0x08003eed
 8002ec4:	08003f87 	.word	0x08003f87
 8002ec8:	08003fa3 	.word	0x08003fa3

08002ecc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b0ba      	sub	sp, #232	; 0xe8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ef2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002ef6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002efa:	4013      	ands	r3, r2
 8002efc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d115      	bne.n	8002f34 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00f      	beq.n	8002f34 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d009      	beq.n	8002f34 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 82a6 	beq.w	8003476 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	4798      	blx	r3
      }
      return;
 8002f32:	e2a0      	b.n	8003476 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002f34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 8117 	beq.w	800316c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f4e:	4b85      	ldr	r3, [pc, #532]	; (8003164 <HAL_UART_IRQHandler+0x298>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 810a 	beq.w	800316c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d011      	beq.n	8002f88 <HAL_UART_IRQHandler+0xbc>
 8002f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00b      	beq.n	8002f88 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2201      	movs	r2, #1
 8002f76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f7e:	f043 0201 	orr.w	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d011      	beq.n	8002fb8 <HAL_UART_IRQHandler+0xec>
 8002f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00b      	beq.n	8002fb8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fae:	f043 0204 	orr.w	r2, r3, #4
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d011      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x11c>
 8002fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00b      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fde:	f043 0202 	orr.w	r2, r3, #2
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d017      	beq.n	8003024 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d105      	bne.n	800300c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003004:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2208      	movs	r2, #8
 8003012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800301a:	f043 0208 	orr.w	r2, r3, #8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800302c:	2b00      	cmp	r3, #0
 800302e:	d012      	beq.n	8003056 <HAL_UART_IRQHandler+0x18a>
 8003030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003034:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00c      	beq.n	8003056 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003044:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800304c:	f043 0220 	orr.w	r2, r3, #32
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 820c 	beq.w	800347a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00d      	beq.n	800308a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800306e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b00      	cmp	r3, #0
 8003078:	d007      	beq.n	800308a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003090:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309e:	2b40      	cmp	r3, #64	; 0x40
 80030a0:	d005      	beq.n	80030ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d04f      	beq.n	800314e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 feb9 	bl	8003e26 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030be:	2b40      	cmp	r3, #64	; 0x40
 80030c0:	d141      	bne.n	8003146 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3308      	adds	r3, #8
 80030c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030d0:	e853 3f00 	ldrex	r3, [r3]
 80030d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3308      	adds	r3, #8
 80030ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80030fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030fe:	e841 2300 	strex	r3, r2, [r1]
 8003102:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1d9      	bne.n	80030c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003112:	2b00      	cmp	r3, #0
 8003114:	d013      	beq.n	800313e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	4a13      	ldr	r2, [pc, #76]	; (8003168 <HAL_UART_IRQHandler+0x29c>)
 800311c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd ffbe 	bl	80010a4 <HAL_DMA_Abort_IT>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d017      	beq.n	800315e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003138:	4610      	mov	r0, r2
 800313a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800313c:	e00f      	b.n	800315e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f9ba 	bl	80034b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003144:	e00b      	b.n	800315e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f9b6 	bl	80034b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800314c:	e007      	b.n	800315e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f9b2 	bl	80034b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800315c:	e18d      	b.n	800347a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800315e:	bf00      	nop
    return;
 8003160:	e18b      	b.n	800347a <HAL_UART_IRQHandler+0x5ae>
 8003162:	bf00      	nop
 8003164:	04000120 	.word	0x04000120
 8003168:	0800401f 	.word	0x0800401f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003170:	2b01      	cmp	r3, #1
 8003172:	f040 8146 	bne.w	8003402 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800317a:	f003 0310 	and.w	r3, r3, #16
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 813f 	beq.w	8003402 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 8138 	beq.w	8003402 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2210      	movs	r2, #16
 8003198:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a4:	2b40      	cmp	r3, #64	; 0x40
 80031a6:	f040 80b4 	bne.w	8003312 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 815f 	beq.w	800347e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80031c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031ca:	429a      	cmp	r2, r3
 80031cc:	f080 8157 	bcs.w	800347e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f040 8085 	bne.w	80032f6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031f8:	e853 3f00 	ldrex	r3, [r3]
 80031fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003200:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003208:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003216:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800321a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003222:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003226:	e841 2300 	strex	r3, r2, [r1]
 800322a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800322e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1da      	bne.n	80031ec <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	3308      	adds	r3, #8
 800323c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003240:	e853 3f00 	ldrex	r3, [r3]
 8003244:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003246:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3308      	adds	r3, #8
 8003256:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800325a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800325e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003260:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003262:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003266:	e841 2300 	strex	r3, r2, [r1]
 800326a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800326c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1e1      	bne.n	8003236 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3308      	adds	r3, #8
 8003278:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800327c:	e853 3f00 	ldrex	r3, [r3]
 8003280:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003288:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3308      	adds	r3, #8
 8003292:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003296:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003298:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800329c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800329e:	e841 2300 	strex	r3, r2, [r1]
 80032a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1e3      	bne.n	8003272 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2220      	movs	r2, #32
 80032ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032be:	e853 3f00 	ldrex	r3, [r3]
 80032c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032c6:	f023 0310 	bic.w	r3, r3, #16
 80032ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80032da:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032e0:	e841 2300 	strex	r3, r2, [r1]
 80032e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e4      	bne.n	80032b6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fd fe99 	bl	8001028 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003302:	b29b      	uxth	r3, r3
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	b29b      	uxth	r3, r3
 8003308:	4619      	mov	r1, r3
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f8de 	bl	80034cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003310:	e0b5      	b.n	800347e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800331e:	b29b      	uxth	r3, r3
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 80a7 	beq.w	8003482 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003334:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 80a2 	beq.w	8003482 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003346:	e853 3f00 	ldrex	r3, [r3]
 800334a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800334c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800334e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003352:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003360:	647b      	str	r3, [r7, #68]	; 0x44
 8003362:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003364:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003366:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003368:	e841 2300 	strex	r3, r2, [r1]
 800336c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800336e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1e4      	bne.n	800333e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3308      	adds	r3, #8
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	e853 3f00 	ldrex	r3, [r3]
 8003382:	623b      	str	r3, [r7, #32]
   return(result);
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	f023 0301 	bic.w	r3, r3, #1
 800338a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3308      	adds	r3, #8
 8003394:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003398:	633a      	str	r2, [r7, #48]	; 0x30
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800339e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033a0:	e841 2300 	strex	r3, r2, [r1]
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e3      	bne.n	8003374 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2220      	movs	r2, #32
 80033b0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	e853 3f00 	ldrex	r3, [r3]
 80033ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0310 	bic.w	r3, r3, #16
 80033d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	69b9      	ldr	r1, [r7, #24]
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	e841 2300 	strex	r3, r2, [r1]
 80033ec:	617b      	str	r3, [r7, #20]
   return(result);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e4      	bne.n	80033be <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033f8:	4619      	mov	r1, r3
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f866 	bl	80034cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003400:	e03f      	b.n	8003482 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00e      	beq.n	800342c <HAL_UART_IRQHandler+0x560>
 800340e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003422:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fe3a 	bl	800409e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800342a:	e02d      	b.n	8003488 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800342c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00e      	beq.n	8003456 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800343c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01c      	beq.n	8003486 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	4798      	blx	r3
    }
    return;
 8003454:	e017      	b.n	8003486 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	d012      	beq.n	8003488 <HAL_UART_IRQHandler+0x5bc>
 8003462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00c      	beq.n	8003488 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fdeb 	bl	800404a <UART_EndTransmit_IT>
    return;
 8003474:	e008      	b.n	8003488 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003476:	bf00      	nop
 8003478:	e006      	b.n	8003488 <HAL_UART_IRQHandler+0x5bc>
    return;
 800347a:	bf00      	nop
 800347c:	e004      	b.n	8003488 <HAL_UART_IRQHandler+0x5bc>
      return;
 800347e:	bf00      	nop
 8003480:	e002      	b.n	8003488 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003482:	bf00      	nop
 8003484:	e000      	b.n	8003488 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003486:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003488:	37e8      	adds	r7, #232	; 0xe8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop

08003490 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034f0:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034f6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	4313      	orrs	r3, r2
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
	...

0800350c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800350c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003510:	b08a      	sub	sp, #40	; 0x28
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	431a      	orrs	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	431a      	orrs	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	4313      	orrs	r3, r2
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4ba4      	ldr	r3, [pc, #656]	; (80037cc <UART_SetConfig+0x2c0>)
 800353c:	4013      	ands	r3, r2
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003544:	430b      	orrs	r3, r1
 8003546:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a99      	ldr	r2, [pc, #612]	; (80037d0 <UART_SetConfig+0x2c4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d004      	beq.n	8003578 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003574:	4313      	orrs	r3, r2
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003588:	430a      	orrs	r2, r1
 800358a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a90      	ldr	r2, [pc, #576]	; (80037d4 <UART_SetConfig+0x2c8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d126      	bne.n	80035e4 <UART_SetConfig+0xd8>
 8003596:	4b90      	ldr	r3, [pc, #576]	; (80037d8 <UART_SetConfig+0x2cc>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d81b      	bhi.n	80035dc <UART_SetConfig+0xd0>
 80035a4:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <UART_SetConfig+0xa0>)
 80035a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035aa:	bf00      	nop
 80035ac:	080035bd 	.word	0x080035bd
 80035b0:	080035cd 	.word	0x080035cd
 80035b4:	080035c5 	.word	0x080035c5
 80035b8:	080035d5 	.word	0x080035d5
 80035bc:	2301      	movs	r3, #1
 80035be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c2:	e116      	b.n	80037f2 <UART_SetConfig+0x2e6>
 80035c4:	2302      	movs	r3, #2
 80035c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ca:	e112      	b.n	80037f2 <UART_SetConfig+0x2e6>
 80035cc:	2304      	movs	r3, #4
 80035ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d2:	e10e      	b.n	80037f2 <UART_SetConfig+0x2e6>
 80035d4:	2308      	movs	r3, #8
 80035d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035da:	e10a      	b.n	80037f2 <UART_SetConfig+0x2e6>
 80035dc:	2310      	movs	r3, #16
 80035de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035e2:	e106      	b.n	80037f2 <UART_SetConfig+0x2e6>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a7c      	ldr	r2, [pc, #496]	; (80037dc <UART_SetConfig+0x2d0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d138      	bne.n	8003660 <UART_SetConfig+0x154>
 80035ee:	4b7a      	ldr	r3, [pc, #488]	; (80037d8 <UART_SetConfig+0x2cc>)
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f4:	f003 030c 	and.w	r3, r3, #12
 80035f8:	2b0c      	cmp	r3, #12
 80035fa:	d82d      	bhi.n	8003658 <UART_SetConfig+0x14c>
 80035fc:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <UART_SetConfig+0xf8>)
 80035fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003602:	bf00      	nop
 8003604:	08003639 	.word	0x08003639
 8003608:	08003659 	.word	0x08003659
 800360c:	08003659 	.word	0x08003659
 8003610:	08003659 	.word	0x08003659
 8003614:	08003649 	.word	0x08003649
 8003618:	08003659 	.word	0x08003659
 800361c:	08003659 	.word	0x08003659
 8003620:	08003659 	.word	0x08003659
 8003624:	08003641 	.word	0x08003641
 8003628:	08003659 	.word	0x08003659
 800362c:	08003659 	.word	0x08003659
 8003630:	08003659 	.word	0x08003659
 8003634:	08003651 	.word	0x08003651
 8003638:	2300      	movs	r3, #0
 800363a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800363e:	e0d8      	b.n	80037f2 <UART_SetConfig+0x2e6>
 8003640:	2302      	movs	r3, #2
 8003642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003646:	e0d4      	b.n	80037f2 <UART_SetConfig+0x2e6>
 8003648:	2304      	movs	r3, #4
 800364a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800364e:	e0d0      	b.n	80037f2 <UART_SetConfig+0x2e6>
 8003650:	2308      	movs	r3, #8
 8003652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003656:	e0cc      	b.n	80037f2 <UART_SetConfig+0x2e6>
 8003658:	2310      	movs	r3, #16
 800365a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800365e:	e0c8      	b.n	80037f2 <UART_SetConfig+0x2e6>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a5e      	ldr	r2, [pc, #376]	; (80037e0 <UART_SetConfig+0x2d4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d125      	bne.n	80036b6 <UART_SetConfig+0x1aa>
 800366a:	4b5b      	ldr	r3, [pc, #364]	; (80037d8 <UART_SetConfig+0x2cc>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003670:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003674:	2b30      	cmp	r3, #48	; 0x30
 8003676:	d016      	beq.n	80036a6 <UART_SetConfig+0x19a>
 8003678:	2b30      	cmp	r3, #48	; 0x30
 800367a:	d818      	bhi.n	80036ae <UART_SetConfig+0x1a2>
 800367c:	2b20      	cmp	r3, #32
 800367e:	d00a      	beq.n	8003696 <UART_SetConfig+0x18a>
 8003680:	2b20      	cmp	r3, #32
 8003682:	d814      	bhi.n	80036ae <UART_SetConfig+0x1a2>
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <UART_SetConfig+0x182>
 8003688:	2b10      	cmp	r3, #16
 800368a:	d008      	beq.n	800369e <UART_SetConfig+0x192>
 800368c:	e00f      	b.n	80036ae <UART_SetConfig+0x1a2>
 800368e:	2300      	movs	r3, #0
 8003690:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003694:	e0ad      	b.n	80037f2 <UART_SetConfig+0x2e6>
 8003696:	2302      	movs	r3, #2
 8003698:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800369c:	e0a9      	b.n	80037f2 <UART_SetConfig+0x2e6>
 800369e:	2304      	movs	r3, #4
 80036a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a4:	e0a5      	b.n	80037f2 <UART_SetConfig+0x2e6>
 80036a6:	2308      	movs	r3, #8
 80036a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ac:	e0a1      	b.n	80037f2 <UART_SetConfig+0x2e6>
 80036ae:	2310      	movs	r3, #16
 80036b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036b4:	e09d      	b.n	80037f2 <UART_SetConfig+0x2e6>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a4a      	ldr	r2, [pc, #296]	; (80037e4 <UART_SetConfig+0x2d8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d125      	bne.n	800370c <UART_SetConfig+0x200>
 80036c0:	4b45      	ldr	r3, [pc, #276]	; (80037d8 <UART_SetConfig+0x2cc>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80036ca:	2bc0      	cmp	r3, #192	; 0xc0
 80036cc:	d016      	beq.n	80036fc <UART_SetConfig+0x1f0>
 80036ce:	2bc0      	cmp	r3, #192	; 0xc0
 80036d0:	d818      	bhi.n	8003704 <UART_SetConfig+0x1f8>
 80036d2:	2b80      	cmp	r3, #128	; 0x80
 80036d4:	d00a      	beq.n	80036ec <UART_SetConfig+0x1e0>
 80036d6:	2b80      	cmp	r3, #128	; 0x80
 80036d8:	d814      	bhi.n	8003704 <UART_SetConfig+0x1f8>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <UART_SetConfig+0x1d8>
 80036de:	2b40      	cmp	r3, #64	; 0x40
 80036e0:	d008      	beq.n	80036f4 <UART_SetConfig+0x1e8>
 80036e2:	e00f      	b.n	8003704 <UART_SetConfig+0x1f8>
 80036e4:	2300      	movs	r3, #0
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ea:	e082      	b.n	80037f2 <UART_SetConfig+0x2e6>
 80036ec:	2302      	movs	r3, #2
 80036ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f2:	e07e      	b.n	80037f2 <UART_SetConfig+0x2e6>
 80036f4:	2304      	movs	r3, #4
 80036f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036fa:	e07a      	b.n	80037f2 <UART_SetConfig+0x2e6>
 80036fc:	2308      	movs	r3, #8
 80036fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003702:	e076      	b.n	80037f2 <UART_SetConfig+0x2e6>
 8003704:	2310      	movs	r3, #16
 8003706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370a:	e072      	b.n	80037f2 <UART_SetConfig+0x2e6>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a35      	ldr	r2, [pc, #212]	; (80037e8 <UART_SetConfig+0x2dc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d12a      	bne.n	800376c <UART_SetConfig+0x260>
 8003716:	4b30      	ldr	r3, [pc, #192]	; (80037d8 <UART_SetConfig+0x2cc>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003720:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003724:	d01a      	beq.n	800375c <UART_SetConfig+0x250>
 8003726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800372a:	d81b      	bhi.n	8003764 <UART_SetConfig+0x258>
 800372c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003730:	d00c      	beq.n	800374c <UART_SetConfig+0x240>
 8003732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003736:	d815      	bhi.n	8003764 <UART_SetConfig+0x258>
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <UART_SetConfig+0x238>
 800373c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003740:	d008      	beq.n	8003754 <UART_SetConfig+0x248>
 8003742:	e00f      	b.n	8003764 <UART_SetConfig+0x258>
 8003744:	2300      	movs	r3, #0
 8003746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800374a:	e052      	b.n	80037f2 <UART_SetConfig+0x2e6>
 800374c:	2302      	movs	r3, #2
 800374e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003752:	e04e      	b.n	80037f2 <UART_SetConfig+0x2e6>
 8003754:	2304      	movs	r3, #4
 8003756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800375a:	e04a      	b.n	80037f2 <UART_SetConfig+0x2e6>
 800375c:	2308      	movs	r3, #8
 800375e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003762:	e046      	b.n	80037f2 <UART_SetConfig+0x2e6>
 8003764:	2310      	movs	r3, #16
 8003766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800376a:	e042      	b.n	80037f2 <UART_SetConfig+0x2e6>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a17      	ldr	r2, [pc, #92]	; (80037d0 <UART_SetConfig+0x2c4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d13a      	bne.n	80037ec <UART_SetConfig+0x2e0>
 8003776:	4b18      	ldr	r3, [pc, #96]	; (80037d8 <UART_SetConfig+0x2cc>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003780:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003784:	d01a      	beq.n	80037bc <UART_SetConfig+0x2b0>
 8003786:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800378a:	d81b      	bhi.n	80037c4 <UART_SetConfig+0x2b8>
 800378c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003790:	d00c      	beq.n	80037ac <UART_SetConfig+0x2a0>
 8003792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003796:	d815      	bhi.n	80037c4 <UART_SetConfig+0x2b8>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <UART_SetConfig+0x298>
 800379c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a0:	d008      	beq.n	80037b4 <UART_SetConfig+0x2a8>
 80037a2:	e00f      	b.n	80037c4 <UART_SetConfig+0x2b8>
 80037a4:	2300      	movs	r3, #0
 80037a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037aa:	e022      	b.n	80037f2 <UART_SetConfig+0x2e6>
 80037ac:	2302      	movs	r3, #2
 80037ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b2:	e01e      	b.n	80037f2 <UART_SetConfig+0x2e6>
 80037b4:	2304      	movs	r3, #4
 80037b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ba:	e01a      	b.n	80037f2 <UART_SetConfig+0x2e6>
 80037bc:	2308      	movs	r3, #8
 80037be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c2:	e016      	b.n	80037f2 <UART_SetConfig+0x2e6>
 80037c4:	2310      	movs	r3, #16
 80037c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ca:	e012      	b.n	80037f2 <UART_SetConfig+0x2e6>
 80037cc:	efff69f3 	.word	0xefff69f3
 80037d0:	40008000 	.word	0x40008000
 80037d4:	40013800 	.word	0x40013800
 80037d8:	40021000 	.word	0x40021000
 80037dc:	40004400 	.word	0x40004400
 80037e0:	40004800 	.word	0x40004800
 80037e4:	40004c00 	.word	0x40004c00
 80037e8:	40005000 	.word	0x40005000
 80037ec:	2310      	movs	r3, #16
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a9f      	ldr	r2, [pc, #636]	; (8003a74 <UART_SetConfig+0x568>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d17a      	bne.n	80038f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003800:	2b08      	cmp	r3, #8
 8003802:	d824      	bhi.n	800384e <UART_SetConfig+0x342>
 8003804:	a201      	add	r2, pc, #4	; (adr r2, 800380c <UART_SetConfig+0x300>)
 8003806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380a:	bf00      	nop
 800380c:	08003831 	.word	0x08003831
 8003810:	0800384f 	.word	0x0800384f
 8003814:	08003839 	.word	0x08003839
 8003818:	0800384f 	.word	0x0800384f
 800381c:	0800383f 	.word	0x0800383f
 8003820:	0800384f 	.word	0x0800384f
 8003824:	0800384f 	.word	0x0800384f
 8003828:	0800384f 	.word	0x0800384f
 800382c:	08003847 	.word	0x08003847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003830:	f7fe fd18 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 8003834:	61f8      	str	r0, [r7, #28]
        break;
 8003836:	e010      	b.n	800385a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003838:	4b8f      	ldr	r3, [pc, #572]	; (8003a78 <UART_SetConfig+0x56c>)
 800383a:	61fb      	str	r3, [r7, #28]
        break;
 800383c:	e00d      	b.n	800385a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800383e:	f7fe fc79 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 8003842:	61f8      	str	r0, [r7, #28]
        break;
 8003844:	e009      	b.n	800385a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800384a:	61fb      	str	r3, [r7, #28]
        break;
 800384c:	e005      	b.n	800385a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003858:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80fb 	beq.w	8003a58 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	4413      	add	r3, r2
 800386c:	69fa      	ldr	r2, [r7, #28]
 800386e:	429a      	cmp	r2, r3
 8003870:	d305      	bcc.n	800387e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	429a      	cmp	r2, r3
 800387c:	d903      	bls.n	8003886 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003884:	e0e8      	b.n	8003a58 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	2200      	movs	r2, #0
 800388a:	461c      	mov	r4, r3
 800388c:	4615      	mov	r5, r2
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	022b      	lsls	r3, r5, #8
 8003898:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800389c:	0222      	lsls	r2, r4, #8
 800389e:	68f9      	ldr	r1, [r7, #12]
 80038a0:	6849      	ldr	r1, [r1, #4]
 80038a2:	0849      	lsrs	r1, r1, #1
 80038a4:	2000      	movs	r0, #0
 80038a6:	4688      	mov	r8, r1
 80038a8:	4681      	mov	r9, r0
 80038aa:	eb12 0a08 	adds.w	sl, r2, r8
 80038ae:	eb43 0b09 	adc.w	fp, r3, r9
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038c0:	4650      	mov	r0, sl
 80038c2:	4659      	mov	r1, fp
 80038c4:	f7fc fc9a 	bl	80001fc <__aeabi_uldivmod>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4613      	mov	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038d6:	d308      	bcc.n	80038ea <UART_SetConfig+0x3de>
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038de:	d204      	bcs.n	80038ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	60da      	str	r2, [r3, #12]
 80038e8:	e0b6      	b.n	8003a58 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038f0:	e0b2      	b.n	8003a58 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038fa:	d15e      	bne.n	80039ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80038fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003900:	2b08      	cmp	r3, #8
 8003902:	d828      	bhi.n	8003956 <UART_SetConfig+0x44a>
 8003904:	a201      	add	r2, pc, #4	; (adr r2, 800390c <UART_SetConfig+0x400>)
 8003906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390a:	bf00      	nop
 800390c:	08003931 	.word	0x08003931
 8003910:	08003939 	.word	0x08003939
 8003914:	08003941 	.word	0x08003941
 8003918:	08003957 	.word	0x08003957
 800391c:	08003947 	.word	0x08003947
 8003920:	08003957 	.word	0x08003957
 8003924:	08003957 	.word	0x08003957
 8003928:	08003957 	.word	0x08003957
 800392c:	0800394f 	.word	0x0800394f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003930:	f7fe fc98 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 8003934:	61f8      	str	r0, [r7, #28]
        break;
 8003936:	e014      	b.n	8003962 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003938:	f7fe fcaa 	bl	8002290 <HAL_RCC_GetPCLK2Freq>
 800393c:	61f8      	str	r0, [r7, #28]
        break;
 800393e:	e010      	b.n	8003962 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003940:	4b4d      	ldr	r3, [pc, #308]	; (8003a78 <UART_SetConfig+0x56c>)
 8003942:	61fb      	str	r3, [r7, #28]
        break;
 8003944:	e00d      	b.n	8003962 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003946:	f7fe fbf5 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 800394a:	61f8      	str	r0, [r7, #28]
        break;
 800394c:	e009      	b.n	8003962 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800394e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003952:	61fb      	str	r3, [r7, #28]
        break;
 8003954:	e005      	b.n	8003962 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003960:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d077      	beq.n	8003a58 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	005a      	lsls	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	085b      	lsrs	r3, r3, #1
 8003972:	441a      	add	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b0f      	cmp	r3, #15
 8003982:	d916      	bls.n	80039b2 <UART_SetConfig+0x4a6>
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800398a:	d212      	bcs.n	80039b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	b29b      	uxth	r3, r3
 8003990:	f023 030f 	bic.w	r3, r3, #15
 8003994:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	085b      	lsrs	r3, r3, #1
 800399a:	b29b      	uxth	r3, r3
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	8afb      	ldrh	r3, [r7, #22]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	8afa      	ldrh	r2, [r7, #22]
 80039ae:	60da      	str	r2, [r3, #12]
 80039b0:	e052      	b.n	8003a58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039b8:	e04e      	b.n	8003a58 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d827      	bhi.n	8003a12 <UART_SetConfig+0x506>
 80039c2:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <UART_SetConfig+0x4bc>)
 80039c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c8:	080039ed 	.word	0x080039ed
 80039cc:	080039f5 	.word	0x080039f5
 80039d0:	080039fd 	.word	0x080039fd
 80039d4:	08003a13 	.word	0x08003a13
 80039d8:	08003a03 	.word	0x08003a03
 80039dc:	08003a13 	.word	0x08003a13
 80039e0:	08003a13 	.word	0x08003a13
 80039e4:	08003a13 	.word	0x08003a13
 80039e8:	08003a0b 	.word	0x08003a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039ec:	f7fe fc3a 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 80039f0:	61f8      	str	r0, [r7, #28]
        break;
 80039f2:	e014      	b.n	8003a1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039f4:	f7fe fc4c 	bl	8002290 <HAL_RCC_GetPCLK2Freq>
 80039f8:	61f8      	str	r0, [r7, #28]
        break;
 80039fa:	e010      	b.n	8003a1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039fc:	4b1e      	ldr	r3, [pc, #120]	; (8003a78 <UART_SetConfig+0x56c>)
 80039fe:	61fb      	str	r3, [r7, #28]
        break;
 8003a00:	e00d      	b.n	8003a1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a02:	f7fe fb97 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 8003a06:	61f8      	str	r0, [r7, #28]
        break;
 8003a08:	e009      	b.n	8003a1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a0e:	61fb      	str	r3, [r7, #28]
        break;
 8003a10:	e005      	b.n	8003a1e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a1c:	bf00      	nop
    }

    if (pclk != 0U)
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d019      	beq.n	8003a58 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	085a      	lsrs	r2, r3, #1
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	441a      	add	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b0f      	cmp	r3, #15
 8003a3c:	d909      	bls.n	8003a52 <UART_SetConfig+0x546>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a44:	d205      	bcs.n	8003a52 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60da      	str	r2, [r3, #12]
 8003a50:	e002      	b.n	8003a58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3728      	adds	r7, #40	; 0x28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a72:	bf00      	nop
 8003a74:	40008000 	.word	0x40008000
 8003a78:	00f42400 	.word	0x00f42400

08003a7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01a      	beq.n	8003b92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b7a:	d10a      	bne.n	8003b92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	605a      	str	r2, [r3, #4]
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bd0:	f7fc ffd0 	bl	8000b74 <HAL_GetTick>
 8003bd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d10e      	bne.n	8003c02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003be4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f82d 	bl	8003c52 <UART_WaitOnFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e023      	b.n	8003c4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d10e      	bne.n	8003c2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f817 	bl	8003c52 <UART_WaitOnFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e00d      	b.n	8003c4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2220      	movs	r2, #32
 8003c32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b09c      	sub	sp, #112	; 0x70
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	603b      	str	r3, [r7, #0]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c62:	e0a5      	b.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6a:	f000 80a1 	beq.w	8003db0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6e:	f7fc ff81 	bl	8000b74 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d302      	bcc.n	8003c84 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d13e      	bne.n	8003d02 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c98:	667b      	str	r3, [r7, #100]	; 0x64
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ca2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ca4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ca8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003caa:	e841 2300 	strex	r3, r2, [r1]
 8003cae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e6      	bne.n	8003c84 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	3308      	adds	r3, #8
 8003cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc8:	f023 0301 	bic.w	r3, r3, #1
 8003ccc:	663b      	str	r3, [r7, #96]	; 0x60
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cd6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003cd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e5      	bne.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e067      	b.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d04f      	beq.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d1e:	d147      	bne.n	8003db0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d28:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d32:	e853 3f00 	ldrex	r3, [r3]
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d48:	637b      	str	r3, [r7, #52]	; 0x34
 8003d4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d50:	e841 2300 	strex	r3, r2, [r1]
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e6      	bne.n	8003d2a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3308      	adds	r3, #8
 8003d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f023 0301 	bic.w	r3, r3, #1
 8003d72:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3308      	adds	r3, #8
 8003d7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d7c:	623a      	str	r2, [r7, #32]
 8003d7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	69f9      	ldr	r1, [r7, #28]
 8003d82:	6a3a      	ldr	r2, [r7, #32]
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e5      	bne.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e010      	b.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	69da      	ldr	r2, [r3, #28]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4013      	ands	r3, r2
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2301      	moveq	r3, #1
 8003dc2:	2300      	movne	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	f43f af4a 	beq.w	8003c64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3770      	adds	r7, #112	; 0x70
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b089      	sub	sp, #36	; 0x24
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	e853 3f00 	ldrex	r3, [r3]
 8003dee:	60bb      	str	r3, [r7, #8]
   return(result);
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003df6:	61fb      	str	r3, [r7, #28]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	6979      	ldr	r1, [r7, #20]
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e6      	bne.n	8003de2 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003e1a:	bf00      	nop
 8003e1c:	3724      	adds	r7, #36	; 0x24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b095      	sub	sp, #84	; 0x54
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e36:	e853 3f00 	ldrex	r3, [r3]
 8003e3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e4c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e4e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e54:	e841 2300 	strex	r3, r2, [r1]
 8003e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e6      	bne.n	8003e2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3308      	adds	r3, #8
 8003e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f023 0301 	bic.w	r3, r3, #1
 8003e76:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3308      	adds	r3, #8
 8003e7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e5      	bne.n	8003e60 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d118      	bne.n	8003ece <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	e853 3f00 	ldrex	r3, [r3]
 8003ea8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f023 0310 	bic.w	r3, r3, #16
 8003eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eba:	61bb      	str	r3, [r7, #24]
 8003ebc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebe:	6979      	ldr	r1, [r7, #20]
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	e841 2300 	strex	r3, r2, [r1]
 8003ec6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1e6      	bne.n	8003e9c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003ee0:	bf00      	nop
 8003ee2:	3754      	adds	r7, #84	; 0x54
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b090      	sub	sp, #64	; 0x40
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d137      	bne.n	8003f78 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8003f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3308      	adds	r3, #8
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	e853 3f00 	ldrex	r3, [r3]
 8003f1e:	623b      	str	r3, [r7, #32]
   return(result);
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f26:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f30:	633a      	str	r2, [r7, #48]	; 0x30
 8003f32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f38:	e841 2300 	strex	r3, r2, [r1]
 8003f3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e5      	bne.n	8003f10 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	e853 3f00 	ldrex	r3, [r3]
 8003f50:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f58:	637b      	str	r3, [r7, #52]	; 0x34
 8003f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f62:	61fb      	str	r3, [r7, #28]
 8003f64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f66:	69b9      	ldr	r1, [r7, #24]
 8003f68:	69fa      	ldr	r2, [r7, #28]
 8003f6a:	e841 2300 	strex	r3, r2, [r1]
 8003f6e:	617b      	str	r3, [r7, #20]
   return(result);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1e6      	bne.n	8003f44 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f76:	e002      	b.n	8003f7e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003f78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003f7a:	f7ff fa89 	bl	8003490 <HAL_UART_TxCpltCallback>
}
 8003f7e:	bf00      	nop
 8003f80:	3740      	adds	r7, #64	; 0x40
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b084      	sub	sp, #16
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f7ff fa85 	bl	80034a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b086      	sub	sp, #24
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fb4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc6:	2b80      	cmp	r3, #128	; 0x80
 8003fc8:	d109      	bne.n	8003fde <UART_DMAError+0x3c>
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b21      	cmp	r3, #33	; 0x21
 8003fce:	d106      	bne.n	8003fde <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003fd8:	6978      	ldr	r0, [r7, #20]
 8003fda:	f7ff fefe 	bl	8003dda <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe8:	2b40      	cmp	r3, #64	; 0x40
 8003fea:	d109      	bne.n	8004000 <UART_DMAError+0x5e>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2b22      	cmp	r3, #34	; 0x22
 8003ff0:	d106      	bne.n	8004000 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003ffa:	6978      	ldr	r0, [r7, #20]
 8003ffc:	f7ff ff13 	bl	8003e26 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004006:	f043 0210 	orr.w	r2, r3, #16
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004010:	6978      	ldr	r0, [r7, #20]
 8004012:	f7ff fa51 	bl	80034b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004016:	bf00      	nop
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b084      	sub	sp, #16
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f7ff fa3b 	bl	80034b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b088      	sub	sp, #32
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004066:	61fb      	str	r3, [r7, #28]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	6979      	ldr	r1, [r7, #20]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	613b      	str	r3, [r7, #16]
   return(result);
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e6      	bne.n	8004052 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff f9fd 	bl	8003490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004096:	bf00      	nop
 8004098:	3720      	adds	r7, #32
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80040b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80040b8:	f7fc fc62 	bl	8000980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040bc:	480c      	ldr	r0, [pc, #48]	; (80040f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80040be:	490d      	ldr	r1, [pc, #52]	; (80040f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80040c0:	4a0d      	ldr	r2, [pc, #52]	; (80040f8 <LoopForever+0xe>)
  movs r3, #0
 80040c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040c4:	e002      	b.n	80040cc <LoopCopyDataInit>

080040c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ca:	3304      	adds	r3, #4

080040cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040d0:	d3f9      	bcc.n	80040c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040d2:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80040d4:	4c0a      	ldr	r4, [pc, #40]	; (8004100 <LoopForever+0x16>)
  movs r3, #0
 80040d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040d8:	e001      	b.n	80040de <LoopFillZerobss>

080040da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040dc:	3204      	adds	r2, #4

080040de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040e0:	d3fb      	bcc.n	80040da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040e2:	f000 f811 	bl	8004108 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80040e6:	f7fc fa0b 	bl	8000500 <main>

080040ea <LoopForever>:

LoopForever:
    b LoopForever
 80040ea:	e7fe      	b.n	80040ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80040ec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80040f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040f4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80040f8:	080041d8 	.word	0x080041d8
  ldr r2, =_sbss
 80040fc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8004100:	200001b4 	.word	0x200001b4

08004104 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004104:	e7fe      	b.n	8004104 <ADC1_2_IRQHandler>
	...

08004108 <__libc_init_array>:
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	4d0d      	ldr	r5, [pc, #52]	; (8004140 <__libc_init_array+0x38>)
 800410c:	4c0d      	ldr	r4, [pc, #52]	; (8004144 <__libc_init_array+0x3c>)
 800410e:	1b64      	subs	r4, r4, r5
 8004110:	10a4      	asrs	r4, r4, #2
 8004112:	2600      	movs	r6, #0
 8004114:	42a6      	cmp	r6, r4
 8004116:	d109      	bne.n	800412c <__libc_init_array+0x24>
 8004118:	4d0b      	ldr	r5, [pc, #44]	; (8004148 <__libc_init_array+0x40>)
 800411a:	4c0c      	ldr	r4, [pc, #48]	; (800414c <__libc_init_array+0x44>)
 800411c:	f000 f820 	bl	8004160 <_init>
 8004120:	1b64      	subs	r4, r4, r5
 8004122:	10a4      	asrs	r4, r4, #2
 8004124:	2600      	movs	r6, #0
 8004126:	42a6      	cmp	r6, r4
 8004128:	d105      	bne.n	8004136 <__libc_init_array+0x2e>
 800412a:	bd70      	pop	{r4, r5, r6, pc}
 800412c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004130:	4798      	blx	r3
 8004132:	3601      	adds	r6, #1
 8004134:	e7ee      	b.n	8004114 <__libc_init_array+0xc>
 8004136:	f855 3b04 	ldr.w	r3, [r5], #4
 800413a:	4798      	blx	r3
 800413c:	3601      	adds	r6, #1
 800413e:	e7f2      	b.n	8004126 <__libc_init_array+0x1e>
 8004140:	080041d0 	.word	0x080041d0
 8004144:	080041d0 	.word	0x080041d0
 8004148:	080041d0 	.word	0x080041d0
 800414c:	080041d4 	.word	0x080041d4

08004150 <memset>:
 8004150:	4402      	add	r2, r0
 8004152:	4603      	mov	r3, r0
 8004154:	4293      	cmp	r3, r2
 8004156:	d100      	bne.n	800415a <memset+0xa>
 8004158:	4770      	bx	lr
 800415a:	f803 1b01 	strb.w	r1, [r3], #1
 800415e:	e7f9      	b.n	8004154 <memset+0x4>

08004160 <_init>:
 8004160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004162:	bf00      	nop
 8004164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004166:	bc08      	pop	{r3}
 8004168:	469e      	mov	lr, r3
 800416a:	4770      	bx	lr

0800416c <_fini>:
 800416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416e:	bf00      	nop
 8004170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004172:	bc08      	pop	{r3}
 8004174:	469e      	mov	lr, r3
 8004176:	4770      	bx	lr
