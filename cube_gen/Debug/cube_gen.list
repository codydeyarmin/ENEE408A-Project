
cube_gen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa08  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800abb8  0800abb8  0001abb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac78  0800ac78  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac78  0800ac78  0001ac78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac80  0800ac80  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac80  0800ac80  0001ac80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac84  0800ac84  0001ac84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800ac88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000090  0800ad14  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  0800ad14  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001192a  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ac  00000000  00000000  000319e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00034098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b18  00000000  00000000  00034cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a62c  00000000  00000000  000357d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011002  00000000  00000000  0005fe04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdee1  00000000  00000000  00070e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016ece7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003400  00000000  00000000  0016ed38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800aba0 	.word	0x0800aba0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0800aba0 	.word	0x0800aba0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <DWT_Delay_Init+0x58>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	4a13      	ldr	r2, [pc, #76]	; (80005ec <DWT_Delay_Init+0x58>)
 800059e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80005a2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <DWT_Delay_Init+0x58>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	4a10      	ldr	r2, [pc, #64]	; (80005ec <DWT_Delay_Init+0x58>)
 80005aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005ae:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <DWT_Delay_Init+0x5c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <DWT_Delay_Init+0x5c>)
 80005b6:	f023 0301 	bic.w	r3, r3, #1
 80005ba:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <DWT_Delay_Init+0x5c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <DWT_Delay_Init+0x5c>)
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <DWT_Delay_Init+0x5c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80005ce:	bf00      	nop
    __ASM volatile ("NOP");
 80005d0:	bf00      	nop
    __ASM volatile ("NOP");
 80005d2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <DWT_Delay_Init+0x5c>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80005dc:	2300      	movs	r3, #0
 80005de:	e000      	b.n	80005e2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80005e0:	2301      	movs	r3, #1
    }
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000edf0 	.word	0xe000edf0
 80005f0:	e0001000 	.word	0xe0001000

080005f4 <DWT_Delay_us>:
uint32_t DWT_Delay_Init(void);


// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <DWT_Delay_us+0x48>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000602:	f007 fced 	bl	8007fe0 <HAL_RCC_GetHCLKFreq>
 8000606:	4603      	mov	r3, r0
 8000608:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <DWT_Delay_us+0x4c>)
 800060a:	fba2 2303 	umull	r2, r3, r2, r3
 800060e:	0c9b      	lsrs	r3, r3, #18
 8000610:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	fb02 f303 	mul.w	r3, r2, r3
 800061a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 800061c:	bf00      	nop
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <DWT_Delay_us+0x48>)
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	1ad2      	subs	r2, r2, r3
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	1acb      	subs	r3, r1, r3
 800062c:	429a      	cmp	r2, r3
 800062e:	d3f6      	bcc.n	800061e <DWT_Delay_us+0x2a>
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	e0001000 	.word	0xe0001000
 8000640:	431bde83 	.word	0x431bde83

08000644 <DWT_Delay_ms>:

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <DWT_Delay_ms+0x44>)
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8000652:	f007 fcc5 	bl	8007fe0 <HAL_RCC_GetHCLKFreq>
 8000656:	4603      	mov	r3, r0
 8000658:	4a0c      	ldr	r2, [pc, #48]	; (800068c <DWT_Delay_ms+0x48>)
 800065a:	fba2 2303 	umull	r2, r3, r2, r3
 800065e:	099b      	lsrs	r3, r3, #6
 8000660:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	68ba      	ldr	r2, [r7, #8]
 8000666:	fb02 f303 	mul.w	r3, r2, r3
 800066a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 800066c:	bf00      	nop
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <DWT_Delay_ms+0x44>)
 8000670:	685a      	ldr	r2, [r3, #4]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	1ad2      	subs	r2, r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	429a      	cmp	r2, r3
 800067a:	d3f8      	bcc.n	800066e <DWT_Delay_ms+0x2a>
}
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	e0001000 	.word	0xe0001000
 800068c:	10624dd3 	.word	0x10624dd3

08000690 <LCD_DATA>:


//-----[ Alphanumeric LCD 16x2 Routines ]-----

void LCD_DATA(unsigned char Data)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
    if(Data & 1)
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d008      	beq.n	80006b6 <LCD_DATA+0x26>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 1);
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <LCD_DATA+0xc4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <LCD_DATA+0xc4>)
 80006aa:	8891      	ldrh	r1, [r2, #4]
 80006ac:	2201      	movs	r2, #1
 80006ae:	4618      	mov	r0, r3
 80006b0:	f006 fe74 	bl	800739c <HAL_GPIO_WritePin>
 80006b4:	e007      	b.n	80006c6 <LCD_DATA+0x36>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 0);
 80006b6:	4b27      	ldr	r3, [pc, #156]	; (8000754 <LCD_DATA+0xc4>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a26      	ldr	r2, [pc, #152]	; (8000754 <LCD_DATA+0xc4>)
 80006bc:	8891      	ldrh	r1, [r2, #4]
 80006be:	2200      	movs	r2, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f006 fe6b 	bl	800739c <HAL_GPIO_WritePin>
    if(Data & 2)
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	f003 0302 	and.w	r3, r3, #2
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d008      	beq.n	80006e2 <LCD_DATA+0x52>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 1);
 80006d0:	4b20      	ldr	r3, [pc, #128]	; (8000754 <LCD_DATA+0xc4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a1f      	ldr	r2, [pc, #124]	; (8000754 <LCD_DATA+0xc4>)
 80006d6:	88d1      	ldrh	r1, [r2, #6]
 80006d8:	2201      	movs	r2, #1
 80006da:	4618      	mov	r0, r3
 80006dc:	f006 fe5e 	bl	800739c <HAL_GPIO_WritePin>
 80006e0:	e007      	b.n	80006f2 <LCD_DATA+0x62>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 0);
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <LCD_DATA+0xc4>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a1b      	ldr	r2, [pc, #108]	; (8000754 <LCD_DATA+0xc4>)
 80006e8:	88d1      	ldrh	r1, [r2, #6]
 80006ea:	2200      	movs	r2, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f006 fe55 	bl	800739c <HAL_GPIO_WritePin>
    if(Data & 4)
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d008      	beq.n	800070e <LCD_DATA+0x7e>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 1);
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <LCD_DATA+0xc4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a14      	ldr	r2, [pc, #80]	; (8000754 <LCD_DATA+0xc4>)
 8000702:	8911      	ldrh	r1, [r2, #8]
 8000704:	2201      	movs	r2, #1
 8000706:	4618      	mov	r0, r3
 8000708:	f006 fe48 	bl	800739c <HAL_GPIO_WritePin>
 800070c:	e007      	b.n	800071e <LCD_DATA+0x8e>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 0);
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <LCD_DATA+0xc4>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a10      	ldr	r2, [pc, #64]	; (8000754 <LCD_DATA+0xc4>)
 8000714:	8911      	ldrh	r1, [r2, #8]
 8000716:	2200      	movs	r2, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f006 fe3f 	bl	800739c <HAL_GPIO_WritePin>
    if(Data & 8)
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	f003 0308 	and.w	r3, r3, #8
 8000724:	2b00      	cmp	r3, #0
 8000726:	d008      	beq.n	800073a <LCD_DATA+0xaa>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 1);
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <LCD_DATA+0xc4>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a09      	ldr	r2, [pc, #36]	; (8000754 <LCD_DATA+0xc4>)
 800072e:	8951      	ldrh	r1, [r2, #10]
 8000730:	2201      	movs	r2, #1
 8000732:	4618      	mov	r0, r3
 8000734:	f006 fe32 	bl	800739c <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
}
 8000738:	e007      	b.n	800074a <LCD_DATA+0xba>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <LCD_DATA+0xc4>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a05      	ldr	r2, [pc, #20]	; (8000754 <LCD_DATA+0xc4>)
 8000740:	8951      	ldrh	r1, [r2, #10]
 8000742:	2200      	movs	r2, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f006 fe29 	bl	800739c <HAL_GPIO_WritePin>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	0800abe0 	.word	0x0800abe0

08000758 <LCD_CMD>:
void LCD_CMD(unsigned char a_CMD)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
    // Select Command Register
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 0);
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <LCD_CMD+0x60>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <LCD_CMD+0x60>)
 8000768:	89d1      	ldrh	r1, [r2, #14]
 800076a:	2200      	movs	r2, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f006 fe15 	bl	800739c <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
    LCD_DATA(a_CMD);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff8b 	bl	8000690 <LCD_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <LCD_CMD+0x60>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <LCD_CMD+0x60>)
 8000780:	8991      	ldrh	r1, [r2, #12]
 8000782:	2201      	movs	r2, #1
 8000784:	4618      	mov	r0, r3
 8000786:	f006 fe09 	bl	800739c <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <LCD_CMD+0x60>)
 800078c:	8a1b      	ldrh	r3, [r3, #16]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff30 	bl	80005f4 <DWT_Delay_us>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <LCD_CMD+0x60>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <LCD_CMD+0x60>)
 800079a:	8991      	ldrh	r1, [r2, #12]
 800079c:	2200      	movs	r2, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f006 fdfc 	bl	800739c <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <LCD_CMD+0x60>)
 80007a6:	8a1b      	ldrh	r3, [r3, #16]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff23 	bl	80005f4 <DWT_Delay_us>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	0800abe0 	.word	0x0800abe0

080007bc <LCD_Clear>:
void LCD_Clear()
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
    LCD_CMD(0);
 80007c0:	2000      	movs	r0, #0
 80007c2:	f7ff ffc9 	bl	8000758 <LCD_CMD>
    LCD_CMD(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f7ff ffc6 	bl	8000758 <LCD_CMD>
    DWT_Delay_us(70);
 80007cc:	2046      	movs	r0, #70	; 0x46
 80007ce:	f7ff ff11 	bl	80005f4 <DWT_Delay_us>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <LCD_Set_Cursor>:
void LCD_Set_Cursor(unsigned char r, unsigned char c)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b084      	sub	sp, #16
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4603      	mov	r3, r0
 80007de:	460a      	mov	r2, r1
 80007e0:	71fb      	strb	r3, [r7, #7]
 80007e2:	4613      	mov	r3, r2
 80007e4:	71bb      	strb	r3, [r7, #6]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d111      	bne.n	8000810 <LCD_Set_Cursor+0x3a>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	337f      	adds	r3, #127	; 0x7f
 80007f0:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	091b      	lsrs	r3, r3, #4
 80007f6:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	f003 030f 	and.w	r3, r3, #15
 80007fe:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 8000800:	7bbb      	ldrb	r3, [r7, #14]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ffa8 	bl	8000758 <LCD_CMD>
      LCD_CMD(Low4);
 8000808:	7b7b      	ldrb	r3, [r7, #13]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ffa4 	bl	8000758 <LCD_CMD>
    }
    if(r == 2)
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2b02      	cmp	r3, #2
 8000814:	d111      	bne.n	800083a <LCD_Set_Cursor+0x64>
    {
      Temp  = 0xC0 + c - 1;
 8000816:	79bb      	ldrb	r3, [r7, #6]
 8000818:	3b41      	subs	r3, #65	; 0x41
 800081a:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	091b      	lsrs	r3, r3, #4
 8000820:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	f003 030f 	and.w	r3, r3, #15
 8000828:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 800082a:	7bbb      	ldrb	r3, [r7, #14]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff93 	bl	8000758 <LCD_CMD>
      LCD_CMD(Low4);
 8000832:	7b7b      	ldrb	r3, [r7, #13]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff8f 	bl	8000758 <LCD_CMD>
    }
    DWT_Delay_ms(2);
 800083a:	2002      	movs	r0, #2
 800083c:	f7ff ff02 	bl	8000644 <DWT_Delay_ms>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <LCD_Init>:
void LCD_Init()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
	// Initialize The DWT Delay Function Which Will Be Used Later On
	DWT_Delay_Init();
 800085e:	f7ff fe99 	bl	8000594 <DWT_Delay_Init>
    // IO Pin Configurations
	if(LCD16x2_CfgParam.LCD_GPIO == GPIOA)
 8000862:	4b70      	ldr	r3, [pc, #448]	; (8000a24 <LCD_Init+0x1dc>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800086a:	d10c      	bne.n	8000886 <LCD_Init+0x3e>
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086c:	4b6e      	ldr	r3, [pc, #440]	; (8000a28 <LCD_Init+0x1e0>)
 800086e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000870:	4a6d      	ldr	r2, [pc, #436]	; (8000a28 <LCD_Init+0x1e0>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000878:	4b6b      	ldr	r3, [pc, #428]	; (8000a28 <LCD_Init+0x1e0>)
 800087a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	e034      	b.n	80008f0 <LCD_Init+0xa8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOB)
 8000886:	4b67      	ldr	r3, [pc, #412]	; (8000a24 <LCD_Init+0x1dc>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a68      	ldr	r2, [pc, #416]	; (8000a2c <LCD_Init+0x1e4>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d10c      	bne.n	80008aa <LCD_Init+0x62>
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000890:	4b65      	ldr	r3, [pc, #404]	; (8000a28 <LCD_Init+0x1e0>)
 8000892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000894:	4a64      	ldr	r2, [pc, #400]	; (8000a28 <LCD_Init+0x1e0>)
 8000896:	f043 0302 	orr.w	r3, r3, #2
 800089a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089c:	4b62      	ldr	r3, [pc, #392]	; (8000a28 <LCD_Init+0x1e0>)
 800089e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a0:	f003 0302 	and.w	r3, r3, #2
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	e022      	b.n	80008f0 <LCD_Init+0xa8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOC)
 80008aa:	4b5e      	ldr	r3, [pc, #376]	; (8000a24 <LCD_Init+0x1dc>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a60      	ldr	r2, [pc, #384]	; (8000a30 <LCD_Init+0x1e8>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d10c      	bne.n	80008ce <LCD_Init+0x86>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80008b4:	4b5c      	ldr	r3, [pc, #368]	; (8000a28 <LCD_Init+0x1e0>)
 80008b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b8:	4a5b      	ldr	r2, [pc, #364]	; (8000a28 <LCD_Init+0x1e0>)
 80008ba:	f043 0304 	orr.w	r3, r3, #4
 80008be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c0:	4b59      	ldr	r3, [pc, #356]	; (8000a28 <LCD_Init+0x1e0>)
 80008c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c4:	f003 0304 	and.w	r3, r3, #4
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	e010      	b.n	80008f0 <LCD_Init+0xa8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOD)
 80008ce:	4b55      	ldr	r3, [pc, #340]	; (8000a24 <LCD_Init+0x1dc>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a58      	ldr	r2, [pc, #352]	; (8000a34 <LCD_Init+0x1ec>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d10b      	bne.n	80008f0 <LCD_Init+0xa8>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80008d8:	4b53      	ldr	r3, [pc, #332]	; (8000a28 <LCD_Init+0x1e0>)
 80008da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008dc:	4a52      	ldr	r2, [pc, #328]	; (8000a28 <LCD_Init+0x1e0>)
 80008de:	f043 0308 	orr.w	r3, r3, #8
 80008e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e4:	4b50      	ldr	r3, [pc, #320]	; (8000a28 <LCD_Init+0x1e0>)
 80008e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e8:	f003 0308 	and.w	r3, r3, #8
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, GPIO_PIN_RESET);
 80008f0:	4b4c      	ldr	r3, [pc, #304]	; (8000a24 <LCD_Init+0x1dc>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a4b      	ldr	r2, [pc, #300]	; (8000a24 <LCD_Init+0x1dc>)
 80008f6:	8891      	ldrh	r1, [r2, #4]
 80008f8:	2200      	movs	r2, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f006 fd4e 	bl	800739c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, GPIO_PIN_RESET);
 8000900:	4b48      	ldr	r3, [pc, #288]	; (8000a24 <LCD_Init+0x1dc>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a47      	ldr	r2, [pc, #284]	; (8000a24 <LCD_Init+0x1dc>)
 8000906:	88d1      	ldrh	r1, [r2, #6]
 8000908:	2200      	movs	r2, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f006 fd46 	bl	800739c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, GPIO_PIN_RESET);
 8000910:	4b44      	ldr	r3, [pc, #272]	; (8000a24 <LCD_Init+0x1dc>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a43      	ldr	r2, [pc, #268]	; (8000a24 <LCD_Init+0x1dc>)
 8000916:	8911      	ldrh	r1, [r2, #8]
 8000918:	2200      	movs	r2, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f006 fd3e 	bl	800739c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, GPIO_PIN_RESET);
 8000920:	4b40      	ldr	r3, [pc, #256]	; (8000a24 <LCD_Init+0x1dc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a3f      	ldr	r2, [pc, #252]	; (8000a24 <LCD_Init+0x1dc>)
 8000926:	8951      	ldrh	r1, [r2, #10]
 8000928:	2200      	movs	r2, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f006 fd36 	bl	800739c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 8000930:	4b3c      	ldr	r3, [pc, #240]	; (8000a24 <LCD_Init+0x1dc>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a3b      	ldr	r2, [pc, #236]	; (8000a24 <LCD_Init+0x1dc>)
 8000936:	89d1      	ldrh	r1, [r2, #14]
 8000938:	2200      	movs	r2, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f006 fd2e 	bl	800739c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 8000940:	4b38      	ldr	r3, [pc, #224]	; (8000a24 <LCD_Init+0x1dc>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a37      	ldr	r2, [pc, #220]	; (8000a24 <LCD_Init+0x1dc>)
 8000946:	8991      	ldrh	r1, [r2, #12]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f006 fd26 	bl	800739c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 8000950:	4b34      	ldr	r3, [pc, #208]	; (8000a24 <LCD_Init+0x1dc>)
 8000952:	889a      	ldrh	r2, [r3, #4]
 8000954:	4b33      	ldr	r3, [pc, #204]	; (8000a24 <LCD_Init+0x1dc>)
 8000956:	88db      	ldrh	r3, [r3, #6]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 8000958:	4313      	orrs	r3, r2
 800095a:	b29a      	uxth	r2, r3
 800095c:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <LCD_Init+0x1dc>)
 800095e:	891b      	ldrh	r3, [r3, #8]
 8000960:	4313      	orrs	r3, r2
 8000962:	b29a      	uxth	r2, r3
 8000964:	4b2f      	ldr	r3, [pc, #188]	; (8000a24 <LCD_Init+0x1dc>)
 8000966:	895b      	ldrh	r3, [r3, #10]
 8000968:	4313      	orrs	r3, r2
 800096a:	b29a      	uxth	r2, r3
 800096c:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <LCD_Init+0x1dc>)
 800096e:	89db      	ldrh	r3, [r3, #14]
 8000970:	4313      	orrs	r3, r2
 8000972:	b29a      	uxth	r2, r3
			LCD16x2_CfgParam.EN_PIN;
 8000974:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <LCD_Init+0x1dc>)
 8000976:	899b      	ldrh	r3, [r3, #12]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 8000978:	4313      	orrs	r3, r2
 800097a:	b29b      	uxth	r3, r3
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 800097c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD16x2_CfgParam.LCD_GPIO, &GPIO_InitStruct);
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <LCD_Init+0x1dc>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f107 0214 	add.w	r2, r7, #20
 8000992:	4611      	mov	r1, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f006 fa7d 	bl	8006e94 <HAL_GPIO_Init>

	// The Init. Procedure As Described In The Datasheet
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 800099a:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <LCD_Init+0x1dc>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a21      	ldr	r2, [pc, #132]	; (8000a24 <LCD_Init+0x1dc>)
 80009a0:	89d1      	ldrh	r1, [r2, #14]
 80009a2:	2200      	movs	r2, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f006 fcf9 	bl	800739c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 80009aa:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <LCD_Init+0x1dc>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a1d      	ldr	r2, [pc, #116]	; (8000a24 <LCD_Init+0x1dc>)
 80009b0:	8991      	ldrh	r1, [r2, #12]
 80009b2:	2200      	movs	r2, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f006 fcf1 	bl	800739c <HAL_GPIO_WritePin>
    LCD_DATA(0x00);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff fe68 	bl	8000690 <LCD_DATA>
    DWT_Delay_ms(150);
 80009c0:	2096      	movs	r0, #150	; 0x96
 80009c2:	f7ff fe3f 	bl	8000644 <DWT_Delay_ms>
    LCD_CMD(0x03);
 80009c6:	2003      	movs	r0, #3
 80009c8:	f7ff fec6 	bl	8000758 <LCD_CMD>
    DWT_Delay_ms(5);
 80009cc:	2005      	movs	r0, #5
 80009ce:	f7ff fe39 	bl	8000644 <DWT_Delay_ms>
    LCD_CMD(0x03);
 80009d2:	2003      	movs	r0, #3
 80009d4:	f7ff fec0 	bl	8000758 <LCD_CMD>
    DWT_Delay_us(150);
 80009d8:	2096      	movs	r0, #150	; 0x96
 80009da:	f7ff fe0b 	bl	80005f4 <DWT_Delay_us>
    LCD_CMD(0x03);
 80009de:	2003      	movs	r0, #3
 80009e0:	f7ff feba 	bl	8000758 <LCD_CMD>
    LCD_CMD(0x02);
 80009e4:	2002      	movs	r0, #2
 80009e6:	f7ff feb7 	bl	8000758 <LCD_CMD>
    LCD_CMD(0x02);
 80009ea:	2002      	movs	r0, #2
 80009ec:	f7ff feb4 	bl	8000758 <LCD_CMD>
    LCD_CMD(0x08);
 80009f0:	2008      	movs	r0, #8
 80009f2:	f7ff feb1 	bl	8000758 <LCD_CMD>
    LCD_CMD(0x00);
 80009f6:	2000      	movs	r0, #0
 80009f8:	f7ff feae 	bl	8000758 <LCD_CMD>
    LCD_CMD(0x0C);
 80009fc:	200c      	movs	r0, #12
 80009fe:	f7ff feab 	bl	8000758 <LCD_CMD>
    LCD_CMD(0x00);
 8000a02:	2000      	movs	r0, #0
 8000a04:	f7ff fea8 	bl	8000758 <LCD_CMD>
    LCD_CMD(0x06);
 8000a08:	2006      	movs	r0, #6
 8000a0a:	f7ff fea5 	bl	8000758 <LCD_CMD>
    LCD_CMD(0x00);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f7ff fea2 	bl	8000758 <LCD_CMD>
    LCD_CMD(0x01);
 8000a14:	2001      	movs	r0, #1
 8000a16:	f7ff fe9f 	bl	8000758 <LCD_CMD>
}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	; 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	0800abe0 	.word	0x0800abe0
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	48000400 	.word	0x48000400
 8000a30:	48000800 	.word	0x48000800
 8000a34:	48000c00 	.word	0x48000c00

08000a38 <LCD_Write_Char>:
void LCD_Write_Char(char Data)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
   char Low4,High4;
   Low4  = Data & 0x0F;
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	f003 030f 	and.w	r3, r3, #15
 8000a48:	73fb      	strb	r3, [r7, #15]
   High4 = Data & 0xF0;
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	f023 030f 	bic.w	r3, r3, #15
 8000a50:	73bb      	strb	r3, [r7, #14]

   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 1);
 8000a52:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <LCD_Write_Char+0xb0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a24      	ldr	r2, [pc, #144]	; (8000ae8 <LCD_Write_Char+0xb0>)
 8000a58:	89d1      	ldrh	r1, [r2, #14]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f006 fc9d 	bl	800739c <HAL_GPIO_WritePin>

   LCD_DATA(High4>>4);
 8000a62:	7bbb      	ldrb	r3, [r7, #14]
 8000a64:	091b      	lsrs	r3, r3, #4
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fe11 	bl	8000690 <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8000a6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <LCD_Write_Char+0xb0>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a1d      	ldr	r2, [pc, #116]	; (8000ae8 <LCD_Write_Char+0xb0>)
 8000a74:	8991      	ldrh	r1, [r2, #12]
 8000a76:	2201      	movs	r2, #1
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f006 fc8f 	bl	800739c <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <LCD_Write_Char+0xb0>)
 8000a80:	8a1b      	ldrh	r3, [r3, #16]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fdb6 	bl	80005f4 <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <LCD_Write_Char+0xb0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a16      	ldr	r2, [pc, #88]	; (8000ae8 <LCD_Write_Char+0xb0>)
 8000a8e:	8991      	ldrh	r1, [r2, #12]
 8000a90:	2200      	movs	r2, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f006 fc82 	bl	800739c <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <LCD_Write_Char+0xb0>)
 8000a9a:	8a1b      	ldrh	r3, [r3, #16]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fda9 	bl	80005f4 <DWT_Delay_us>

   LCD_DATA(Low4);
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fdf3 	bl	8000690 <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <LCD_Write_Char+0xb0>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <LCD_Write_Char+0xb0>)
 8000ab0:	8991      	ldrh	r1, [r2, #12]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f006 fc71 	bl	800739c <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <LCD_Write_Char+0xb0>)
 8000abc:	8a1b      	ldrh	r3, [r3, #16]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fd98 	bl	80005f4 <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <LCD_Write_Char+0xb0>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <LCD_Write_Char+0xb0>)
 8000aca:	8991      	ldrh	r1, [r2, #12]
 8000acc:	2200      	movs	r2, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f006 fc64 	bl	800739c <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <LCD_Write_Char+0xb0>)
 8000ad6:	8a1b      	ldrh	r3, [r3, #16]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fd8b 	bl	80005f4 <DWT_Delay_us>
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	0800abe0 	.word	0x0800abe0

08000aec <LCD_Write_String>:
void LCD_Write_String(char *str)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
    int i;
    for(i=0;str[i]!='\0';i++)
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	e009      	b.n	8000b0e <LCD_Write_String+0x22>
       LCD_Write_Char(str[i]);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	4413      	add	r3, r2
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff98 	bl	8000a38 <LCD_Write_Char>
    for(i=0;str[i]!='\0';i++)
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	4413      	add	r3, r2
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d1ef      	bne.n	8000afa <LCD_Write_String+0xe>
}
 8000b1a:	bf00      	nop
 8000b1c:	bf00      	nop
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <test_byte_order>:

/*************************   B Y T E   O R D E R   ****************************/


static int test_byte_order(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
    if (*(uint32_t*)endianness != 0x31323334UL)
        return CWP_RC_WRONG_BYTE_ORDER;
#else

#ifdef COMPILE_FOR_LITTLE_ENDIAN
    const char *endianness = "1234";
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <test_byte_order+0x28>)
 8000b2c:	607b      	str	r3, [r7, #4]
    if (*(uint32_t*)endianness != 0x34333231UL)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <test_byte_order+0x2c>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d002      	beq.n	8000b3e <test_byte_order+0x1a>
        return CWP_RC_WRONG_BYTE_ORDER;
 8000b38:	f06f 0304 	mvn.w	r3, #4
 8000b3c:	e000      	b.n	8000b40 <test_byte_order+0x1c>
#endif
#endif
    return CWP_RC_OK;
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	0800abb8 	.word	0x0800abb8
 8000b50:	34333231 	.word	0x34333231

08000b54 <cw_pack_context_init>:
/*******************************   P A C K   **********************************/



int cw_pack_context_init (cw_pack_context* pack_context, void* data, unsigned long length, pack_overflow_handler hpo)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
 8000b60:	603b      	str	r3, [r7, #0]
    pack_context->start = pack_context->current = (uint8_t*)data;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	68ba      	ldr	r2, [r7, #8]
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	605a      	str	r2, [r3, #4]
    pack_context->end = pack_context->start + length;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	441a      	add	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	609a      	str	r2, [r3, #8]
    pack_context->be_compatible = false;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	731a      	strb	r2, [r3, #12]
    pack_context->err_no = 0;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
    pack_context->handle_pack_overflow = hpo;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	619a      	str	r2, [r3, #24]
    pack_context->handle_flush = NULL;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
    pack_context->return_code = test_byte_order();
 8000b94:	f7ff ffc6 	bl	8000b24 <test_byte_order>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	611a      	str	r2, [r3, #16]
    return pack_context->return_code;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	691b      	ldr	r3, [r3, #16]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <cw_pack_unsigned>:

/*  Packing routines  --------------------------------------------------------------------------------  */


void cw_pack_unsigned(cw_pack_context* pack_context, uint64_t i)
{
 8000baa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bae:	b0a2      	sub	sp, #136	; 0x88
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8000bb4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if (pack_context->return_code)
 8000bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f040 81b9 	bne.w	8000f34 <cw_pack_unsigned+0x38a>
        return;

    if (i < 128)
 8000bc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000bc6:	2a80      	cmp	r2, #128	; 0x80
 8000bc8:	f173 0300 	sbcs.w	r3, r3, #0
 8000bcc:	d224      	bcs.n	8000c18 <cw_pack_unsigned+0x6e>
        tryMove0(i);
 8000bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d115      	bne.n	8000c06 <cw_pack_unsigned+0x5c>
 8000bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d104      	bne.n	8000bec <cw_pack_unsigned+0x42>
 8000be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000be4:	f06f 0201 	mvn.w	r2, #1
 8000be8:	611a      	str	r2, [r3, #16]
 8000bea:	e1a4      	b.n	8000f36 <cw_pack_unsigned+0x38c>
 8000bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000bf4:	4798      	blx	r3
 8000bf6:	6578      	str	r0, [r7, #84]	; 0x54
 8000bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d003      	beq.n	8000c06 <cw_pack_unsigned+0x5c>
 8000bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c02:	611a      	str	r2, [r3, #16]
 8000c04:	e197      	b.n	8000f36 <cw_pack_unsigned+0x38c>
 8000c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	1c59      	adds	r1, r3, #1
 8000c0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c0e:	6011      	str	r1, [r2, #0]
 8000c10:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000c14:	701a      	strb	r2, [r3, #0]
 8000c16:	e18e      	b.n	8000f36 <cw_pack_unsigned+0x38c>

    if (i < 256)
 8000c18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000c1c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000c20:	f173 0300 	sbcs.w	r3, r3, #0
 8000c24:	d23e      	bcs.n	8000ca4 <cw_pack_unsigned+0xfa>
        tryMove1(0xcc, i);
 8000c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000c2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c32:	3302      	adds	r3, #2
 8000c34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d91e      	bls.n	8000c82 <cw_pack_unsigned+0xd8>
 8000c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d104      	bne.n	8000c56 <cw_pack_unsigned+0xac>
 8000c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c4e:	f06f 0201 	mvn.w	r2, #1
 8000c52:	611a      	str	r2, [r3, #16]
 8000c54:	e16f      	b.n	8000f36 <cw_pack_unsigned+0x38c>
 8000c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000c5e:	4798      	blx	r3
 8000c60:	65b8      	str	r0, [r7, #88]	; 0x58
 8000c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <cw_pack_unsigned+0xc6>
 8000c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000c6c:	611a      	str	r2, [r3, #16]
 8000c6e:	e162      	b.n	8000f36 <cw_pack_unsigned+0x38c>
 8000c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000c78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c7c:	3302      	adds	r3, #2
 8000c7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c84:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c8e:	1c5a      	adds	r2, r3, #1
 8000c90:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8000c94:	22cc      	movs	r2, #204	; 0xcc
 8000c96:	701a      	strb	r2, [r3, #0]
 8000c98:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000c9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ca0:	701a      	strb	r2, [r3, #0]
 8000ca2:	e148      	b.n	8000f36 <cw_pack_unsigned+0x38c>

    if (i < 0x10000L)
 8000ca4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000ca8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000cac:	f173 0300 	sbcs.w	r3, r3, #0
 8000cb0:	d244      	bcs.n	8000d3c <cw_pack_unsigned+0x192>
    {
        tryMove2(0xcd, i);
 8000cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000cb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000cba:	3303      	adds	r3, #3
 8000cbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8000cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d91b      	bls.n	8000d00 <cw_pack_unsigned+0x156>
 8000cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d104      	bne.n	8000cda <cw_pack_unsigned+0x130>
 8000cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cd2:	f06f 0201 	mvn.w	r2, #1
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	e12d      	b.n	8000f36 <cw_pack_unsigned+0x38c>
 8000cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	2103      	movs	r1, #3
 8000ce0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000ce2:	4798      	blx	r3
 8000ce4:	65f8      	str	r0, [r7, #92]	; 0x5c
 8000ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <cw_pack_unsigned+0x14a>
 8000cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000cf0:	611a      	str	r2, [r3, #16]
 8000cf2:	e120      	b.n	8000f36 <cw_pack_unsigned+0x38c>
 8000cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000cfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000cfc:	3303      	adds	r3, #3
 8000cfe:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d02:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000d0c:	22cd      	movs	r2, #205	; 0xcd
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	0a02      	lsrs	r2, r0, #8
 8000d1e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000d22:	0a0b      	lsrs	r3, r1, #8
 8000d24:	b293      	uxth	r3, r2
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000d2e:	021b      	lsls	r3, r3, #8
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d38:	801a      	strh	r2, [r3, #0]
 8000d3a:	e0fc      	b.n	8000f36 <cw_pack_unsigned+0x38c>
    }
    if (i < 0x100000000LL)
 8000d3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d240      	bcs.n	8000dc6 <cw_pack_unsigned+0x21c>
        tryMove4(0xce, i);
 8000d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	677b      	str	r3, [r7, #116]	; 0x74
 8000d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d4c:	3305      	adds	r3, #5
 8000d4e:	673b      	str	r3, [r7, #112]	; 0x70
 8000d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d91b      	bls.n	8000d92 <cw_pack_unsigned+0x1e8>
 8000d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d104      	bne.n	8000d6c <cw_pack_unsigned+0x1c2>
 8000d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d64:	f06f 0201 	mvn.w	r2, #1
 8000d68:	611a      	str	r2, [r3, #16]
 8000d6a:	e0e4      	b.n	8000f36 <cw_pack_unsigned+0x38c>
 8000d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	2105      	movs	r1, #5
 8000d72:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000d74:	4798      	blx	r3
 8000d76:	6638      	str	r0, [r7, #96]	; 0x60
 8000d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <cw_pack_unsigned+0x1dc>
 8000d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d82:	611a      	str	r2, [r3, #16]
 8000d84:	e0d7      	b.n	8000f36 <cw_pack_unsigned+0x38c>
 8000d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	677b      	str	r3, [r7, #116]	; 0x74
 8000d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d8e:	3305      	adds	r3, #5
 8000d90:	673b      	str	r3, [r7, #112]	; 0x70
 8000d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d94:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	677a      	str	r2, [r7, #116]	; 0x74
 8000d9e:	22ce      	movs	r2, #206	; 0xce
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000da4:	0e1a      	lsrs	r2, r3, #24
 8000da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000dae:	431a      	orrs	r2, r3
 8000db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000db2:	021b      	lsls	r3, r3, #8
 8000db4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000db8:	431a      	orrs	r2, r3
 8000dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dbc:	061b      	lsls	r3, r3, #24
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	e0b7      	b.n	8000f36 <cw_pack_unsigned+0x38c>

    tryMove8(0xcf,i);
 8000dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000dce:	3309      	adds	r3, #9
 8000dd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8000dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d91b      	bls.n	8000e14 <cw_pack_unsigned+0x26a>
 8000ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d104      	bne.n	8000dee <cw_pack_unsigned+0x244>
 8000de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000de6:	f06f 0201 	mvn.w	r2, #1
 8000dea:	611a      	str	r2, [r3, #16]
 8000dec:	e0a3      	b.n	8000f36 <cw_pack_unsigned+0x38c>
 8000dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	2109      	movs	r1, #9
 8000df4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000df6:	4798      	blx	r3
 8000df8:	6678      	str	r0, [r7, #100]	; 0x64
 8000dfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <cw_pack_unsigned+0x25e>
 8000e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000e04:	611a      	str	r2, [r3, #16]
 8000e06:	e096      	b.n	8000f36 <cw_pack_unsigned+0x38c>
 8000e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e10:	3309      	adds	r3, #9
 8000e12:	66bb      	str	r3, [r7, #104]	; 0x68
 8000e14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000e1c:	1c53      	adds	r3, r2, #1
 8000e1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e20:	23cf      	movs	r3, #207	; 0xcf
 8000e22:	7013      	strb	r3, [r2, #0]
 8000e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e26:	0a1a      	lsrs	r2, r3, #8
 8000e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e2a:	061b      	lsls	r3, r3, #24
 8000e2c:	ea42 0503 	orr.w	r5, r2, r3
 8000e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e32:	0a1a      	lsrs	r2, r3, #8
 8000e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e36:	061b      	lsls	r3, r3, #24
 8000e38:	ea42 0403 	orr.w	r4, r2, r3
 8000e3c:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e42:	f405 437f 	and.w	r3, r5, #65280	; 0xff00
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e4a:	021a      	lsls	r2, r3, #8
 8000e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e4e:	0e1b      	lsrs	r3, r3, #24
 8000e50:	ea42 0a03 	orr.w	sl, r2, r3
 8000e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e56:	021a      	lsls	r2, r3, #8
 8000e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e5a:	0e1b      	lsrs	r3, r3, #24
 8000e5c:	ea42 0b03 	orr.w	fp, r2, r3
 8000e60:	f40a 087f 	and.w	r8, sl, #16711680	; 0xff0000
 8000e64:	f40b 097f 	and.w	r9, fp, #16711680	; 0xff0000
 8000e68:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	ea43 0308 	orr.w	r3, r3, r8
 8000e72:	633b      	str	r3, [r7, #48]	; 0x30
 8000e74:	4613      	mov	r3, r2
 8000e76:	ea43 0309 	orr.w	r3, r3, r9
 8000e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8000e7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000e80:	f04f 0000 	mov.w	r0, #0
 8000e84:	f04f 0100 	mov.w	r1, #0
 8000e88:	0a10      	lsrs	r0, r2, #8
 8000e8a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000e8e:	0a19      	lsrs	r1, r3, #8
 8000e90:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8000e9e:	4623      	mov	r3, r4
 8000ea0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	623b      	str	r3, [r7, #32]
 8000eaa:	462b      	mov	r3, r5
 8000eac:	460a      	mov	r2, r1
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	f04f 0300 	mov.w	r3, #0
 8000ebe:	020b      	lsls	r3, r1, #8
 8000ec0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8000ec4:	0202      	lsls	r2, r0, #8
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	61b9      	str	r1, [r7, #24]
 8000eca:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000ece:	61fb      	str	r3, [r7, #28]
 8000ed0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000ed4:	4623      	mov	r3, r4
 8000ed6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000eda:	4602      	mov	r2, r0
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	462b      	mov	r3, r5
 8000ee2:	460a      	mov	r2, r1
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	0e0a      	lsrs	r2, r1, #24
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000efc:	4621      	mov	r1, r4
 8000efe:	4311      	orrs	r1, r2
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	4629      	mov	r1, r5
 8000f04:	4319      	orrs	r1, r3
 8000f06:	60f9      	str	r1, [r7, #12]
 8000f08:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	0603      	lsls	r3, r0, #24
 8000f16:	2200      	movs	r2, #0
 8000f18:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000f1c:	4621      	mov	r1, r4
 8000f1e:	4311      	orrs	r1, r2
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	4629      	mov	r1, r5
 8000f24:	4319      	orrs	r1, r3
 8000f26:	6079      	str	r1, [r7, #4]
 8000f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f2a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000f2e:	e9c3 1200 	strd	r1, r2, [r3]
 8000f32:	e000      	b.n	8000f36 <cw_pack_unsigned+0x38c>
        return;
 8000f34:	bf00      	nop
}
 8000f36:	3788      	adds	r7, #136	; 0x88
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000f3e <cw_pack_array_size>:
    tryMove0(b? 0xc3: 0xc2);
}


void cw_pack_array_size(cw_pack_context* pack_context, uint32_t n)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b08a      	sub	sp, #40	; 0x28
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
    if (pack_context->return_code)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f040 80ad 	bne.w	80010ac <cw_pack_array_size+0x16e>
        return;

    if (n < 16)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d827      	bhi.n	8000fa8 <cw_pack_array_size+0x6a>
        tryMove0(0x90 | n);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d115      	bne.n	8000f90 <cw_pack_array_size+0x52>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d104      	bne.n	8000f76 <cw_pack_array_size+0x38>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f06f 0201 	mvn.w	r2, #1
 8000f72:	611a      	str	r2, [r3, #16]
 8000f74:	e09b      	b.n	80010ae <cw_pack_array_size+0x170>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	4798      	blx	r3
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <cw_pack_array_size+0x52>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	611a      	str	r2, [r3, #16]
 8000f8e:	e08e      	b.n	80010ae <cw_pack_array_size+0x170>
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	1c58      	adds	r0, r3, #1
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	6008      	str	r0, [r1, #0]
 8000f9e:	f062 026f 	orn	r2, r2, #111	; 0x6f
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	701a      	strb	r2, [r3, #0]
 8000fa6:	e082      	b.n	80010ae <cw_pack_array_size+0x170>

    if (n < 65536)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fae:	d23c      	bcs.n	800102a <cw_pack_array_size+0xec>
        tryMove2(0xdc, n);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	3303      	adds	r3, #3
 8000fba:	623b      	str	r3, [r7, #32]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	6a3a      	ldr	r2, [r7, #32]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d91b      	bls.n	8000ffe <cw_pack_array_size+0xc0>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d104      	bne.n	8000fd8 <cw_pack_array_size+0x9a>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f06f 0201 	mvn.w	r2, #1
 8000fd4:	611a      	str	r2, [r3, #16]
 8000fd6:	e06a      	b.n	80010ae <cw_pack_array_size+0x170>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	2103      	movs	r1, #3
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	4798      	blx	r3
 8000fe2:	6138      	str	r0, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <cw_pack_array_size+0xb4>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	611a      	str	r2, [r3, #16]
 8000ff0:	e05d      	b.n	80010ae <cw_pack_array_size+0x170>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	3303      	adds	r3, #3
 8000ffc:	623b      	str	r3, [r7, #32]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a3a      	ldr	r2, [r7, #32]
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	627a      	str	r2, [r7, #36]	; 0x24
 800100a:	22dc      	movs	r2, #220	; 0xdc
 800100c:	701a      	strb	r2, [r3, #0]
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b29b      	uxth	r3, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	b29a      	uxth	r2, r3
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b29b      	uxth	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b29a      	uxth	r2, r3
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	801a      	strh	r2, [r3, #0]
 8001028:	e041      	b.n	80010ae <cw_pack_array_size+0x170>

    tryMove4(0xdd, n);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	61fb      	str	r3, [r7, #28]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	3305      	adds	r3, #5
 8001034:	61bb      	str	r3, [r7, #24]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	429a      	cmp	r2, r3
 800103e:	d91b      	bls.n	8001078 <cw_pack_array_size+0x13a>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d104      	bne.n	8001052 <cw_pack_array_size+0x114>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f06f 0201 	mvn.w	r2, #1
 800104e:	611a      	str	r2, [r3, #16]
 8001050:	e02d      	b.n	80010ae <cw_pack_array_size+0x170>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	2105      	movs	r1, #5
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	4798      	blx	r3
 800105c:	6178      	str	r0, [r7, #20]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <cw_pack_array_size+0x12e>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	611a      	str	r2, [r3, #16]
 800106a:	e020      	b.n	80010ae <cw_pack_array_size+0x170>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	61fb      	str	r3, [r7, #28]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3305      	adds	r3, #5
 8001076:	61bb      	str	r3, [r7, #24]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	61fa      	str	r2, [r7, #28]
 8001084:	22dd      	movs	r2, #221	; 0xdd
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	0e1a      	lsrs	r2, r3, #24
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001094:	431a      	orrs	r2, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800109e:	431a      	orrs	r2, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	061b      	lsls	r3, r3, #24
 80010a4:	431a      	orrs	r2, r3
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e000      	b.n	80010ae <cw_pack_array_size+0x170>
        return;
 80010ac:	bf00      	nop
}
 80010ae:	3728      	adds	r7, #40	; 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <cw_unpack_context_init>:

/*******************************   U N P A C K   **********************************/


int cw_unpack_context_init (cw_unpack_context* unpack_context, const void* data, unsigned long length, unpack_underflow_handler huu)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
 80010c0:	603b      	str	r3, [r7, #0]
    unpack_context->start = unpack_context->current = (uint8_t*)data;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	61da      	str	r2, [r3, #28]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	69da      	ldr	r2, [r3, #28]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	619a      	str	r2, [r3, #24]
    unpack_context->end = unpack_context->start + length;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	699a      	ldr	r2, [r3, #24]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	441a      	add	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	621a      	str	r2, [r3, #32]
    unpack_context->return_code = test_byte_order();
 80010dc:	f7ff fd22 	bl	8000b24 <test_byte_order>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24
    unpack_context->err_no = 0;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2200      	movs	r2, #0
 80010ea:	629a      	str	r2, [r3, #40]	; 0x28
    unpack_context->handle_unpack_underflow = huu;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	62da      	str	r2, [r3, #44]	; 0x2c
    return unpack_context->return_code;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <cw_unpack_next>:
/*  Unpacking routines  ----------------------------------------------------------  */



void cw_unpack_next (cw_unpack_context* unpack_context)
{
 8001100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001104:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 8001108:	af00      	add	r7, sp, #0
 800110a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800110e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001112:	6018      	str	r0, [r3, #0]
    if (unpack_context->return_code)
 8001114:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001118:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001120:	2b00      	cmp	r3, #0
 8001122:	f044 84bf 	bne.w	8005aa4 <cw_unpack_next+0x49a4>
    uint32_t    tmpu32;
    uint16_t    tmpu16;
    uint8_t*    p;

#define buffer_end_return_code  CWP_RC_END_OF_INPUT;
    cw_unpack_assert_space(1);
 8001126:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800112a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001136:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800113a:	3301      	adds	r3, #1
 800113c:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 8001140:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001144:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6a1a      	ldr	r2, [r3, #32]
 800114c:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8001150:	4293      	cmp	r3, r2
 8001152:	d962      	bls.n	800121a <cw_unpack_next+0x11a>
 8001154:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001158:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001160:	2b00      	cmp	r3, #0
 8001162:	d111      	bne.n	8001188 <cw_unpack_next+0x88>
 8001164:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001168:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001172:	801a      	strh	r2, [r3, #0]
 8001174:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001178:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f04f 32ff 	mov.w	r2, #4294967295
 8001182:	625a      	str	r2, [r3, #36]	; 0x24
 8001184:	f004 bc97 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8001188:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800118c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001194:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001198:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800119c:	2101      	movs	r1, #1
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	4790      	blx	r2
 80011a2:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
 80011a6:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d028      	beq.n	8001200 <cw_unpack_next+0x100>
 80011ae:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80011b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b6:	d011      	beq.n	80011dc <cw_unpack_next+0xdc>
 80011b8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80011bc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011c6:	801a      	strh	r2, [r3, #0]
 80011c8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80011cc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80011d6:	625a      	str	r2, [r3, #36]	; 0x24
 80011d8:	f004 bc6d 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80011dc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80011e0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011ea:	801a      	strh	r2, [r3, #0]
 80011ec:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80011f0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f04f 32ff 	mov.w	r2, #4294967295
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
 80011fc:	f004 bc5b 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8001200:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001204:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001210:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001214:	3301      	adds	r3, #1
 8001216:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 800121a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800121e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8001228:	61d3      	str	r3, [r2, #28]
    uint8_t c = *p;
 800122a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	f887 32b7 	strb.w	r3, [r7, #695]	; 0x2b7
#undef buffer_end_return_code
#define buffer_end_return_code  CWP_RC_BUFFER_UNDERFLOW;
    switch (c)
 8001234:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 8001238:	2bff      	cmp	r3, #255	; 0xff
 800123a:	f204 8422 	bhi.w	8005a82 <cw_unpack_next+0x4982>
 800123e:	a201      	add	r2, pc, #4	; (adr r2, 8001244 <cw_unpack_next+0x144>)
 8001240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001244:	08001645 	.word	0x08001645
 8001248:	08001645 	.word	0x08001645
 800124c:	08001645 	.word	0x08001645
 8001250:	08001645 	.word	0x08001645
 8001254:	08001645 	.word	0x08001645
 8001258:	08001645 	.word	0x08001645
 800125c:	08001645 	.word	0x08001645
 8001260:	08001645 	.word	0x08001645
 8001264:	08001645 	.word	0x08001645
 8001268:	08001645 	.word	0x08001645
 800126c:	08001645 	.word	0x08001645
 8001270:	08001645 	.word	0x08001645
 8001274:	08001645 	.word	0x08001645
 8001278:	08001645 	.word	0x08001645
 800127c:	08001645 	.word	0x08001645
 8001280:	08001645 	.word	0x08001645
 8001284:	08001645 	.word	0x08001645
 8001288:	08001645 	.word	0x08001645
 800128c:	08001645 	.word	0x08001645
 8001290:	08001645 	.word	0x08001645
 8001294:	08001645 	.word	0x08001645
 8001298:	08001645 	.word	0x08001645
 800129c:	08001645 	.word	0x08001645
 80012a0:	08001645 	.word	0x08001645
 80012a4:	08001645 	.word	0x08001645
 80012a8:	08001645 	.word	0x08001645
 80012ac:	08001645 	.word	0x08001645
 80012b0:	08001645 	.word	0x08001645
 80012b4:	08001645 	.word	0x08001645
 80012b8:	08001645 	.word	0x08001645
 80012bc:	08001645 	.word	0x08001645
 80012c0:	08001645 	.word	0x08001645
 80012c4:	08001645 	.word	0x08001645
 80012c8:	08001645 	.word	0x08001645
 80012cc:	08001645 	.word	0x08001645
 80012d0:	08001645 	.word	0x08001645
 80012d4:	08001645 	.word	0x08001645
 80012d8:	08001645 	.word	0x08001645
 80012dc:	08001645 	.word	0x08001645
 80012e0:	08001645 	.word	0x08001645
 80012e4:	08001645 	.word	0x08001645
 80012e8:	08001645 	.word	0x08001645
 80012ec:	08001645 	.word	0x08001645
 80012f0:	08001645 	.word	0x08001645
 80012f4:	08001645 	.word	0x08001645
 80012f8:	08001645 	.word	0x08001645
 80012fc:	08001645 	.word	0x08001645
 8001300:	08001645 	.word	0x08001645
 8001304:	08001645 	.word	0x08001645
 8001308:	08001645 	.word	0x08001645
 800130c:	08001645 	.word	0x08001645
 8001310:	08001645 	.word	0x08001645
 8001314:	08001645 	.word	0x08001645
 8001318:	08001645 	.word	0x08001645
 800131c:	08001645 	.word	0x08001645
 8001320:	08001645 	.word	0x08001645
 8001324:	08001645 	.word	0x08001645
 8001328:	08001645 	.word	0x08001645
 800132c:	08001645 	.word	0x08001645
 8001330:	08001645 	.word	0x08001645
 8001334:	08001645 	.word	0x08001645
 8001338:	08001645 	.word	0x08001645
 800133c:	08001645 	.word	0x08001645
 8001340:	08001645 	.word	0x08001645
 8001344:	08001645 	.word	0x08001645
 8001348:	08001645 	.word	0x08001645
 800134c:	08001645 	.word	0x08001645
 8001350:	08001645 	.word	0x08001645
 8001354:	08001645 	.word	0x08001645
 8001358:	08001645 	.word	0x08001645
 800135c:	08001645 	.word	0x08001645
 8001360:	08001645 	.word	0x08001645
 8001364:	08001645 	.word	0x08001645
 8001368:	08001645 	.word	0x08001645
 800136c:	08001645 	.word	0x08001645
 8001370:	08001645 	.word	0x08001645
 8001374:	08001645 	.word	0x08001645
 8001378:	08001645 	.word	0x08001645
 800137c:	08001645 	.word	0x08001645
 8001380:	08001645 	.word	0x08001645
 8001384:	08001645 	.word	0x08001645
 8001388:	08001645 	.word	0x08001645
 800138c:	08001645 	.word	0x08001645
 8001390:	08001645 	.word	0x08001645
 8001394:	08001645 	.word	0x08001645
 8001398:	08001645 	.word	0x08001645
 800139c:	08001645 	.word	0x08001645
 80013a0:	08001645 	.word	0x08001645
 80013a4:	08001645 	.word	0x08001645
 80013a8:	08001645 	.word	0x08001645
 80013ac:	08001645 	.word	0x08001645
 80013b0:	08001645 	.word	0x08001645
 80013b4:	08001645 	.word	0x08001645
 80013b8:	08001645 	.word	0x08001645
 80013bc:	08001645 	.word	0x08001645
 80013c0:	08001645 	.word	0x08001645
 80013c4:	08001645 	.word	0x08001645
 80013c8:	08001645 	.word	0x08001645
 80013cc:	08001645 	.word	0x08001645
 80013d0:	08001645 	.word	0x08001645
 80013d4:	08001645 	.word	0x08001645
 80013d8:	08001645 	.word	0x08001645
 80013dc:	08001645 	.word	0x08001645
 80013e0:	08001645 	.word	0x08001645
 80013e4:	08001645 	.word	0x08001645
 80013e8:	08001645 	.word	0x08001645
 80013ec:	08001645 	.word	0x08001645
 80013f0:	08001645 	.word	0x08001645
 80013f4:	08001645 	.word	0x08001645
 80013f8:	08001645 	.word	0x08001645
 80013fc:	08001645 	.word	0x08001645
 8001400:	08001645 	.word	0x08001645
 8001404:	08001645 	.word	0x08001645
 8001408:	08001645 	.word	0x08001645
 800140c:	08001645 	.word	0x08001645
 8001410:	08001645 	.word	0x08001645
 8001414:	08001645 	.word	0x08001645
 8001418:	08001645 	.word	0x08001645
 800141c:	08001645 	.word	0x08001645
 8001420:	08001645 	.word	0x08001645
 8001424:	08001645 	.word	0x08001645
 8001428:	08001645 	.word	0x08001645
 800142c:	08001645 	.word	0x08001645
 8001430:	08001645 	.word	0x08001645
 8001434:	08001645 	.word	0x08001645
 8001438:	08001645 	.word	0x08001645
 800143c:	08001645 	.word	0x08001645
 8001440:	08001645 	.word	0x08001645
 8001444:	08001679 	.word	0x08001679
 8001448:	08001679 	.word	0x08001679
 800144c:	08001679 	.word	0x08001679
 8001450:	08001679 	.word	0x08001679
 8001454:	08001679 	.word	0x08001679
 8001458:	08001679 	.word	0x08001679
 800145c:	08001679 	.word	0x08001679
 8001460:	08001679 	.word	0x08001679
 8001464:	08001679 	.word	0x08001679
 8001468:	08001679 	.word	0x08001679
 800146c:	08001679 	.word	0x08001679
 8001470:	08001679 	.word	0x08001679
 8001474:	08001679 	.word	0x08001679
 8001478:	08001679 	.word	0x08001679
 800147c:	08001679 	.word	0x08001679
 8001480:	08001679 	.word	0x08001679
 8001484:	080016a1 	.word	0x080016a1
 8001488:	080016a1 	.word	0x080016a1
 800148c:	080016a1 	.word	0x080016a1
 8001490:	080016a1 	.word	0x080016a1
 8001494:	080016a1 	.word	0x080016a1
 8001498:	080016a1 	.word	0x080016a1
 800149c:	080016a1 	.word	0x080016a1
 80014a0:	080016a1 	.word	0x080016a1
 80014a4:	080016a1 	.word	0x080016a1
 80014a8:	080016a1 	.word	0x080016a1
 80014ac:	080016a1 	.word	0x080016a1
 80014b0:	080016a1 	.word	0x080016a1
 80014b4:	080016a1 	.word	0x080016a1
 80014b8:	080016a1 	.word	0x080016a1
 80014bc:	080016a1 	.word	0x080016a1
 80014c0:	080016a1 	.word	0x080016a1
 80014c4:	080016c9 	.word	0x080016c9
 80014c8:	080016c9 	.word	0x080016c9
 80014cc:	080016c9 	.word	0x080016c9
 80014d0:	080016c9 	.word	0x080016c9
 80014d4:	080016c9 	.word	0x080016c9
 80014d8:	080016c9 	.word	0x080016c9
 80014dc:	080016c9 	.word	0x080016c9
 80014e0:	080016c9 	.word	0x080016c9
 80014e4:	080016c9 	.word	0x080016c9
 80014e8:	080016c9 	.word	0x080016c9
 80014ec:	080016c9 	.word	0x080016c9
 80014f0:	080016c9 	.word	0x080016c9
 80014f4:	080016c9 	.word	0x080016c9
 80014f8:	080016c9 	.word	0x080016c9
 80014fc:	080016c9 	.word	0x080016c9
 8001500:	080016c9 	.word	0x080016c9
 8001504:	080016c9 	.word	0x080016c9
 8001508:	080016c9 	.word	0x080016c9
 800150c:	080016c9 	.word	0x080016c9
 8001510:	080016c9 	.word	0x080016c9
 8001514:	080016c9 	.word	0x080016c9
 8001518:	080016c9 	.word	0x080016c9
 800151c:	080016c9 	.word	0x080016c9
 8001520:	080016c9 	.word	0x080016c9
 8001524:	080016c9 	.word	0x080016c9
 8001528:	080016c9 	.word	0x080016c9
 800152c:	080016c9 	.word	0x080016c9
 8001530:	080016c9 	.word	0x080016c9
 8001534:	080016c9 	.word	0x080016c9
 8001538:	080016c9 	.word	0x080016c9
 800153c:	080016c9 	.word	0x080016c9
 8001540:	080016c9 	.word	0x080016c9
 8001544:	0800183f 	.word	0x0800183f
 8001548:	08005a83 	.word	0x08005a83
 800154c:	08001853 	.word	0x08001853
 8001550:	08001875 	.word	0x08001875
 8001554:	08001897 	.word	0x08001897
 8001558:	08001b29 	.word	0x08001b29
 800155c:	08001ddb 	.word	0x08001ddb
 8001560:	080020c7 	.word	0x080020c7
 8001564:	080028fd 	.word	0x080028fd
 8001568:	08002ce1 	.word	0x08002ce1
 800156c:	080030ff 	.word	0x080030ff
 8001570:	08003299 	.word	0x08003299
 8001574:	08003533 	.word	0x08003533
 8001578:	08003687 	.word	0x08003687
 800157c:	080037fb 	.word	0x080037fb
 8001580:	080039a9 	.word	0x080039a9
 8001584:	08003c43 	.word	0x08003c43
 8001588:	08003dbd 	.word	0x08003dbd
 800158c:	08003f57 	.word	0x08003f57
 8001590:	08004129 	.word	0x08004129
 8001594:	080043e3 	.word	0x080043e3
 8001598:	08004575 	.word	0x08004575
 800159c:	08004707 	.word	0x08004707
 80015a0:	080048e9 	.word	0x080048e9
 80015a4:	08004bc1 	.word	0x08004bc1
 80015a8:	08004d3b 	.word	0x08004d3b
 80015ac:	08004f9d 	.word	0x08004f9d
 80015b0:	0800521f 	.word	0x0800521f
 80015b4:	080054cf 	.word	0x080054cf
 80015b8:	08005613 	.word	0x08005613
 80015bc:	08005791 	.word	0x08005791
 80015c0:	080058d5 	.word	0x080058d5
 80015c4:	08005a53 	.word	0x08005a53
 80015c8:	08005a53 	.word	0x08005a53
 80015cc:	08005a53 	.word	0x08005a53
 80015d0:	08005a53 	.word	0x08005a53
 80015d4:	08005a53 	.word	0x08005a53
 80015d8:	08005a53 	.word	0x08005a53
 80015dc:	08005a53 	.word	0x08005a53
 80015e0:	08005a53 	.word	0x08005a53
 80015e4:	08005a53 	.word	0x08005a53
 80015e8:	08005a53 	.word	0x08005a53
 80015ec:	08005a53 	.word	0x08005a53
 80015f0:	08005a53 	.word	0x08005a53
 80015f4:	08005a53 	.word	0x08005a53
 80015f8:	08005a53 	.word	0x08005a53
 80015fc:	08005a53 	.word	0x08005a53
 8001600:	08005a53 	.word	0x08005a53
 8001604:	08005a53 	.word	0x08005a53
 8001608:	08005a53 	.word	0x08005a53
 800160c:	08005a53 	.word	0x08005a53
 8001610:	08005a53 	.word	0x08005a53
 8001614:	08005a53 	.word	0x08005a53
 8001618:	08005a53 	.word	0x08005a53
 800161c:	08005a53 	.word	0x08005a53
 8001620:	08005a53 	.word	0x08005a53
 8001624:	08005a53 	.word	0x08005a53
 8001628:	08005a53 	.word	0x08005a53
 800162c:	08005a53 	.word	0x08005a53
 8001630:	08005a53 	.word	0x08005a53
 8001634:	08005a53 	.word	0x08005a53
 8001638:	08005a53 	.word	0x08005a53
 800163c:	08005a53 	.word	0x08005a53
 8001640:	08005a53 	.word	0x08005a53
        case 0x58: case 0x59: case 0x5a: case 0x5b: case 0x5c: case 0x5d: case 0x5e: case 0x5f:
        case 0x60: case 0x61: case 0x62: case 0x63: case 0x64: case 0x65: case 0x66: case 0x67:
        case 0x68: case 0x69: case 0x6a: case 0x6b: case 0x6c: case 0x6d: case 0x6e: case 0x6f:
        case 0x70: case 0x71: case 0x72: case 0x73: case 0x74: case 0x75: case 0x76: case 0x77:
        case 0x78: case 0x79: case 0x7a: case 0x7b: case 0x7c: case 0x7d: case 0x7e: case 0x7f:
                    getDDItem(CWP_ITEM_POSITIVE_INTEGER, i64, c);       return;  // positive fixnum
 8001644:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001648:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8001652:	801a      	strh	r2, [r3, #0]
 8001654:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 8001658:	2200      	movs	r2, #0
 800165a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800165e:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 8001662:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001666:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	e9d7 127a 	ldrd	r1, r2, [r7, #488]	; 0x1e8
 8001670:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8001674:	f004 ba1f 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0x80: case 0x81: case 0x82: case 0x83: case 0x84: case 0x85: case 0x86: case 0x87:
        case 0x88: case 0x89: case 0x8a: case 0x8b: case 0x8c: case 0x8d: case 0x8e: case 0x8f:
                    getDDItem(CWP_ITEM_MAP, map.size, c & 0x0f);        return;  // fixmap
 8001678:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800167c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f240 1235 	movw	r2, #309	; 0x135
 8001686:	801a      	strh	r2, [r3, #0]
 8001688:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 800168c:	f003 020f 	and.w	r2, r3, #15
 8001690:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001694:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	f004 ba0b 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0x90: case 0x91: case 0x92: case 0x93: case 0x94: case 0x95: case 0x96: case 0x97:
        case 0x98: case 0x99: case 0x9a: case 0x9b: case 0x9c: case 0x9d: case 0x9e: case 0x9f:
                    getDDItem(CWP_ITEM_ARRAY, array.size, c & 0x0f);    return;  // fixarray
 80016a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80016a4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f44f 729a 	mov.w	r2, #308	; 0x134
 80016ae:	801a      	strh	r2, [r3, #0]
 80016b0:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 80016b4:	f003 020f 	and.w	r2, r3, #15
 80016b8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80016bc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	f004 b9f7 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xa0: case 0xa1: case 0xa2: case 0xa3: case 0xa4: case 0xa5: case 0xa6: case 0xa7:
        case 0xa8: case 0xa9: case 0xaa: case 0xab: case 0xac: case 0xad: case 0xae: case 0xaf:
        case 0xb0: case 0xb1: case 0xb2: case 0xb3: case 0xb4: case 0xb5: case 0xb6: case 0xb7:
        case 0xb8: case 0xb9: case 0xba: case 0xbb: case 0xbc: case 0xbd: case 0xbe: case 0xbf:
                    getDDItem(CWP_ITEM_STR, str.length, c & 0x1f);              // fixraw
 80016c8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80016cc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80016d6:	801a      	strh	r2, [r3, #0]
 80016d8:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 80016dc:	f003 021f 	and.w	r2, r3, #31
 80016e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80016e4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(str);
 80016ec:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80016f0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80016fc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001700:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 800170c:	4413      	add	r3, r2
 800170e:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8001712:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001716:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 8001722:	429a      	cmp	r2, r3
 8001724:	d979      	bls.n	800181a <cw_unpack_next+0x71a>
 8001726:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800172a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	2b00      	cmp	r3, #0
 8001734:	d111      	bne.n	800175a <cw_unpack_next+0x65a>
 8001736:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800173a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001744:	801a      	strh	r2, [r3, #0]
 8001746:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800174a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f06f 0202 	mvn.w	r2, #2
 8001754:	625a      	str	r2, [r3, #36]	; 0x24
 8001756:	f004 b9ae 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 800175a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800175e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800176a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	68d1      	ldr	r1, [r2, #12]
 8001772:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001776:	f5a2 74ba 	sub.w	r4, r2, #372	; 0x174
 800177a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800177e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001782:	6810      	ldr	r0, [r2, #0]
 8001784:	4798      	blx	r3
 8001786:	6020      	str	r0, [r4, #0]
 8001788:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800178c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d02e      	beq.n	80017f4 <cw_unpack_next+0x6f4>
 8001796:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800179a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a4:	d014      	beq.n	80017d0 <cw_unpack_next+0x6d0>
 80017a6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80017aa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017b4:	801a      	strh	r2, [r3, #0]
 80017b6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80017ba:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80017c4:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	625a      	str	r2, [r3, #36]	; 0x24
 80017cc:	f004 b973 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80017d0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80017d4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017de:	801a      	strh	r2, [r3, #0]
 80017e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80017e4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f06f 0202 	mvn.w	r2, #2
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24
 80017f0:	f004 b961 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80017f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80017f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001804:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001808:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8001814:	4413      	add	r3, r2
 8001816:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 800181a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800181e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 8001828:	61da      	str	r2, [r3, #28]
 800182a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800182e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	f004 b93c 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xc0:  unpack_context->item.type = CWP_ITEM_NIL;           return;  // nil
 800183e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001842:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800184c:	801a      	strh	r2, [r3, #0]
 800184e:	f004 b932 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xc2:  getDDItem(CWP_ITEM_BOOLEAN, boolean, false);        return;  // false
 8001852:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001856:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f240 122d 	movw	r2, #301	; 0x12d
 8001860:	801a      	strh	r2, [r3, #0]
 8001862:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001866:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2200      	movs	r2, #0
 800186e:	721a      	strb	r2, [r3, #8]
 8001870:	f004 b921 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xc3:  getDDItem(CWP_ITEM_BOOLEAN, boolean, true);         return;  // true
 8001874:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001878:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f240 122d 	movw	r2, #301	; 0x12d
 8001882:	801a      	strh	r2, [r3, #0]
 8001884:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001888:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2201      	movs	r2, #1
 8001890:	721a      	strb	r2, [r3, #8]
 8001892:	f004 b910 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xc4:  getDDItem1(CWP_ITEM_BIN, bin.length, uint8_t);              // bin 8
 8001896:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800189a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f240 1233 	movw	r2, #307	; 0x133
 80018a4:	801a      	strh	r2, [r3, #0]
 80018a6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80018aa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80018b6:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80018ba:	3301      	adds	r3, #1
 80018bc:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 80018c0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80018c4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d96e      	bls.n	80019b2 <cw_unpack_next+0x8b2>
 80018d4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80018d8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d111      	bne.n	8001908 <cw_unpack_next+0x808>
 80018e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80018e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018f2:	801a      	strh	r2, [r3, #0]
 80018f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80018f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f06f 0202 	mvn.w	r2, #2
 8001902:	625a      	str	r2, [r3, #36]	; 0x24
 8001904:	f004 b8d7 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8001908:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800190c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001918:	f5a2 74b6 	sub.w	r4, r2, #364	; 0x16c
 800191c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001920:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001924:	2101      	movs	r1, #1
 8001926:	6810      	ldr	r0, [r2, #0]
 8001928:	4798      	blx	r3
 800192a:	6020      	str	r0, [r4, #0]
 800192c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001930:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d02e      	beq.n	8001998 <cw_unpack_next+0x898>
 800193a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800193e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001948:	d014      	beq.n	8001974 <cw_unpack_next+0x874>
 800194a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800194e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001958:	801a      	strh	r2, [r3, #0]
 800195a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800195e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001968:	f5a2 72b6 	sub.w	r2, r2, #364	; 0x16c
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	625a      	str	r2, [r3, #36]	; 0x24
 8001970:	f004 b8a1 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8001974:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001978:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001982:	801a      	strh	r2, [r3, #0]
 8001984:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001988:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f06f 0202 	mvn.w	r2, #2
 8001992:	625a      	str	r2, [r3, #36]	; 0x24
 8001994:	f004 b88f 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8001998:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800199c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80019a8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80019ac:	3301      	adds	r3, #1
 80019ae:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 80019b2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80019b6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 80019c0:	61da      	str	r2, [r3, #28]
 80019c2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80019ce:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(bin);
 80019d6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80019da:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80019e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80019ea:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80019f6:	4413      	add	r3, r2
 80019f8:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 80019fc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001a00:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d979      	bls.n	8001b04 <cw_unpack_next+0xa04>
 8001a10:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001a14:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d111      	bne.n	8001a44 <cw_unpack_next+0x944>
 8001a20:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001a24:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a2e:	801a      	strh	r2, [r3, #0]
 8001a30:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001a34:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f06f 0202 	mvn.w	r2, #2
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24
 8001a40:	f004 b839 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8001a44:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001a48:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001a54:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	68d1      	ldr	r1, [r2, #12]
 8001a5c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001a60:	f5a2 74b8 	sub.w	r4, r2, #368	; 0x170
 8001a64:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001a68:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a6c:	6810      	ldr	r0, [r2, #0]
 8001a6e:	4798      	blx	r3
 8001a70:	6020      	str	r0, [r4, #0]
 8001a72:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001a76:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d02e      	beq.n	8001ade <cw_unpack_next+0x9de>
 8001a80:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001a84:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8e:	d014      	beq.n	8001aba <cw_unpack_next+0x9ba>
 8001a90:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001a94:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a9e:	801a      	strh	r2, [r3, #0]
 8001aa0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001aa4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001aae:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	625a      	str	r2, [r3, #36]	; 0x24
 8001ab6:	f003 bffe 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8001aba:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001abe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ac8:	801a      	strh	r2, [r3, #0]
 8001aca:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001ace:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f06f 0202 	mvn.w	r2, #2
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
 8001ada:	f003 bfec 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8001ade:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001ae2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001aee:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001af2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8001afe:	4413      	add	r3, r2
 8001b00:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8001b04:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b08:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 8001b12:	61da      	str	r2, [r3, #28]
 8001b14:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b18:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	f003 bfc7 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xc5:  getDDItem2(CWP_ITEM_BIN, bin.length, uint16_t);             // bin 16
 8001b28:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b2c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f240 1233 	movw	r2, #307	; 0x133
 8001b36:	801a      	strh	r2, [r3, #0]
 8001b38:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b3c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001b48:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8001b52:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b56:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d96e      	bls.n	8001c44 <cw_unpack_next+0xb44>
 8001b66:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b6a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d111      	bne.n	8001b9a <cw_unpack_next+0xa9a>
 8001b76:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b7a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b84:	801a      	strh	r2, [r3, #0]
 8001b86:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b8a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f06f 0202 	mvn.w	r2, #2
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24
 8001b96:	f003 bf8e 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8001b9a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001b9e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001baa:	f5a2 74b2 	sub.w	r4, r2, #356	; 0x164
 8001bae:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001bb2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001bb6:	2102      	movs	r1, #2
 8001bb8:	6810      	ldr	r0, [r2, #0]
 8001bba:	4798      	blx	r3
 8001bbc:	6020      	str	r0, [r4, #0]
 8001bbe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001bc2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d02e      	beq.n	8001c2a <cw_unpack_next+0xb2a>
 8001bcc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001bd0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bda:	d014      	beq.n	8001c06 <cw_unpack_next+0xb06>
 8001bdc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001be0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bea:	801a      	strh	r2, [r3, #0]
 8001bec:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001bf0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001bfa:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24
 8001c02:	f003 bf58 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8001c06:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001c0a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c14:	801a      	strh	r2, [r3, #0]
 8001c16:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001c1a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0202 	mvn.w	r2, #2
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24
 8001c26:	f003 bf46 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8001c2a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001c2e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001c3a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001c3e:	3302      	adds	r3, #2
 8001c40:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8001c44:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001c48:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8001c52:	61da      	str	r2, [r3, #28]
 8001c54:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 8001c5e:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	b21a      	sxth	r2, r3
 8001c66:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8001c6a:	0a1b      	lsrs	r3, r3, #8
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	b21b      	sxth	r3, r3
 8001c70:	4313      	orrs	r3, r2
 8001c72:	b21b      	sxth	r3, r3
 8001c74:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 8001c78:	f8b7 22aa 	ldrh.w	r2, [r7, #682]	; 0x2aa
 8001c7c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001c80:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(bin);
 8001c88:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001c8c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001c98:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001c9c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8001ca8:	4413      	add	r3, r2
 8001caa:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8001cae:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001cb2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d979      	bls.n	8001db6 <cw_unpack_next+0xcb6>
 8001cc2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001cc6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d111      	bne.n	8001cf6 <cw_unpack_next+0xbf6>
 8001cd2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001cd6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ce0:	801a      	strh	r2, [r3, #0]
 8001ce2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001ce6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0202 	mvn.w	r2, #2
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24
 8001cf2:	f003 bee0 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8001cf6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001cfa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d02:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001d06:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	68d1      	ldr	r1, [r2, #12]
 8001d0e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001d12:	f5a2 74b4 	sub.w	r4, r2, #360	; 0x168
 8001d16:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001d1a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d1e:	6810      	ldr	r0, [r2, #0]
 8001d20:	4798      	blx	r3
 8001d22:	6020      	str	r0, [r4, #0]
 8001d24:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001d28:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d02e      	beq.n	8001d90 <cw_unpack_next+0xc90>
 8001d32:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001d36:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d40:	d014      	beq.n	8001d6c <cw_unpack_next+0xc6c>
 8001d42:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001d46:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d50:	801a      	strh	r2, [r3, #0]
 8001d52:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001d56:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001d60:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	625a      	str	r2, [r3, #36]	; 0x24
 8001d68:	f003 bea5 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8001d6c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001d70:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d7a:	801a      	strh	r2, [r3, #0]
 8001d7c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001d80:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f06f 0202 	mvn.w	r2, #2
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24
 8001d8c:	f003 be93 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8001d90:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001d94:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001da0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001da4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8001db0:	4413      	add	r3, r2
 8001db2:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8001db6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001dba:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 8001dc4:	61da      	str	r2, [r3, #28]
 8001dc6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001dca:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	f003 be6e 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xc6:  getDDItem4(CWP_ITEM_BIN, bin.length, uint32_t);             // bin 32
 8001dda:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001dde:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f240 1233 	movw	r2, #307	; 0x133
 8001de8:	801a      	strh	r2, [r3, #0]
 8001dea:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001dee:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001dfa:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001dfe:	3304      	adds	r3, #4
 8001e00:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8001e04:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001e08:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d96e      	bls.n	8001ef6 <cw_unpack_next+0xdf6>
 8001e18:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001e1c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d111      	bne.n	8001e4c <cw_unpack_next+0xd4c>
 8001e28:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001e2c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e36:	801a      	strh	r2, [r3, #0]
 8001e38:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001e3c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f06f 0202 	mvn.w	r2, #2
 8001e46:	625a      	str	r2, [r3, #36]	; 0x24
 8001e48:	f003 be35 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8001e4c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001e50:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e58:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001e5c:	f5a2 74ae 	sub.w	r4, r2, #348	; 0x15c
 8001e60:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001e64:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001e68:	2104      	movs	r1, #4
 8001e6a:	6810      	ldr	r0, [r2, #0]
 8001e6c:	4798      	blx	r3
 8001e6e:	6020      	str	r0, [r4, #0]
 8001e70:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001e74:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d02e      	beq.n	8001edc <cw_unpack_next+0xddc>
 8001e7e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001e82:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8c:	d014      	beq.n	8001eb8 <cw_unpack_next+0xdb8>
 8001e8e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001e92:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e9c:	801a      	strh	r2, [r3, #0]
 8001e9e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001ea2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001eac:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24
 8001eb4:	f003 bdff 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8001eb8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001ebc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ec6:	801a      	strh	r2, [r3, #0]
 8001ec8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001ecc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f06f 0202 	mvn.w	r2, #2
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24
 8001ed8:	f003 bded 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8001edc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001ee0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001eec:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8001ef6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001efa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 8001f04:	61da      	str	r2, [r3, #28]
 8001f06:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f10:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f1a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	061a      	lsls	r2, r3, #24
 8001f22:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f26:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001f32:	431a      	orrs	r2, r3
 8001f34:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f38:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	0a1b      	lsrs	r3, r3, #8
 8001f40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001f44:	431a      	orrs	r2, r3
 8001f46:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f4a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0e1b      	lsrs	r3, r3, #24
 8001f52:	431a      	orrs	r2, r3
 8001f54:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f58:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f62:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f6c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(bin);
 8001f74:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f78:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001f84:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f88:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8001f94:	4413      	add	r3, r2
 8001f96:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8001f9a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f9e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d979      	bls.n	80020a2 <cw_unpack_next+0xfa2>
 8001fae:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001fb2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d111      	bne.n	8001fe2 <cw_unpack_next+0xee2>
 8001fbe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001fc2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fcc:	801a      	strh	r2, [r3, #0]
 8001fce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001fd2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0202 	mvn.w	r2, #2
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24
 8001fde:	f003 bd6a 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8001fe2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001fe6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fee:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001ff2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	68d1      	ldr	r1, [r2, #12]
 8001ffa:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001ffe:	f5a2 74b0 	sub.w	r4, r2, #352	; 0x160
 8002002:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002006:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800200a:	6810      	ldr	r0, [r2, #0]
 800200c:	4798      	blx	r3
 800200e:	6020      	str	r0, [r4, #0]
 8002010:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002014:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d02e      	beq.n	800207c <cw_unpack_next+0xf7c>
 800201e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002022:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d014      	beq.n	8002058 <cw_unpack_next+0xf58>
 800202e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002032:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f240 32e7 	movw	r2, #999	; 0x3e7
 800203c:	801a      	strh	r2, [r3, #0]
 800203e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002042:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800204c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	625a      	str	r2, [r3, #36]	; 0x24
 8002054:	f003 bd2f 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8002058:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800205c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002066:	801a      	strh	r2, [r3, #0]
 8002068:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800206c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f06f 0202 	mvn.w	r2, #2
 8002076:	625a      	str	r2, [r3, #36]	; 0x24
 8002078:	f003 bd1d 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 800207c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002080:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800208c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002090:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 800209c:	4413      	add	r3, r2
 800209e:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 80020a2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80020a6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 80020b0:	61da      	str	r2, [r3, #28]
 80020b2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80020b6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80020c0:	609a      	str	r2, [r3, #8]
 80020c2:	f003 bcf8 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xc7:  getDDItem1(CWP_ITEM_EXT, ext.length, uint8_t);              // ext 8
 80020c6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80020ca:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	f44f 739b 	mov.w	r3, #310	; 0x136
 80020d4:	8013      	strh	r3, [r2, #0]
 80020d6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80020da:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80020e6:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80020ea:	3301      	adds	r3, #1
 80020ec:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 80020f0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80020f4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6a1a      	ldr	r2, [r3, #32]
 80020fc:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8002100:	4293      	cmp	r3, r2
 8002102:	d96e      	bls.n	80021e2 <cw_unpack_next+0x10e2>
 8002104:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002108:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	2b00      	cmp	r3, #0
 8002112:	d111      	bne.n	8002138 <cw_unpack_next+0x1038>
 8002114:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002118:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002122:	801a      	strh	r2, [r3, #0]
 8002124:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002128:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f06f 0202 	mvn.w	r2, #2
 8002132:	625a      	str	r2, [r3, #36]	; 0x24
 8002134:	f003 bcbf 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8002138:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800213c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002144:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002148:	f5a3 74a4 	sub.w	r4, r3, #328	; 0x148
 800214c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002150:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002154:	2101      	movs	r1, #1
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	4790      	blx	r2
 800215a:	6020      	str	r0, [r4, #0]
 800215c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002160:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d02e      	beq.n	80021c8 <cw_unpack_next+0x10c8>
 800216a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800216e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002178:	d014      	beq.n	80021a4 <cw_unpack_next+0x10a4>
 800217a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800217e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002188:	801a      	strh	r2, [r3, #0]
 800218a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800218e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002198:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	625a      	str	r2, [r3, #36]	; 0x24
 80021a0:	f003 bc89 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80021a4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80021a8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021b2:	801a      	strh	r2, [r3, #0]
 80021b4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80021b8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f06f 0202 	mvn.w	r2, #2
 80021c2:	625a      	str	r2, [r3, #36]	; 0x24
 80021c4:	f003 bc77 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80021c8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80021cc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80021d8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80021dc:	3301      	adds	r3, #1
 80021de:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 80021e2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80021e6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 80021f0:	61d3      	str	r3, [r2, #28]
 80021f2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80021fe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_space(1);
 8002206:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800220a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002216:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800221a:	3301      	adds	r3, #1
 800221c:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8002220:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002224:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6a1a      	ldr	r2, [r3, #32]
 800222c:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8002230:	4293      	cmp	r3, r2
 8002232:	d96e      	bls.n	8002312 <cw_unpack_next+0x1212>
 8002234:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002238:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d111      	bne.n	8002268 <cw_unpack_next+0x1168>
 8002244:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002248:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002252:	801a      	strh	r2, [r3, #0]
 8002254:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002258:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f06f 0202 	mvn.w	r2, #2
 8002262:	625a      	str	r2, [r3, #36]	; 0x24
 8002264:	f003 bc27 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8002268:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800226c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002274:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002278:	f5a3 74a6 	sub.w	r4, r3, #332	; 0x14c
 800227c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002280:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002284:	2101      	movs	r1, #1
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	4790      	blx	r2
 800228a:	6020      	str	r0, [r4, #0]
 800228c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002290:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d02e      	beq.n	80022f8 <cw_unpack_next+0x11f8>
 800229a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800229e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d014      	beq.n	80022d4 <cw_unpack_next+0x11d4>
 80022aa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80022ae:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022b8:	801a      	strh	r2, [r3, #0]
 80022ba:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80022be:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80022c8:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	625a      	str	r2, [r3, #36]	; 0x24
 80022d0:	f003 bbf1 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80022d4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80022d8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022e2:	801a      	strh	r2, [r3, #0]
 80022e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80022e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f06f 0202 	mvn.w	r2, #2
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24
 80022f4:	f003 bbdf 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80022f8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80022fc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002308:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800230c:	3301      	adds	r3, #1
 800230e:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8002312:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002316:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8002320:	61d3      	str	r3, [r2, #28]
                    unpack_context->item.type = (cwpack_item_types)*(int8_t*)p;
 8002322:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002326:	f993 3000 	ldrsb.w	r3, [r3]
 800232a:	b219      	sxth	r1, r3
 800232c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002330:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	460b      	mov	r3, r1
 8002338:	8013      	strh	r3, [r2, #0]
                    if (unpack_context->item.type == CWP_ITEM_TIMESTAMP)
 800233a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800233e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	f040 822d 	bne.w	80027aa <cw_unpack_next+0x16aa>
                    {
                        if (unpack_context->item.as.ext.length == 12)
 8002350:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002354:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b0c      	cmp	r3, #12
 800235e:	f040 8212 	bne.w	8002786 <cw_unpack_next+0x1686>
                        {
                            cw_unpack_assert_space(4);
 8002362:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002366:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002372:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002376:	3304      	adds	r3, #4
 8002378:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
 800237c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002380:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6a1a      	ldr	r2, [r3, #32]
 8002388:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 800238c:	4293      	cmp	r3, r2
 800238e:	d96e      	bls.n	800246e <cw_unpack_next+0x136e>
 8002390:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002394:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d111      	bne.n	80023c4 <cw_unpack_next+0x12c4>
 80023a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80023a4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023ae:	801a      	strh	r2, [r3, #0]
 80023b0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80023b4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f06f 0202 	mvn.w	r2, #2
 80023be:	625a      	str	r2, [r3, #36]	; 0x24
 80023c0:	f003 bb79 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80023c4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80023c8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80023d4:	f5a3 74aa 	sub.w	r4, r3, #340	; 0x154
 80023d8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80023dc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80023e0:	2104      	movs	r1, #4
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	4790      	blx	r2
 80023e6:	6020      	str	r0, [r4, #0]
 80023e8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80023ec:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d02e      	beq.n	8002454 <cw_unpack_next+0x1354>
 80023f6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80023fa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002404:	d014      	beq.n	8002430 <cw_unpack_next+0x1330>
 8002406:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800240a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002414:	801a      	strh	r2, [r3, #0]
 8002416:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800241a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002424:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	625a      	str	r2, [r3, #36]	; 0x24
 800242c:	f003 bb43 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8002430:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002434:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800243e:	801a      	strh	r2, [r3, #0]
 8002440:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002444:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f06f 0202 	mvn.w	r2, #2
 800244e:	625a      	str	r2, [r3, #36]	; 0x24
 8002450:	f003 bb31 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8002454:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002458:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002464:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002468:	3304      	adds	r3, #4
 800246a:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
 800246e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002472:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 800247c:	61d3      	str	r3, [r2, #28]
                            cw_load32(p);
 800247e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002488:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002492:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	061a      	lsls	r2, r3, #24
 800249a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800249e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80024aa:	431a      	orrs	r2, r3
 80024ac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80024b0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0a1b      	lsrs	r3, r3, #8
 80024b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80024bc:	431a      	orrs	r2, r3
 80024be:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80024c2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	0e1b      	lsrs	r3, r3, #24
 80024ca:	431a      	orrs	r2, r3
 80024cc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80024d0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80024d4:	601a      	str	r2, [r3, #0]
                            unpack_context->item.as.time.tv_nsec = tmpu32;
 80024d6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80024da:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80024e4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	611a      	str	r2, [r3, #16]
                            cw_unpack_assert_space(8);
 80024ec:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80024f0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80024fc:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002500:	3308      	adds	r3, #8
 8002502:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8002506:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800250a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6a1a      	ldr	r2, [r3, #32]
 8002512:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8002516:	4293      	cmp	r3, r2
 8002518:	d96e      	bls.n	80025f8 <cw_unpack_next+0x14f8>
 800251a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800251e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	2b00      	cmp	r3, #0
 8002528:	d111      	bne.n	800254e <cw_unpack_next+0x144e>
 800252a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800252e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002538:	801a      	strh	r2, [r3, #0]
 800253a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800253e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0202 	mvn.w	r2, #2
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
 800254a:	f003 bab4 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 800254e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002552:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800255a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800255e:	f5a3 74ac 	sub.w	r4, r3, #344	; 0x158
 8002562:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002566:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800256a:	2108      	movs	r1, #8
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	4790      	blx	r2
 8002570:	6020      	str	r0, [r4, #0]
 8002572:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002576:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d02e      	beq.n	80025de <cw_unpack_next+0x14de>
 8002580:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002584:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258e:	d014      	beq.n	80025ba <cw_unpack_next+0x14ba>
 8002590:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002594:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800259e:	801a      	strh	r2, [r3, #0]
 80025a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80025a4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80025ae:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24
 80025b6:	f003 ba7e 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80025ba:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80025be:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025c8:	801a      	strh	r2, [r3, #0]
 80025ca:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80025ce:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0202 	mvn.w	r2, #2
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
 80025da:	f003 ba6c 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80025de:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80025e2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80025ee:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80025f2:	3308      	adds	r3, #8
 80025f4:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 80025f8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80025fc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8002606:	61d3      	str	r3, [r2, #28]
                            cw_load64(p,tmpu64);
 8002608:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002610:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
 8002614:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8002618:	0a1a      	lsrs	r2, r3, #8
 800261a:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800261e:	061b      	lsls	r3, r3, #24
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002626:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800262a:	0a1a      	lsrs	r2, r3, #8
 800262c:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8002630:	061b      	lsls	r3, r3, #24
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002638:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 800263c:	460b      	mov	r3, r1
 800263e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002642:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8002646:	4613      	mov	r3, r2
 8002648:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800264c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002650:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002654:	021a      	lsls	r2, r3, #8
 8002656:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800265a:	0e1b      	lsrs	r3, r3, #24
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8002662:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8002666:	021a      	lsls	r2, r3, #8
 8002668:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800266c:	0e1b      	lsrs	r3, r3, #24
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8002674:	e9d7 1274 	ldrd	r1, r2, [r7, #464]	; 0x1d0
 8002678:	460b      	mov	r3, r1
 800267a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800267e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002682:	4613      	mov	r3, r2
 8002684:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002688:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800268c:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 8002690:	4623      	mov	r3, r4
 8002692:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8002696:	4602      	mov	r2, r0
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800269e:	462b      	mov	r3, r5
 80026a0:	460a      	mov	r2, r1
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80026a8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80026ac:	f04f 0000 	mov.w	r0, #0
 80026b0:	f04f 0100 	mov.w	r1, #0
 80026b4:	0a10      	lsrs	r0, r2, #8
 80026b6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80026ba:	0a19      	lsrs	r1, r3, #8
 80026bc:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 80026c0:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80026ca:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 80026ce:	4623      	mov	r3, r4
 80026d0:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80026d4:	4602      	mov	r2, r0
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80026dc:	462b      	mov	r3, r5
 80026de:	460a      	mov	r2, r1
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80026e6:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	020b      	lsls	r3, r1, #8
 80026f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80026f8:	0202      	lsls	r2, r0, #8
 80026fa:	2100      	movs	r1, #0
 80026fc:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 8002700:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8002704:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8002708:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	; 0x1b0
 800270c:	4623      	mov	r3, r4
 800270e:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8002712:	4602      	mov	r2, r0
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800271a:	462b      	mov	r3, r5
 800271c:	460a      	mov	r2, r1
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002724:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	0e0a      	lsrs	r2, r1, #24
 8002732:	2300      	movs	r3, #0
 8002734:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 8002738:	4621      	mov	r1, r4
 800273a:	4311      	orrs	r1, r2
 800273c:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 8002740:	4629      	mov	r1, r5
 8002742:	4319      	orrs	r1, r3
 8002744:	f8c7 119c 	str.w	r1, [r7, #412]	; 0x19c
 8002748:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	0603      	lsls	r3, r0, #24
 8002756:	2200      	movs	r2, #0
 8002758:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 800275c:	4621      	mov	r1, r4
 800275e:	4311      	orrs	r1, r2
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	4629      	mov	r1, r5
 8002764:	4319      	orrs	r1, r3
 8002766:	60f9      	str	r1, [r7, #12]
 8002768:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800276c:	e9c7 349e 	strd	r3, r4, [r7, #632]	; 0x278
                            unpack_context->item.as.time.tv_sec = (int64_t)tmpu64;
 8002770:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8002774:	f507 715c 	add.w	r1, r7, #880	; 0x370
 8002778:	f5a1 71be 	sub.w	r1, r1, #380	; 0x17c
 800277c:	6809      	ldr	r1, [r1, #0]
 800277e:	e9c1 2302 	strd	r2, r3, [r1, #8]
                            return;
 8002782:	f003 b998 	b.w	8005ab6 <cw_unpack_next+0x49b6>
                        }
                        UNPACK_ERROR(CWP_RC_WRONG_TIMESTAMP_LENGTH)
 8002786:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800278a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002794:	801a      	strh	r2, [r3, #0]
 8002796:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800279a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 020b 	mvn.w	r2, #11
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24
 80027a6:	f003 b986 	b.w	8005ab6 <cw_unpack_next+0x49b6>
                    }
                    cw_unpack_assert_blob(ext);
 80027aa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80027ae:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80027ba:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80027be:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80027ca:	4413      	add	r3, r2
 80027cc:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 80027d0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80027d4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d979      	bls.n	80028d8 <cw_unpack_next+0x17d8>
 80027e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80027e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d111      	bne.n	8002818 <cw_unpack_next+0x1718>
 80027f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80027f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002802:	801a      	strh	r2, [r3, #0]
 8002804:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002808:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f06f 0202 	mvn.w	r2, #2
 8002812:	625a      	str	r2, [r3, #36]	; 0x24
 8002814:	f003 b94f 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8002818:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800281c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002824:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002828:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	68d1      	ldr	r1, [r2, #12]
 8002830:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002834:	f5a2 74a8 	sub.w	r4, r2, #336	; 0x150
 8002838:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800283c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002840:	6810      	ldr	r0, [r2, #0]
 8002842:	4798      	blx	r3
 8002844:	6020      	str	r0, [r4, #0]
 8002846:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800284a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d02e      	beq.n	80028b2 <cw_unpack_next+0x17b2>
 8002854:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002858:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002862:	d014      	beq.n	800288e <cw_unpack_next+0x178e>
 8002864:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002868:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002872:	801a      	strh	r2, [r3, #0]
 8002874:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002878:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002882:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	625a      	str	r2, [r3, #36]	; 0x24
 800288a:	f003 b914 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 800288e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002892:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f240 32e7 	movw	r2, #999	; 0x3e7
 800289c:	801a      	strh	r2, [r3, #0]
 800289e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80028a2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0202 	mvn.w	r2, #2
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24
 80028ae:	f003 b902 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80028b2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80028b6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80028c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80028c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80028d2:	4413      	add	r3, r2
 80028d4:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 80028d8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80028dc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 80028e6:	61da      	str	r2, [r3, #28]
 80028e8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80028ec:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	f003 b8dd 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xc8:  getDDItem2(CWP_ITEM_EXT, ext.length, uint16_t);             // ext 16
 80028fc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002900:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f44f 729b 	mov.w	r2, #310	; 0x136
 800290a:	801a      	strh	r2, [r3, #0]
 800290c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002910:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800291c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002920:	3302      	adds	r3, #2
 8002922:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8002926:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800292a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 8002936:	429a      	cmp	r2, r3
 8002938:	d96e      	bls.n	8002a18 <cw_unpack_next+0x1918>
 800293a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800293e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	2b00      	cmp	r3, #0
 8002948:	d111      	bne.n	800296e <cw_unpack_next+0x186e>
 800294a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800294e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002958:	801a      	strh	r2, [r3, #0]
 800295a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800295e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f06f 0202 	mvn.w	r2, #2
 8002968:	625a      	str	r2, [r3, #36]	; 0x24
 800296a:	f003 b8a4 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 800296e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002972:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800297e:	f5a2 749e 	sub.w	r4, r2, #316	; 0x13c
 8002982:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002986:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800298a:	2102      	movs	r1, #2
 800298c:	6810      	ldr	r0, [r2, #0]
 800298e:	4798      	blx	r3
 8002990:	6020      	str	r0, [r4, #0]
 8002992:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002996:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d02e      	beq.n	80029fe <cw_unpack_next+0x18fe>
 80029a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80029a4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ae:	d014      	beq.n	80029da <cw_unpack_next+0x18da>
 80029b0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80029b4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029be:	801a      	strh	r2, [r3, #0]
 80029c0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80029c4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80029ce:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24
 80029d6:	f003 b86e 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80029da:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80029de:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029e8:	801a      	strh	r2, [r3, #0]
 80029ea:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80029ee:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f06f 0202 	mvn.w	r2, #2
 80029f8:	625a      	str	r2, [r3, #36]	; 0x24
 80029fa:	f003 b85c 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80029fe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a02:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002a0e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002a12:	3302      	adds	r3, #2
 8002a14:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8002a18:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a1c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 8002a26:	61da      	str	r2, [r3, #28]
 8002a28:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 8002a32:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	b21a      	sxth	r2, r3
 8002a3a:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8002a3e:	0a1b      	lsrs	r3, r3, #8
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	b21b      	sxth	r3, r3
 8002a44:	4313      	orrs	r3, r2
 8002a46:	b21b      	sxth	r3, r3
 8002a48:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 8002a4c:	f8b7 22aa 	ldrh.w	r2, [r7, #682]	; 0x2aa
 8002a50:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a54:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_space(1);
 8002a5c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a60:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002a6c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002a70:	3301      	adds	r3, #1
 8002a72:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 8002a76:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a7a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d96e      	bls.n	8002b68 <cw_unpack_next+0x1a68>
 8002a8a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a8e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d111      	bne.n	8002abe <cw_unpack_next+0x19be>
 8002a9a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002a9e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002aa8:	801a      	strh	r2, [r3, #0]
 8002aaa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002aae:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0202 	mvn.w	r2, #2
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24
 8002aba:	f002 bffc 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8002abe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ac2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aca:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002ace:	f5a2 74a0 	sub.w	r4, r2, #320	; 0x140
 8002ad2:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002ad6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ada:	2101      	movs	r1, #1
 8002adc:	6810      	ldr	r0, [r2, #0]
 8002ade:	4798      	blx	r3
 8002ae0:	6020      	str	r0, [r4, #0]
 8002ae2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ae6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d02e      	beq.n	8002b4e <cw_unpack_next+0x1a4e>
 8002af0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002af4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afe:	d014      	beq.n	8002b2a <cw_unpack_next+0x1a2a>
 8002b00:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b04:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b0e:	801a      	strh	r2, [r3, #0]
 8002b10:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b14:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002b1e:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	625a      	str	r2, [r3, #36]	; 0x24
 8002b26:	f002 bfc6 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8002b2a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b2e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b38:	801a      	strh	r2, [r3, #0]
 8002b3a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b3e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0202 	mvn.w	r2, #2
 8002b48:	625a      	str	r2, [r3, #36]	; 0x24
 8002b4a:	f002 bfb4 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8002b4e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b52:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002b5e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002b62:	3301      	adds	r3, #1
 8002b64:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 8002b68:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b6c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 8002b76:	61da      	str	r2, [r3, #28]
                    unpack_context->item.type = (cwpack_item_types)*(int8_t*)p;
 8002b78:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002b7c:	f993 3000 	ldrsb.w	r3, [r3]
 8002b80:	b21a      	sxth	r2, r3
 8002b82:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b86:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	801a      	strh	r2, [r3, #0]
                    cw_unpack_assert_blob(ext);
 8002b8e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002b92:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002b9e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ba2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8002bae:	4413      	add	r3, r2
 8002bb0:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8002bb4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002bb8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d979      	bls.n	8002cbc <cw_unpack_next+0x1bbc>
 8002bc8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002bcc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d111      	bne.n	8002bfc <cw_unpack_next+0x1afc>
 8002bd8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002bdc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002be6:	801a      	strh	r2, [r3, #0]
 8002be8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002bec:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f06f 0202 	mvn.w	r2, #2
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24
 8002bf8:	f002 bf5d 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8002bfc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c00:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002c0c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	68d1      	ldr	r1, [r2, #12]
 8002c14:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002c18:	f5a2 74a2 	sub.w	r4, r2, #324	; 0x144
 8002c1c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002c20:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c24:	6810      	ldr	r0, [r2, #0]
 8002c26:	4798      	blx	r3
 8002c28:	6020      	str	r0, [r4, #0]
 8002c2a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c2e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d02e      	beq.n	8002c96 <cw_unpack_next+0x1b96>
 8002c38:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c3c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c46:	d014      	beq.n	8002c72 <cw_unpack_next+0x1b72>
 8002c48:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c4c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c56:	801a      	strh	r2, [r3, #0]
 8002c58:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c5c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002c66:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24
 8002c6e:	f002 bf22 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8002c72:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c76:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c80:	801a      	strh	r2, [r3, #0]
 8002c82:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c86:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0202 	mvn.w	r2, #2
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24
 8002c92:	f002 bf10 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8002c96:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002c9a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002ca6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002caa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8002cbc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002cc0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 8002cca:	61da      	str	r2, [r3, #28]
 8002ccc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002cd0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	f002 beeb 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xc9:  getDDItem4(CWP_ITEM_EXT, ext.length, uint32_t);             // ext 32
 8002ce0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ce4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f44f 729b 	mov.w	r2, #310	; 0x136
 8002cee:	801a      	strh	r2, [r3, #0]
 8002cf0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002cf4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002d00:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002d04:	3304      	adds	r3, #4
 8002d06:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 8002d0a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d0e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d96e      	bls.n	8002dfc <cw_unpack_next+0x1cfc>
 8002d1e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d22:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d111      	bne.n	8002d52 <cw_unpack_next+0x1c52>
 8002d2e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d32:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d3c:	801a      	strh	r2, [r3, #0]
 8002d3e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d42:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0202 	mvn.w	r2, #2
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24
 8002d4e:	f002 beb2 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8002d52:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d56:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002d62:	f5a2 7498 	sub.w	r4, r2, #304	; 0x130
 8002d66:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002d6a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d6e:	2104      	movs	r1, #4
 8002d70:	6810      	ldr	r0, [r2, #0]
 8002d72:	4798      	blx	r3
 8002d74:	6020      	str	r0, [r4, #0]
 8002d76:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d02e      	beq.n	8002de2 <cw_unpack_next+0x1ce2>
 8002d84:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d92:	d014      	beq.n	8002dbe <cw_unpack_next+0x1cbe>
 8002d94:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002d98:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002da2:	801a      	strh	r2, [r3, #0]
 8002da4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002da8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002db2:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24
 8002dba:	f002 be7c 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8002dbe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002dc2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002dcc:	801a      	strh	r2, [r3, #0]
 8002dce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002dd2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0202 	mvn.w	r2, #2
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24
 8002dde:	f002 be6a 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8002de2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002de6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002df2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002df6:	3304      	adds	r3, #4
 8002df8:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 8002dfc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e00:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8002e0a:	61da      	str	r2, [r3, #28]
 8002e0c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e16:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e20:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	061a      	lsls	r2, r3, #24
 8002e28:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e2c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e3e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e50:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	0e1b      	lsrs	r3, r3, #24
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e5e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e68:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e72:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_space(1);
 8002e7a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e7e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002e8a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8002e94:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e98:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d96e      	bls.n	8002f86 <cw_unpack_next+0x1e86>
 8002ea8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002eac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d111      	bne.n	8002edc <cw_unpack_next+0x1ddc>
 8002eb8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ebc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ec6:	801a      	strh	r2, [r3, #0]
 8002ec8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ecc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f06f 0202 	mvn.w	r2, #2
 8002ed6:	625a      	str	r2, [r3, #36]	; 0x24
 8002ed8:	f002 bded 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8002edc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ee0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002eec:	f5a2 749a 	sub.w	r4, r2, #308	; 0x134
 8002ef0:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002ef4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ef8:	2101      	movs	r1, #1
 8002efa:	6810      	ldr	r0, [r2, #0]
 8002efc:	4798      	blx	r3
 8002efe:	6020      	str	r0, [r4, #0]
 8002f00:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f04:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d02e      	beq.n	8002f6c <cw_unpack_next+0x1e6c>
 8002f0e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f12:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1c:	d014      	beq.n	8002f48 <cw_unpack_next+0x1e48>
 8002f1e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f22:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f2c:	801a      	strh	r2, [r3, #0]
 8002f2e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f32:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8002f3c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	625a      	str	r2, [r3, #36]	; 0x24
 8002f44:	f002 bdb7 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8002f48:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f4c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f56:	801a      	strh	r2, [r3, #0]
 8002f58:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f5c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f06f 0202 	mvn.w	r2, #2
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24
 8002f68:	f002 bda5 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8002f6c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f70:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002f7c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002f80:	3301      	adds	r3, #1
 8002f82:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8002f86:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002f8a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 8002f94:	61da      	str	r2, [r3, #28]
                    unpack_context->item.type = (cwpack_item_types)*(int8_t*)p;
 8002f96:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8002f9a:	f993 3000 	ldrsb.w	r3, [r3]
 8002f9e:	b21a      	sxth	r2, r3
 8002fa0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002fa4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	801a      	strh	r2, [r3, #0]
                    cw_unpack_assert_blob(ext);
 8002fac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002fb0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002fbc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002fc0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8002fcc:	4413      	add	r3, r2
 8002fce:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 8002fd2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002fd6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d979      	bls.n	80030da <cw_unpack_next+0x1fda>
 8002fe6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002fea:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d111      	bne.n	800301a <cw_unpack_next+0x1f1a>
 8002ff6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002ffa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003004:	801a      	strh	r2, [r3, #0]
 8003006:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800300a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0202 	mvn.w	r2, #2
 8003014:	625a      	str	r2, [r3, #36]	; 0x24
 8003016:	f002 bd4e 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 800301a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800301e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800302a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	68d1      	ldr	r1, [r2, #12]
 8003032:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003036:	f5a2 749c 	sub.w	r4, r2, #312	; 0x138
 800303a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800303e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003042:	6810      	ldr	r0, [r2, #0]
 8003044:	4798      	blx	r3
 8003046:	6020      	str	r0, [r4, #0]
 8003048:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800304c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d02e      	beq.n	80030b4 <cw_unpack_next+0x1fb4>
 8003056:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800305a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d014      	beq.n	8003090 <cw_unpack_next+0x1f90>
 8003066:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800306a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003074:	801a      	strh	r2, [r3, #0]
 8003076:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800307a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003084:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	625a      	str	r2, [r3, #36]	; 0x24
 800308c:	f002 bd13 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8003090:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003094:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800309e:	801a      	strh	r2, [r3, #0]
 80030a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80030a4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f06f 0202 	mvn.w	r2, #2
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24
 80030b0:	f002 bd01 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80030b4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80030b8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80030c4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80030c8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80030d4:	4413      	add	r3, r2
 80030d6:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 80030da:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80030de:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 80030e8:	61da      	str	r2, [r3, #28]
 80030ea:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80030ee:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80030f8:	609a      	str	r2, [r3, #8]
 80030fa:	f002 bcdc 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xca:  unpack_context->item.type = CWP_ITEM_FLOAT;                 // float
 80030fe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003102:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f44f 7298 	mov.w	r2, #304	; 0x130
 800310c:	801a      	strh	r2, [r3, #0]
                    cw_unpack_assert_space(4);
 800310e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003112:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800311e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003122:	3304      	adds	r3, #4
 8003124:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8003128:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800312c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8003138:	429a      	cmp	r2, r3
 800313a:	d96e      	bls.n	800321a <cw_unpack_next+0x211a>
 800313c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003140:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	2b00      	cmp	r3, #0
 800314a:	d111      	bne.n	8003170 <cw_unpack_next+0x2070>
 800314c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003150:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f240 32e7 	movw	r2, #999	; 0x3e7
 800315a:	801a      	strh	r2, [r3, #0]
 800315c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003160:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f06f 0202 	mvn.w	r2, #2
 800316a:	625a      	str	r2, [r3, #36]	; 0x24
 800316c:	f002 bca3 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8003170:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003174:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003180:	f5a2 7496 	sub.w	r4, r2, #300	; 0x12c
 8003184:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003188:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800318c:	2104      	movs	r1, #4
 800318e:	6810      	ldr	r0, [r2, #0]
 8003190:	4798      	blx	r3
 8003192:	6020      	str	r0, [r4, #0]
 8003194:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003198:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d02e      	beq.n	8003200 <cw_unpack_next+0x2100>
 80031a2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80031a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d014      	beq.n	80031dc <cw_unpack_next+0x20dc>
 80031b2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80031b6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031c0:	801a      	strh	r2, [r3, #0]
 80031c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80031c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80031d0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80031d4:	6812      	ldr	r2, [r2, #0]
 80031d6:	625a      	str	r2, [r3, #36]	; 0x24
 80031d8:	f002 bc6d 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80031dc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80031e0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031ea:	801a      	strh	r2, [r3, #0]
 80031ec:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80031f0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f06f 0202 	mvn.w	r2, #2
 80031fa:	625a      	str	r2, [r3, #36]	; 0x24
 80031fc:	f002 bc5b 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8003200:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003204:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003210:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003214:	3304      	adds	r3, #4
 8003216:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800321a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800321e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8003228:	61da      	str	r2, [r3, #28]
                    cw_load32(p);
 800322a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003234:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800323e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	061a      	lsls	r2, r3, #24
 8003246:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800324a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	021b      	lsls	r3, r3, #8
 8003252:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003256:	431a      	orrs	r2, r3
 8003258:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800325c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	0a1b      	lsrs	r3, r3, #8
 8003264:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003268:	431a      	orrs	r2, r3
 800326a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800326e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	0e1b      	lsrs	r3, r3, #24
 8003276:	431a      	orrs	r2, r3
 8003278:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800327c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003280:	601a      	str	r2, [r3, #0]
                    unpack_context->item.as.real = *(float*)&tmpu32;     return;
 8003282:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800328c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	609a      	str	r2, [r3, #8]
 8003294:	f002 bc0f 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xcb:  getDDItem8(CWP_ITEM_DOUBLE);                         return;  // double
 8003298:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800329c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	f240 1331 	movw	r3, #305	; 0x131
 80032a6:	8013      	strh	r3, [r2, #0]
 80032a8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80032ac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80032b8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80032bc:	3308      	adds	r3, #8
 80032be:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 80032c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80032c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6a1a      	ldr	r2, [r3, #32]
 80032ce:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d96e      	bls.n	80033b4 <cw_unpack_next+0x22b4>
 80032d6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80032da:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d111      	bne.n	800330a <cw_unpack_next+0x220a>
 80032e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80032ea:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032f4:	801a      	strh	r2, [r3, #0]
 80032f6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80032fa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0202 	mvn.w	r2, #2
 8003304:	625a      	str	r2, [r3, #36]	; 0x24
 8003306:	f002 bbd6 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 800330a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800330e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003316:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800331a:	f5a3 7494 	sub.w	r4, r3, #296	; 0x128
 800331e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003322:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003326:	2108      	movs	r1, #8
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	4790      	blx	r2
 800332c:	6020      	str	r0, [r4, #0]
 800332e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003332:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d02e      	beq.n	800339a <cw_unpack_next+0x229a>
 800333c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003340:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334a:	d014      	beq.n	8003376 <cw_unpack_next+0x2276>
 800334c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003350:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f240 32e7 	movw	r2, #999	; 0x3e7
 800335a:	801a      	strh	r2, [r3, #0]
 800335c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003360:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800336a:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	625a      	str	r2, [r3, #36]	; 0x24
 8003372:	f002 bba0 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8003376:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800337a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003384:	801a      	strh	r2, [r3, #0]
 8003386:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800338a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f06f 0202 	mvn.w	r2, #2
 8003394:	625a      	str	r2, [r3, #36]	; 0x24
 8003396:	f002 bb8e 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 800339a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800339e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80033aa:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80033ae:	3308      	adds	r3, #8
 80033b0:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 80033b4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80033b8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 80033c2:	61d3      	str	r3, [r2, #28]
 80033c4:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
 80033d0:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80033d4:	0a1a      	lsrs	r2, r3, #8
 80033d6:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80033da:	061b      	lsls	r3, r3, #24
 80033dc:	ea42 0603 	orr.w	r6, r2, r3
 80033e0:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80033e4:	0a1a      	lsrs	r2, r3, #8
 80033e6:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80033ea:	061b      	lsls	r3, r3, #24
 80033ec:	ea42 0503 	orr.w	r5, r2, r3
 80033f0:	f405 437f 	and.w	r3, r5, #65280	; 0xff00
 80033f4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80033f8:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
 80033fc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8003400:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8003404:	021a      	lsls	r2, r3, #8
 8003406:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800340a:	0e1b      	lsrs	r3, r3, #24
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003412:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8003416:	021a      	lsls	r2, r3, #8
 8003418:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800341c:	0e1b      	lsrs	r3, r3, #24
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8003424:	e9d7 1262 	ldrd	r1, r2, [r7, #392]	; 0x188
 8003428:	460b      	mov	r3, r1
 800342a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800342e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003432:	4613      	mov	r3, r2
 8003434:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003438:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800343c:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 8003440:	4623      	mov	r3, r4
 8003442:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8003446:	4602      	mov	r2, r0
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800344e:	462b      	mov	r3, r5
 8003450:	460a      	mov	r2, r1
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003458:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800345c:	f04f 0000 	mov.w	r0, #0
 8003460:	f04f 0100 	mov.w	r1, #0
 8003464:	0a10      	lsrs	r0, r2, #8
 8003466:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800346a:	0a19      	lsrs	r1, r3, #8
 800346c:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 8003470:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003474:	2300      	movs	r3, #0
 8003476:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800347a:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 800347e:	4623      	mov	r3, r4
 8003480:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8003484:	4602      	mov	r2, r0
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800348c:	462b      	mov	r3, r5
 800348e:	460a      	mov	r2, r1
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003496:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	020b      	lsls	r3, r1, #8
 80034a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80034a8:	0202      	lsls	r2, r0, #8
 80034aa:	2100      	movs	r1, #0
 80034ac:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 80034b0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80034b4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80034b8:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 80034bc:	4623      	mov	r3, r4
 80034be:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 80034c2:	4602      	mov	r2, r0
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80034ca:	462b      	mov	r3, r5
 80034cc:	460a      	mov	r2, r1
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80034d4:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	0e0a      	lsrs	r2, r1, #24
 80034e2:	2300      	movs	r3, #0
 80034e4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80034e8:	4621      	mov	r1, r4
 80034ea:	4311      	orrs	r1, r2
 80034ec:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 80034f0:	4629      	mov	r1, r5
 80034f2:	4319      	orrs	r1, r3
 80034f4:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 80034f8:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	0603      	lsls	r3, r0, #24
 8003506:	2200      	movs	r2, #0
 8003508:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800350c:	4621      	mov	r1, r4
 800350e:	4311      	orrs	r1, r2
 8003510:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8003514:	4629      	mov	r1, r5
 8003516:	4319      	orrs	r1, r3
 8003518:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800351c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003520:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	e9d7 1252 	ldrd	r1, r2, [r7, #328]	; 0x148
 800352a:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800352e:	f002 bac2 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xcc:  getDDItem1(CWP_ITEM_POSITIVE_INTEGER, u64, uint8_t); return;  // unsigned int  8
 8003532:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003536:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8003540:	801a      	strh	r2, [r3, #0]
 8003542:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003546:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003552:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003556:	3301      	adds	r3, #1
 8003558:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800355c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003560:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 800356c:	429a      	cmp	r2, r3
 800356e:	d96e      	bls.n	800364e <cw_unpack_next+0x254e>
 8003570:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003574:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d111      	bne.n	80035a4 <cw_unpack_next+0x24a4>
 8003580:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003584:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800358e:	801a      	strh	r2, [r3, #0]
 8003590:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003594:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f06f 0202 	mvn.w	r2, #2
 800359e:	625a      	str	r2, [r3, #36]	; 0x24
 80035a0:	f002 ba89 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80035a4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80035a8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80035b4:	f5a2 7492 	sub.w	r4, r2, #292	; 0x124
 80035b8:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80035bc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80035c0:	2101      	movs	r1, #1
 80035c2:	6810      	ldr	r0, [r2, #0]
 80035c4:	4798      	blx	r3
 80035c6:	6020      	str	r0, [r4, #0]
 80035c8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80035cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d02e      	beq.n	8003634 <cw_unpack_next+0x2534>
 80035d6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80035da:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e4:	d014      	beq.n	8003610 <cw_unpack_next+0x2510>
 80035e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80035ea:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035f4:	801a      	strh	r2, [r3, #0]
 80035f6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80035fa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003604:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8003608:	6812      	ldr	r2, [r2, #0]
 800360a:	625a      	str	r2, [r3, #36]	; 0x24
 800360c:	f002 ba53 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8003610:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003614:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800361e:	801a      	strh	r2, [r3, #0]
 8003620:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003624:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f06f 0202 	mvn.w	r2, #2
 800362e:	625a      	str	r2, [r3, #36]	; 0x24
 8003630:	f002 ba41 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8003634:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003638:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003644:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003648:	3301      	adds	r3, #1
 800364a:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800364e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003652:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 800365c:	61da      	str	r2, [r3, #28]
 800365e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2200      	movs	r2, #0
 8003668:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800366c:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8003670:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003674:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800367e:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8003682:	f002 ba18 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xcd:  getDDItem2(CWP_ITEM_POSITIVE_INTEGER, u64, uint16_t); return; // unsigned int 16
 8003686:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800368a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8003694:	801a      	strh	r2, [r3, #0]
 8003696:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800369a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80036a6:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80036aa:	3302      	adds	r3, #2
 80036ac:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80036b0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80036b4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d96e      	bls.n	80037a2 <cw_unpack_next+0x26a2>
 80036c4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80036c8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d111      	bne.n	80036f8 <cw_unpack_next+0x25f8>
 80036d4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80036d8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036e2:	801a      	strh	r2, [r3, #0]
 80036e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80036e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f06f 0202 	mvn.w	r2, #2
 80036f2:	625a      	str	r2, [r3, #36]	; 0x24
 80036f4:	f002 b9df 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80036f8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80036fc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003708:	f5a2 7490 	sub.w	r4, r2, #288	; 0x120
 800370c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003710:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003714:	2102      	movs	r1, #2
 8003716:	6810      	ldr	r0, [r2, #0]
 8003718:	4798      	blx	r3
 800371a:	6020      	str	r0, [r4, #0]
 800371c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003720:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d02e      	beq.n	8003788 <cw_unpack_next+0x2688>
 800372a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800372e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003738:	d014      	beq.n	8003764 <cw_unpack_next+0x2664>
 800373a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800373e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003748:	801a      	strh	r2, [r3, #0]
 800374a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800374e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003758:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	625a      	str	r2, [r3, #36]	; 0x24
 8003760:	f002 b9a9 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8003764:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003768:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003772:	801a      	strh	r2, [r3, #0]
 8003774:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003778:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f06f 0202 	mvn.w	r2, #2
 8003782:	625a      	str	r2, [r3, #36]	; 0x24
 8003784:	f002 b997 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8003788:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800378c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003798:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800379c:	3302      	adds	r3, #2
 800379e:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80037a2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80037a6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 80037b0:	61da      	str	r2, [r3, #28]
 80037b2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 80037bc:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	b21a      	sxth	r2, r3
 80037c4:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80037c8:	0a1b      	lsrs	r3, r3, #8
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	b21b      	sxth	r3, r3
 80037ce:	4313      	orrs	r3, r2
 80037d0:	b21b      	sxth	r3, r3
 80037d2:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 80037d6:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80037da:	2200      	movs	r2, #0
 80037dc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80037e0:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80037e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80037e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 80037f2:	e9c3 1202 	strd	r1, r2, [r3, #8]
 80037f6:	f002 b95e 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xce:  getDDItem4(CWP_ITEM_POSITIVE_INTEGER, u64, uint32_t); return; // unsigned int 32
 80037fa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80037fe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8003808:	801a      	strh	r2, [r3, #0]
 800380a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800380e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800381a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800381e:	3304      	adds	r3, #4
 8003820:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8003824:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003828:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8003834:	429a      	cmp	r2, r3
 8003836:	d96e      	bls.n	8003916 <cw_unpack_next+0x2816>
 8003838:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800383c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	2b00      	cmp	r3, #0
 8003846:	d111      	bne.n	800386c <cw_unpack_next+0x276c>
 8003848:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800384c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003856:	801a      	strh	r2, [r3, #0]
 8003858:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800385c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f06f 0202 	mvn.w	r2, #2
 8003866:	625a      	str	r2, [r3, #36]	; 0x24
 8003868:	f002 b925 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 800386c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003870:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800387c:	f5a2 748e 	sub.w	r4, r2, #284	; 0x11c
 8003880:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003884:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003888:	2104      	movs	r1, #4
 800388a:	6810      	ldr	r0, [r2, #0]
 800388c:	4798      	blx	r3
 800388e:	6020      	str	r0, [r4, #0]
 8003890:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003894:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d02e      	beq.n	80038fc <cw_unpack_next+0x27fc>
 800389e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80038a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d014      	beq.n	80038d8 <cw_unpack_next+0x27d8>
 80038ae:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80038b2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038bc:	801a      	strh	r2, [r3, #0]
 80038be:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80038c2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80038cc:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 80038d0:	6812      	ldr	r2, [r2, #0]
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24
 80038d4:	f002 b8ef 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80038d8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80038dc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038e6:	801a      	strh	r2, [r3, #0]
 80038e8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80038ec:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f06f 0202 	mvn.w	r2, #2
 80038f6:	625a      	str	r2, [r3, #36]	; 0x24
 80038f8:	f002 b8dd 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80038fc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003900:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800390c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003910:	3304      	adds	r3, #4
 8003912:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8003916:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800391a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8003924:	61da      	str	r2, [r3, #28]
 8003926:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003930:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800393a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	061a      	lsls	r2, r3, #24
 8003942:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003946:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	021b      	lsls	r3, r3, #8
 800394e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003952:	431a      	orrs	r2, r3
 8003954:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003958:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003964:	431a      	orrs	r2, r3
 8003966:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800396a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	0e1b      	lsrs	r3, r3, #24
 8003972:	431a      	orrs	r2, r3
 8003974:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003978:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003982:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2200      	movs	r2, #0
 800398a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800398e:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8003992:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003996:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 80039a0:	e9c3 1202 	strd	r1, r2, [r3, #8]
 80039a4:	f002 b887 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xcf:  getDDItem8(CWP_ITEM_POSITIVE_INTEGER);               return;  // unsigned int 64
 80039a8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80039ac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	f44f 7397 	mov.w	r3, #302	; 0x12e
 80039b6:	8013      	strh	r3, [r2, #0]
 80039b8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80039bc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80039c8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80039cc:	3308      	adds	r3, #8
 80039ce:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80039d2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80039d6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6a1a      	ldr	r2, [r3, #32]
 80039de:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d96e      	bls.n	8003ac4 <cw_unpack_next+0x29c4>
 80039e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80039ea:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d111      	bne.n	8003a1a <cw_unpack_next+0x291a>
 80039f6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80039fa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a04:	801a      	strh	r2, [r3, #0]
 8003a06:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a0a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0202 	mvn.w	r2, #2
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24
 8003a16:	f002 b84e 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8003a1a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a1e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a26:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a2a:	f5a3 748c 	sub.w	r4, r3, #280	; 0x118
 8003a2e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a32:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003a36:	2108      	movs	r1, #8
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	4790      	blx	r2
 8003a3c:	6020      	str	r0, [r4, #0]
 8003a3e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a42:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d02e      	beq.n	8003aaa <cw_unpack_next+0x29aa>
 8003a4c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a50:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5a:	d014      	beq.n	8003a86 <cw_unpack_next+0x2986>
 8003a5c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a60:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a6a:	801a      	strh	r2, [r3, #0]
 8003a6c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a70:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003a7a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24
 8003a82:	f002 b818 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8003a86:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a8a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a94:	801a      	strh	r2, [r3, #0]
 8003a96:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003a9a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f06f 0202 	mvn.w	r2, #2
 8003aa4:	625a      	str	r2, [r3, #36]	; 0x24
 8003aa6:	f002 b806 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8003aaa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003aae:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003aba:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003abe:	3308      	adds	r3, #8
 8003ac0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8003ac4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003ac8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8003ad2:	61d3      	str	r3, [r2, #28]
 8003ad4:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003adc:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
 8003ae0:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8003ae4:	0a1a      	lsrs	r2, r3, #8
 8003ae6:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8003aea:	061b      	lsls	r3, r3, #24
 8003aec:	ea42 0b03 	orr.w	fp, r2, r3
 8003af0:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8003af4:	0a1a      	lsrs	r2, r3, #8
 8003af6:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8003afa:	061b      	lsls	r3, r3, #24
 8003afc:	ea42 0a03 	orr.w	sl, r2, r3
 8003b00:	f40a 437f 	and.w	r3, sl, #65280	; 0xff00
 8003b04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003b08:	f40b 437f 	and.w	r3, fp, #65280	; 0xff00
 8003b0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003b10:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8003b14:	021a      	lsls	r2, r3, #8
 8003b16:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8003b1a:	0e1b      	lsrs	r3, r3, #24
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003b22:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8003b26:	021a      	lsls	r2, r3, #8
 8003b28:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8003b2c:	0e1b      	lsrs	r3, r3, #24
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003b34:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8003b38:	460b      	mov	r3, r1
 8003b3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b3e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003b42:	4613      	mov	r3, r2
 8003b44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003b4c:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003b50:	4623      	mov	r3, r4
 8003b52:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8003b56:	4602      	mov	r2, r0
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003b5e:	462b      	mov	r3, r5
 8003b60:	460a      	mov	r2, r1
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003b68:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8003b6c:	f04f 0000 	mov.w	r0, #0
 8003b70:	f04f 0100 	mov.w	r1, #0
 8003b74:	0a10      	lsrs	r0, r2, #8
 8003b76:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003b7a:	0a19      	lsrs	r1, r3, #8
 8003b7c:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 8003b80:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003b84:	2300      	movs	r3, #0
 8003b86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003b8a:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8003b8e:	4623      	mov	r3, r4
 8003b90:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8003b94:	4602      	mov	r2, r0
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b9c:	462b      	mov	r3, r5
 8003b9e:	460a      	mov	r2, r1
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ba6:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	020b      	lsls	r3, r1, #8
 8003bb4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003bb8:	0202      	lsls	r2, r0, #8
 8003bba:	2100      	movs	r1, #0
 8003bbc:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8003bc0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8003bc4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003bc8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8003bcc:	4623      	mov	r3, r4
 8003bce:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003bda:	462b      	mov	r3, r5
 8003bdc:	460a      	mov	r2, r1
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003be4:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	0e0a      	lsrs	r2, r1, #24
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	4311      	orrs	r1, r2
 8003bfc:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8003c00:	4629      	mov	r1, r5
 8003c02:	4319      	orrs	r1, r3
 8003c04:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8003c08:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	0603      	lsls	r3, r0, #24
 8003c16:	2200      	movs	r2, #0
 8003c18:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	4311      	orrs	r1, r2
 8003c20:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8003c24:	4629      	mov	r1, r5
 8003c26:	4319      	orrs	r1, r3
 8003c28:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8003c2c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c30:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003c3a:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8003c3e:	f001 bf3a 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xd0:  getDDItem1(CWP_ITEM_NEGATIVE_INTEGER, i64, int8_t);          // signed int  8
 8003c42:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c46:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f240 122f 	movw	r2, #303	; 0x12f
 8003c50:	801a      	strh	r2, [r3, #0]
 8003c52:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c56:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003c62:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003c66:	3301      	adds	r3, #1
 8003c68:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8003c6c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c70:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d96e      	bls.n	8003d5e <cw_unpack_next+0x2c5e>
 8003c80:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c84:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d111      	bne.n	8003cb4 <cw_unpack_next+0x2bb4>
 8003c90:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003c94:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c9e:	801a      	strh	r2, [r3, #0]
 8003ca0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003ca4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f06f 0202 	mvn.w	r2, #2
 8003cae:	625a      	str	r2, [r3, #36]	; 0x24
 8003cb0:	f001 bf01 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8003cb4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003cb8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003cc4:	f5a2 748a 	sub.w	r4, r2, #276	; 0x114
 8003cc8:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003ccc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	6810      	ldr	r0, [r2, #0]
 8003cd4:	4798      	blx	r3
 8003cd6:	6020      	str	r0, [r4, #0]
 8003cd8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003cdc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d02e      	beq.n	8003d44 <cw_unpack_next+0x2c44>
 8003ce6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003cea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf4:	d014      	beq.n	8003d20 <cw_unpack_next+0x2c20>
 8003cf6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003cfa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d04:	801a      	strh	r2, [r3, #0]
 8003d06:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d0a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003d14:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24
 8003d1c:	f001 becb 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8003d20:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d24:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d2e:	801a      	strh	r2, [r3, #0]
 8003d30:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d34:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f06f 0202 	mvn.w	r2, #2
 8003d3e:	625a      	str	r2, [r3, #36]	; 0x24
 8003d40:	f001 beb9 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8003d44:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d48:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003d54:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003d58:	3301      	adds	r3, #1
 8003d5a:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8003d5e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d62:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8003d6c:	61da      	str	r2, [r3, #28]
 8003d6e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	b25b      	sxtb	r3, r3
 8003d76:	b25b      	sxtb	r3, r3
 8003d78:	17da      	asrs	r2, r3, #31
 8003d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d82:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d86:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d90:	e9c3 1202 	strd	r1, r2, [r3, #8]
                    if (unpack_context->item.as.i64 >= 0)
 8003d94:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003d98:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f2c1 8680 	blt.w	8005aa8 <cw_unpack_next+0x49a8>
                        unpack_context->item.type = CWP_ITEM_POSITIVE_INTEGER;
 8003da8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003dac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8003db6:	801a      	strh	r2, [r3, #0]
                    return;
 8003db8:	f001 be76 	b.w	8005aa8 <cw_unpack_next+0x49a8>
        case 0xd1:  getDDItem2(CWP_ITEM_NEGATIVE_INTEGER, i64, int16_t);        // signed int 16
 8003dbc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003dc0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f240 122f 	movw	r2, #303	; 0x12f
 8003dca:	801a      	strh	r2, [r3, #0]
 8003dcc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003dd0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003ddc:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003de0:	3302      	adds	r3, #2
 8003de2:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8003de6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003dea:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	f8d7 2368 	ldr.w	r2, [r7, #872]	; 0x368
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d96e      	bls.n	8003ed8 <cw_unpack_next+0x2dd8>
 8003dfa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003dfe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d111      	bne.n	8003e2e <cw_unpack_next+0x2d2e>
 8003e0a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003e0e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e18:	801a      	strh	r2, [r3, #0]
 8003e1a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003e1e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0202 	mvn.w	r2, #2
 8003e28:	625a      	str	r2, [r3, #36]	; 0x24
 8003e2a:	f001 be44 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8003e2e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003e32:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003e3e:	f5a2 7488 	sub.w	r4, r2, #272	; 0x110
 8003e42:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003e46:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e4a:	2102      	movs	r1, #2
 8003e4c:	6810      	ldr	r0, [r2, #0]
 8003e4e:	4798      	blx	r3
 8003e50:	6020      	str	r0, [r4, #0]
 8003e52:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003e56:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d02e      	beq.n	8003ebe <cw_unpack_next+0x2dbe>
 8003e60:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003e64:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6e:	d014      	beq.n	8003e9a <cw_unpack_next+0x2d9a>
 8003e70:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003e74:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e7e:	801a      	strh	r2, [r3, #0]
 8003e80:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003e84:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003e8e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24
 8003e96:	f001 be0e 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8003e9a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003e9e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ea8:	801a      	strh	r2, [r3, #0]
 8003eaa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003eae:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0202 	mvn.w	r2, #2
 8003eb8:	625a      	str	r2, [r3, #36]	; 0x24
 8003eba:	f001 bdfc 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8003ebe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003ec2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003ece:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003ed2:	3302      	adds	r3, #2
 8003ed4:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8003ed8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003edc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f8d7 2368 	ldr.w	r2, [r7, #872]	; 0x368
 8003ee6:	61da      	str	r2, [r3, #28]
 8003ee8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 8003ef2:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8003ef6:	021b      	lsls	r3, r3, #8
 8003ef8:	b21a      	sxth	r2, r3
 8003efa:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 8003efe:	0a1b      	lsrs	r3, r3, #8
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	b21b      	sxth	r3, r3
 8003f04:	4313      	orrs	r3, r2
 8003f06:	b21b      	sxth	r3, r3
 8003f08:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 8003f0c:	f9b7 32aa 	ldrsh.w	r3, [r7, #682]	; 0x2aa
 8003f10:	b21b      	sxth	r3, r3
 8003f12:	17da      	asrs	r2, r3, #31
 8003f14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f1c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f20:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003f2a:	e9c3 1202 	strd	r1, r2, [r3, #8]
                    if (unpack_context->item.as.i64 >= 0)
 8003f2e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f32:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f2c1 85b5 	blt.w	8005aac <cw_unpack_next+0x49ac>
                        unpack_context->item.type = CWP_ITEM_POSITIVE_INTEGER;
 8003f42:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f46:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8003f50:	801a      	strh	r2, [r3, #0]
                    return;
 8003f52:	f001 bdab 	b.w	8005aac <cw_unpack_next+0x49ac>
        case 0xd2:  getDDItem4(CWP_ITEM_NEGATIVE_INTEGER, i64, int32_t);        // signed int 32
 8003f56:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f5a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f240 122f 	movw	r2, #303	; 0x12f
 8003f64:	801a      	strh	r2, [r3, #0]
 8003f66:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f6a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003f76:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8003f80:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f84:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d96e      	bls.n	8004072 <cw_unpack_next+0x2f72>
 8003f94:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003f98:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d111      	bne.n	8003fc8 <cw_unpack_next+0x2ec8>
 8003fa4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003fa8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003fb2:	801a      	strh	r2, [r3, #0]
 8003fb4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003fb8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f06f 0202 	mvn.w	r2, #2
 8003fc2:	625a      	str	r2, [r3, #36]	; 0x24
 8003fc4:	f001 bd77 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8003fc8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003fcc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003fd8:	f5a2 7486 	sub.w	r4, r2, #268	; 0x10c
 8003fdc:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8003fe0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003fe4:	2104      	movs	r1, #4
 8003fe6:	6810      	ldr	r0, [r2, #0]
 8003fe8:	4798      	blx	r3
 8003fea:	6020      	str	r0, [r4, #0]
 8003fec:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003ff0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d02e      	beq.n	8004058 <cw_unpack_next+0x2f58>
 8003ffa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8003ffe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d014      	beq.n	8004034 <cw_unpack_next+0x2f34>
 800400a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800400e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004018:	801a      	strh	r2, [r3, #0]
 800401a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800401e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004028:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	625a      	str	r2, [r3, #36]	; 0x24
 8004030:	f001 bd41 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8004034:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004038:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004042:	801a      	strh	r2, [r3, #0]
 8004044:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004048:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f06f 0202 	mvn.w	r2, #2
 8004052:	625a      	str	r2, [r3, #36]	; 0x24
 8004054:	f001 bd2f 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8004058:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800405c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004068:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800406c:	3304      	adds	r3, #4
 800406e:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8004072:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004076:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8004080:	61da      	str	r2, [r3, #28]
 8004082:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800408c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004096:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	061a      	lsls	r2, r3, #24
 800409e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80040a2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040ae:	431a      	orrs	r2, r3
 80040b0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80040b4:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	0a1b      	lsrs	r3, r3, #8
 80040bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80040c0:	431a      	orrs	r2, r3
 80040c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80040c6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	0e1b      	lsrs	r3, r3, #24
 80040ce:	431a      	orrs	r2, r3
 80040d0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80040d4:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80040de:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	17da      	asrs	r2, r3, #31
 80040e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040ea:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80040ee:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80040f2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80040fc:	e9c3 1202 	strd	r1, r2, [r3, #8]
                    if (unpack_context->item.as.i64 >= 0)
 8004100:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004104:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	f2c1 84ce 	blt.w	8005ab0 <cw_unpack_next+0x49b0>
                        unpack_context->item.type = CWP_ITEM_POSITIVE_INTEGER;
 8004114:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004118:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8004122:	801a      	strh	r2, [r3, #0]
                    return;
 8004124:	f001 bcc4 	b.w	8005ab0 <cw_unpack_next+0x49b0>
        case 0xd3:  getDDItem8(CWP_ITEM_NEGATIVE_INTEGER);                      // signed int 64
 8004128:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800412c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	f240 132f 	movw	r3, #303	; 0x12f
 8004136:	8013      	strh	r3, [r2, #0]
 8004138:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800413c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004148:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800414c:	3308      	adds	r3, #8
 800414e:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8004152:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004156:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6a1a      	ldr	r2, [r3, #32]
 800415e:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8004162:	4293      	cmp	r3, r2
 8004164:	d96e      	bls.n	8004244 <cw_unpack_next+0x3144>
 8004166:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800416a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	2b00      	cmp	r3, #0
 8004174:	d111      	bne.n	800419a <cw_unpack_next+0x309a>
 8004176:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800417a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004184:	801a      	strh	r2, [r3, #0]
 8004186:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800418a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0202 	mvn.w	r2, #2
 8004194:	625a      	str	r2, [r3, #36]	; 0x24
 8004196:	f001 bc8e 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 800419a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800419e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80041aa:	f5a3 7484 	sub.w	r4, r3, #264	; 0x108
 80041ae:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80041b2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80041b6:	2108      	movs	r1, #8
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	4790      	blx	r2
 80041bc:	6020      	str	r0, [r4, #0]
 80041be:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80041c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d02e      	beq.n	800422a <cw_unpack_next+0x312a>
 80041cc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80041d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041da:	d014      	beq.n	8004206 <cw_unpack_next+0x3106>
 80041dc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80041e0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80041ea:	801a      	strh	r2, [r3, #0]
 80041ec:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80041f0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80041fa:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80041fe:	6812      	ldr	r2, [r2, #0]
 8004200:	625a      	str	r2, [r3, #36]	; 0x24
 8004202:	f001 bc58 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8004206:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800420a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004214:	801a      	strh	r2, [r3, #0]
 8004216:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800421a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0202 	mvn.w	r2, #2
 8004224:	625a      	str	r2, [r3, #36]	; 0x24
 8004226:	f001 bc46 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 800422a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800422e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800423a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800423e:	3308      	adds	r3, #8
 8004240:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8004244:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004248:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8004252:	61d3      	str	r3, [r2, #28]
 8004254:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425c:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
 8004260:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8004264:	0a1a      	lsrs	r2, r3, #8
 8004266:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800426a:	061b      	lsls	r3, r3, #24
 800426c:	ea42 0903 	orr.w	r9, r2, r3
 8004270:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8004274:	0a1a      	lsrs	r2, r3, #8
 8004276:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800427a:	061b      	lsls	r3, r3, #24
 800427c:	ea42 0803 	orr.w	r8, r2, r3
 8004280:	f408 437f 	and.w	r3, r8, #65280	; 0xff00
 8004284:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004288:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 800428c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004290:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8004294:	021a      	lsls	r2, r3, #8
 8004296:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800429a:	0e1b      	lsrs	r3, r3, #24
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042a2:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80042a6:	021a      	lsls	r2, r3, #8
 80042a8:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80042ac:	0e1b      	lsrs	r3, r3, #24
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80042b4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80042b8:	460b      	mov	r3, r1
 80042ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042c2:	4613      	mov	r3, r2
 80042c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042cc:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80042d0:	4623      	mov	r3, r4
 80042d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042d6:	4602      	mov	r2, r0
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042de:	462b      	mov	r3, r5
 80042e0:	460a      	mov	r2, r1
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042e8:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80042ec:	f04f 0000 	mov.w	r0, #0
 80042f0:	f04f 0100 	mov.w	r1, #0
 80042f4:	0a10      	lsrs	r0, r2, #8
 80042f6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80042fa:	0a19      	lsrs	r1, r3, #8
 80042fc:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 8004300:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004304:	2300      	movs	r3, #0
 8004306:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800430a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800430e:	4623      	mov	r3, r4
 8004310:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004314:	4602      	mov	r2, r0
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800431c:	462b      	mov	r3, r5
 800431e:	460a      	mov	r2, r1
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004326:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	020b      	lsls	r3, r1, #8
 8004334:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004338:	0202      	lsls	r2, r0, #8
 800433a:	2100      	movs	r1, #0
 800433c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8004340:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8004344:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004348:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800434c:	4623      	mov	r3, r4
 800434e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004352:	4602      	mov	r2, r0
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800435a:	462b      	mov	r3, r5
 800435c:	460a      	mov	r2, r1
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004364:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	0e0a      	lsrs	r2, r1, #24
 8004372:	2300      	movs	r3, #0
 8004374:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8004378:	4621      	mov	r1, r4
 800437a:	4311      	orrs	r1, r2
 800437c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004380:	4629      	mov	r1, r5
 8004382:	4319      	orrs	r1, r3
 8004384:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8004388:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	0603      	lsls	r3, r0, #24
 8004396:	2200      	movs	r2, #0
 8004398:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800439c:	4621      	mov	r1, r4
 800439e:	4311      	orrs	r1, r2
 80043a0:	67b9      	str	r1, [r7, #120]	; 0x78
 80043a2:	4629      	mov	r1, r5
 80043a4:	4319      	orrs	r1, r3
 80043a6:	67f9      	str	r1, [r7, #124]	; 0x7c
 80043a8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80043ac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80043b6:	e9c3 1202 	strd	r1, r2, [r3, #8]
                    if (unpack_context->item.as.i64 >= 0)
 80043ba:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80043be:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f2c1 8373 	blt.w	8005ab4 <cw_unpack_next+0x49b4>
                        unpack_context->item.type = CWP_ITEM_POSITIVE_INTEGER;
 80043ce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80043d2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80043dc:	801a      	strh	r2, [r3, #0]
                    return;
 80043de:	f001 bb69 	b.w	8005ab4 <cw_unpack_next+0x49b4>
        case 0xd4:  getDDItemFix(1);                                            // fixext 1
 80043e2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80043e6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80043f2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80043f6:	3302      	adds	r3, #2
 80043f8:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 80043fc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004400:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 800440c:	429a      	cmp	r2, r3
 800440e:	d96e      	bls.n	80044ee <cw_unpack_next+0x33ee>
 8004410:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004414:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	2b00      	cmp	r3, #0
 800441e:	d111      	bne.n	8004444 <cw_unpack_next+0x3344>
 8004420:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004424:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800442e:	801a      	strh	r2, [r3, #0]
 8004430:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004434:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f06f 0202 	mvn.w	r2, #2
 800443e:	625a      	str	r2, [r3, #36]	; 0x24
 8004440:	f001 bb39 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8004444:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004448:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004454:	f5a2 7482 	sub.w	r4, r2, #260	; 0x104
 8004458:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800445c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004460:	2102      	movs	r1, #2
 8004462:	6810      	ldr	r0, [r2, #0]
 8004464:	4798      	blx	r3
 8004466:	6020      	str	r0, [r4, #0]
 8004468:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800446c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d02e      	beq.n	80044d4 <cw_unpack_next+0x33d4>
 8004476:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800447a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004484:	d014      	beq.n	80044b0 <cw_unpack_next+0x33b0>
 8004486:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800448a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004494:	801a      	strh	r2, [r3, #0]
 8004496:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800449a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80044a4:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24
 80044ac:	f001 bb03 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80044b0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80044b4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80044be:	801a      	strh	r2, [r3, #0]
 80044c0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80044c4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f06f 0202 	mvn.w	r2, #2
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24
 80044d0:	f001 baf1 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80044d4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80044d8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80044e4:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80044e8:	3302      	adds	r3, #2
 80044ea:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 80044ee:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80044f2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 80044fc:	61da      	str	r2, [r3, #28]
 80044fe:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 8004508:	f993 3000 	ldrsb.w	r3, [r3]
 800450c:	b21a      	sxth	r2, r3
 800450e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004512:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	801a      	strh	r2, [r3, #0]
 800451a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800451e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452c:	d111      	bne.n	8004552 <cw_unpack_next+0x3452>
 800452e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004532:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f240 32e7 	movw	r2, #999	; 0x3e7
 800453c:	801a      	strh	r2, [r3, #0]
 800453e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004542:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 020b 	mvn.w	r2, #11
 800454c:	625a      	str	r2, [r3, #36]	; 0x24
 800454e:	f001 bab2 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8004552:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004556:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2201      	movs	r2, #1
 800455e:	60da      	str	r2, [r3, #12]
 8004560:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004564:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 800456e:	609a      	str	r2, [r3, #8]
 8004570:	f001 baa1 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xd5:  getDDItemFix(2);                                            // fixext 2
 8004574:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004578:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004584:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004588:	3303      	adds	r3, #3
 800458a:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 800458e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004592:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 800459e:	429a      	cmp	r2, r3
 80045a0:	d96e      	bls.n	8004680 <cw_unpack_next+0x3580>
 80045a2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80045a6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d111      	bne.n	80045d6 <cw_unpack_next+0x34d6>
 80045b2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80045b6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80045c0:	801a      	strh	r2, [r3, #0]
 80045c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80045c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f06f 0202 	mvn.w	r2, #2
 80045d0:	625a      	str	r2, [r3, #36]	; 0x24
 80045d2:	f001 ba70 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80045d6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80045da:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80045e6:	f5a2 7480 	sub.w	r4, r2, #256	; 0x100
 80045ea:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80045ee:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80045f2:	2103      	movs	r1, #3
 80045f4:	6810      	ldr	r0, [r2, #0]
 80045f6:	4798      	blx	r3
 80045f8:	6020      	str	r0, [r4, #0]
 80045fa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80045fe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d02e      	beq.n	8004666 <cw_unpack_next+0x3566>
 8004608:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800460c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004616:	d014      	beq.n	8004642 <cw_unpack_next+0x3542>
 8004618:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800461c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004626:	801a      	strh	r2, [r3, #0]
 8004628:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800462c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004636:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800463a:	6812      	ldr	r2, [r2, #0]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24
 800463e:	f001 ba3a 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8004642:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004646:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004650:	801a      	strh	r2, [r3, #0]
 8004652:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004656:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0202 	mvn.w	r2, #2
 8004660:	625a      	str	r2, [r3, #36]	; 0x24
 8004662:	f001 ba28 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8004666:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800466a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004676:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800467a:	3303      	adds	r3, #3
 800467c:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8004680:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004684:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 800468e:	61da      	str	r2, [r3, #28]
 8004690:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 800469a:	f993 3000 	ldrsb.w	r3, [r3]
 800469e:	b21a      	sxth	r2, r3
 80046a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80046a4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	801a      	strh	r2, [r3, #0]
 80046ac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80046b0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046be:	d111      	bne.n	80046e4 <cw_unpack_next+0x35e4>
 80046c0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80046c4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80046ce:	801a      	strh	r2, [r3, #0]
 80046d0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80046d4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f06f 020b 	mvn.w	r2, #11
 80046de:	625a      	str	r2, [r3, #36]	; 0x24
 80046e0:	f001 b9e9 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80046e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80046e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2202      	movs	r2, #2
 80046f0:	60da      	str	r2, [r3, #12]
 80046f2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80046f6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8004700:	609a      	str	r2, [r3, #8]
 8004702:	f001 b9d8 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xd6:  getDDItemFix(4);                                            // fixext 4
 8004706:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800470a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004716:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800471a:	3305      	adds	r3, #5
 800471c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004720:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004724:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8004730:	429a      	cmp	r2, r3
 8004732:	d962      	bls.n	80047fa <cw_unpack_next+0x36fa>
 8004734:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004738:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	2b00      	cmp	r3, #0
 8004742:	d111      	bne.n	8004768 <cw_unpack_next+0x3668>
 8004744:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004748:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004752:	801a      	strh	r2, [r3, #0]
 8004754:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004758:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f06f 0202 	mvn.w	r2, #2
 8004762:	625a      	str	r2, [r3, #36]	; 0x24
 8004764:	f001 b9a7 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8004768:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800476c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004778:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800477c:	2105      	movs	r1, #5
 800477e:	6810      	ldr	r0, [r2, #0]
 8004780:	4798      	blx	r3
 8004782:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274
 8004786:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800478a:	2b00      	cmp	r3, #0
 800478c:	d028      	beq.n	80047e0 <cw_unpack_next+0x36e0>
 800478e:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8004792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004796:	d011      	beq.n	80047bc <cw_unpack_next+0x36bc>
 8004798:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800479c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80047a6:	801a      	strh	r2, [r3, #0]
 80047a8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80047ac:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80047b6:	625a      	str	r2, [r3, #36]	; 0x24
 80047b8:	f001 b97d 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80047bc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80047c0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80047ca:	801a      	strh	r2, [r3, #0]
 80047cc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80047d0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f06f 0202 	mvn.w	r2, #2
 80047da:	625a      	str	r2, [r3, #36]	; 0x24
 80047dc:	f001 b96b 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80047e0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80047e4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80047f0:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80047f4:	3305      	adds	r3, #5
 80047f6:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80047fa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80047fe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8004808:	61da      	str	r2, [r3, #28]
 800480a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 8004814:	f993 3000 	ldrsb.w	r3, [r3]
 8004818:	b21a      	sxth	r2, r3
 800481a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800481e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	801a      	strh	r2, [r3, #0]
 8004826:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800482a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004838:	d145      	bne.n	80048c6 <cw_unpack_next+0x37c6>
 800483a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004844:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800484e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	061a      	lsls	r2, r3, #24
 8004856:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800485a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	021b      	lsls	r3, r3, #8
 8004862:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004866:	431a      	orrs	r2, r3
 8004868:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800486c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	0a1b      	lsrs	r3, r3, #8
 8004874:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004878:	431a      	orrs	r2, r3
 800487a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800487e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	0e1b      	lsrs	r3, r3, #24
 8004886:	431a      	orrs	r2, r3
 8004888:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800488c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004896:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	17da      	asrs	r2, r3, #31
 800489e:	673b      	str	r3, [r7, #112]	; 0x70
 80048a0:	677a      	str	r2, [r7, #116]	; 0x74
 80048a2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80048a6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80048b0:	e9c3 1202 	strd	r1, r2, [r3, #8]
 80048b4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80048b8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2200      	movs	r2, #0
 80048c0:	611a      	str	r2, [r3, #16]
 80048c2:	f001 b8f8 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80048c6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80048ca:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2204      	movs	r2, #4
 80048d2:	60da      	str	r2, [r3, #12]
 80048d4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80048d8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80048e2:	609a      	str	r2, [r3, #8]
 80048e4:	f001 b8e7 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xd7:  getDDItemFix(8);                                            // fixext 8
 80048e8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80048ec:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80048f8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80048fc:	3309      	adds	r3, #9
 80048fe:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004902:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004906:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6a1a      	ldr	r2, [r3, #32]
 800490e:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004912:	4293      	cmp	r3, r2
 8004914:	d962      	bls.n	80049dc <cw_unpack_next+0x38dc>
 8004916:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800491a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d111      	bne.n	800494a <cw_unpack_next+0x384a>
 8004926:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800492a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004934:	801a      	strh	r2, [r3, #0]
 8004936:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800493a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0202 	mvn.w	r2, #2
 8004944:	625a      	str	r2, [r3, #36]	; 0x24
 8004946:	f001 b8b6 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 800494a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800494e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004956:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800495a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800495e:	2109      	movs	r1, #9
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	4790      	blx	r2
 8004964:	f8c7 0280 	str.w	r0, [r7, #640]	; 0x280
 8004968:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800496c:	2b00      	cmp	r3, #0
 800496e:	d028      	beq.n	80049c2 <cw_unpack_next+0x38c2>
 8004970:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004978:	d011      	beq.n	800499e <cw_unpack_next+0x389e>
 800497a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800497e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004988:	801a      	strh	r2, [r3, #0]
 800498a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800498e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8004998:	625a      	str	r2, [r3, #36]	; 0x24
 800499a:	f001 b88c 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 800499e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80049a2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80049ac:	801a      	strh	r2, [r3, #0]
 80049ae:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80049b2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0202 	mvn.w	r2, #2
 80049bc:	625a      	str	r2, [r3, #36]	; 0x24
 80049be:	f001 b87a 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80049c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80049c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80049d2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80049d6:	3309      	adds	r3, #9
 80049d8:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80049dc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80049e0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80049ea:	61d3      	str	r3, [r2, #28]
 80049ec:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80049f0:	1c53      	adds	r3, r2, #1
 80049f2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80049f6:	f992 3000 	ldrsb.w	r3, [r2]
 80049fa:	b219      	sxth	r1, r3
 80049fc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004a00:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	460b      	mov	r3, r1
 8004a08:	8013      	strh	r3, [r2, #0]
 8004a0a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004a0e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1c:	f040 80bf 	bne.w	8004b9e <cw_unpack_next+0x3a9e>
 8004a20:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a28:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
 8004a2c:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8004a30:	0a1a      	lsrs	r2, r3, #8
 8004a32:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8004a36:	061b      	lsls	r3, r3, #24
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a3c:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8004a40:	0a1a      	lsrs	r2, r3, #8
 8004a42:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8004a46:	061b      	lsls	r3, r3, #24
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a4c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004a50:	460b      	mov	r3, r1
 8004a52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a56:	663b      	str	r3, [r7, #96]	; 0x60
 8004a58:	4613      	mov	r3, r2
 8004a5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a5e:	667b      	str	r3, [r7, #100]	; 0x64
 8004a60:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8004a64:	021a      	lsls	r2, r3, #8
 8004a66:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8004a6a:	0e1b      	lsrs	r3, r3, #24
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a70:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8004a74:	021a      	lsls	r2, r3, #8
 8004a76:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8004a7a:	0e1b      	lsrs	r3, r3, #24
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a80:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004a84:	460b      	mov	r3, r1
 8004a86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a8a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a92:	657b      	str	r3, [r7, #84]	; 0x54
 8004a94:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004a98:	4623      	mov	r3, r4
 8004a9a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aa4:	462b      	mov	r3, r5
 8004aa6:	460a      	mov	r2, r1
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aac:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8004ab0:	f04f 0000 	mov.w	r0, #0
 8004ab4:	f04f 0100 	mov.w	r1, #0
 8004ab8:	0a10      	lsrs	r0, r2, #8
 8004aba:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004abe:	0a19      	lsrs	r1, r3, #8
 8004ac0:	f000 437f 	and.w	r3, r0, #4278190080	; 0xff000000
 8004ac4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	647b      	str	r3, [r7, #68]	; 0x44
 8004aca:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004ace:	4623      	mov	r3, r4
 8004ad0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ada:	462b      	mov	r3, r5
 8004adc:	460a      	mov	r2, r1
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae2:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8004ae6:	f04f 0000 	mov.w	r0, #0
 8004aea:	f04f 0100 	mov.w	r1, #0
 8004aee:	0219      	lsls	r1, r3, #8
 8004af0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004af4:	0210      	lsls	r0, r2, #8
 8004af6:	2300      	movs	r3, #0
 8004af8:	633b      	str	r3, [r7, #48]	; 0x30
 8004afa:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 8004afe:	637b      	str	r3, [r7, #52]	; 0x34
 8004b00:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8004b04:	4623      	mov	r3, r4
 8004b06:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b10:	462b      	mov	r3, r5
 8004b12:	460a      	mov	r2, r1
 8004b14:	4313      	orrs	r3, r2
 8004b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b18:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	0e0a      	lsrs	r2, r1, #24
 8004b26:	2300      	movs	r3, #0
 8004b28:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	4311      	orrs	r1, r2
 8004b30:	6239      	str	r1, [r7, #32]
 8004b32:	4629      	mov	r1, r5
 8004b34:	4319      	orrs	r1, r3
 8004b36:	6279      	str	r1, [r7, #36]	; 0x24
 8004b38:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	0603      	lsls	r3, r0, #24
 8004b46:	2200      	movs	r2, #0
 8004b48:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	4311      	orrs	r1, r2
 8004b50:	6039      	str	r1, [r7, #0]
 8004b52:	4629      	mov	r1, r5
 8004b54:	4319      	orrs	r1, r3
 8004b56:	6079      	str	r1, [r7, #4]
 8004b58:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004b5c:	e9c7 349e 	strd	r3, r4, [r7, #632]	; 0x278
 8004b60:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8004b64:	61ba      	str	r2, [r7, #24]
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	61fb      	str	r3, [r7, #28]
 8004b6c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004b70:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004b7a:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8004b7e:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	088a      	lsrs	r2, r1, #2
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004b92:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	611a      	str	r2, [r3, #16]
 8004b9a:	f000 bf8c 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8004b9e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004ba2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2208      	movs	r2, #8
 8004baa:	60da      	str	r2, [r3, #12]
 8004bac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004bb0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8004bba:	609a      	str	r2, [r3, #8]
 8004bbc:	f000 bf7b 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xd8:  getDDItemFix(16);                                           // fixext 16
 8004bc0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004bc4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004bd0:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004bd4:	3311      	adds	r3, #17
 8004bd6:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8004bda:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004bde:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d962      	bls.n	8004cb4 <cw_unpack_next+0x3bb4>
 8004bee:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004bf2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d111      	bne.n	8004c22 <cw_unpack_next+0x3b22>
 8004bfe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c02:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c0c:	801a      	strh	r2, [r3, #0]
 8004c0e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c12:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0202 	mvn.w	r2, #2
 8004c1c:	625a      	str	r2, [r3, #36]	; 0x24
 8004c1e:	f000 bf4a 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8004c22:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c26:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004c32:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004c36:	2111      	movs	r1, #17
 8004c38:	6810      	ldr	r0, [r2, #0]
 8004c3a:	4798      	blx	r3
 8004c3c:	f8c7 0284 	str.w	r0, [r7, #644]	; 0x284
 8004c40:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d028      	beq.n	8004c9a <cw_unpack_next+0x3b9a>
 8004c48:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c50:	d011      	beq.n	8004c76 <cw_unpack_next+0x3b76>
 8004c52:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c56:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c60:	801a      	strh	r2, [r3, #0]
 8004c62:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c66:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8004c70:	625a      	str	r2, [r3, #36]	; 0x24
 8004c72:	f000 bf20 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8004c76:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c7a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c84:	801a      	strh	r2, [r3, #0]
 8004c86:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c8a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0202 	mvn.w	r2, #2
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24
 8004c96:	f000 bf0e 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8004c9a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004c9e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004caa:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004cae:	3311      	adds	r3, #17
 8004cb0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8004cb4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004cb8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 8004cc2:	61da      	str	r2, [r3, #28]
 8004cc4:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 8004cce:	f993 3000 	ldrsb.w	r3, [r3]
 8004cd2:	b21a      	sxth	r2, r3
 8004cd4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004cd8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	801a      	strh	r2, [r3, #0]
 8004ce0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004ce4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf2:	d111      	bne.n	8004d18 <cw_unpack_next+0x3c18>
 8004cf4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004cf8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004d02:	801a      	strh	r2, [r3, #0]
 8004d04:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004d08:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f06f 020b 	mvn.w	r2, #11
 8004d12:	625a      	str	r2, [r3, #36]	; 0x24
 8004d14:	f000 becf 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8004d18:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004d1c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2210      	movs	r2, #16
 8004d24:	60da      	str	r2, [r3, #12]
 8004d26:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004d2a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8004d34:	609a      	str	r2, [r3, #8]
 8004d36:	f000 bebe 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xd9:  getDDItem1(CWP_ITEM_STR, str.length, uint8_t);              // str 8
 8004d3a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004d3e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f44f 7299 	mov.w	r2, #306	; 0x132
 8004d48:	801a      	strh	r2, [r3, #0]
 8004d4a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004d4e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004d5a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004d5e:	3301      	adds	r3, #1
 8004d60:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8004d64:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004d68:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	f8d7 2348 	ldr.w	r2, [r7, #840]	; 0x348
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d962      	bls.n	8004e3e <cw_unpack_next+0x3d3e>
 8004d78:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004d7c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d111      	bne.n	8004dac <cw_unpack_next+0x3cac>
 8004d88:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004d8c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004d96:	801a      	strh	r2, [r3, #0]
 8004d98:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004d9c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f06f 0202 	mvn.w	r2, #2
 8004da6:	625a      	str	r2, [r3, #36]	; 0x24
 8004da8:	f000 be85 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8004dac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004db0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db8:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004dbc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	6810      	ldr	r0, [r2, #0]
 8004dc4:	4798      	blx	r3
 8004dc6:	f8c7 028c 	str.w	r0, [r7, #652]	; 0x28c
 8004dca:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d028      	beq.n	8004e24 <cw_unpack_next+0x3d24>
 8004dd2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8004dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dda:	d011      	beq.n	8004e00 <cw_unpack_next+0x3d00>
 8004ddc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004de0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004dea:	801a      	strh	r2, [r3, #0]
 8004dec:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004df0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 8004dfa:	625a      	str	r2, [r3, #36]	; 0x24
 8004dfc:	f000 be5b 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8004e00:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e04:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e0e:	801a      	strh	r2, [r3, #0]
 8004e10:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e14:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f06f 0202 	mvn.w	r2, #2
 8004e1e:	625a      	str	r2, [r3, #36]	; 0x24
 8004e20:	f000 be49 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8004e24:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e28:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004e34:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004e38:	3301      	adds	r3, #1
 8004e3a:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8004e3e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e42:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f8d7 2348 	ldr.w	r2, [r7, #840]	; 0x348
 8004e4c:	61da      	str	r2, [r3, #28]
 8004e4e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	461a      	mov	r2, r3
 8004e56:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e5a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(str);
 8004e62:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e66:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004e72:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e76:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8004e82:	4413      	add	r3, r2
 8004e84:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8004e88:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e8c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d96d      	bls.n	8004f78 <cw_unpack_next+0x3e78>
 8004e9c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004ea0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d111      	bne.n	8004ed0 <cw_unpack_next+0x3dd0>
 8004eac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004eb0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004eba:	801a      	strh	r2, [r3, #0]
 8004ebc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004ec0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f06f 0202 	mvn.w	r2, #2
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24
 8004ecc:	f000 bdf3 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8004ed0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004ed4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004ee0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004ee4:	6812      	ldr	r2, [r2, #0]
 8004ee6:	68d1      	ldr	r1, [r2, #12]
 8004ee8:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8004eec:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004ef0:	6810      	ldr	r0, [r2, #0]
 8004ef2:	4798      	blx	r3
 8004ef4:	f8c7 0288 	str.w	r0, [r7, #648]	; 0x288
 8004ef8:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d028      	beq.n	8004f52 <cw_unpack_next+0x3e52>
 8004f00:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8004f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f08:	d011      	beq.n	8004f2e <cw_unpack_next+0x3e2e>
 8004f0a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f0e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f18:	801a      	strh	r2, [r3, #0]
 8004f1a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f1e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8004f28:	625a      	str	r2, [r3, #36]	; 0x24
 8004f2a:	f000 bdc4 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8004f2e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f32:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f3c:	801a      	strh	r2, [r3, #0]
 8004f3e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f42:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0202 	mvn.w	r2, #2
 8004f4c:	625a      	str	r2, [r3, #36]	; 0x24
 8004f4e:	f000 bdb2 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8004f52:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f56:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004f62:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f66:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8004f72:	4413      	add	r3, r2
 8004f74:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8004f78:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f7c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 8004f86:	61da      	str	r2, [r3, #28]
 8004f88:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004f8c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8004f96:	609a      	str	r2, [r3, #8]
 8004f98:	f000 bd8d 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xda:  getDDItem2(CWP_ITEM_STR, str.length, uint16_t);             // str 16
 8004f9c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004fa0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f44f 7299 	mov.w	r2, #306	; 0x132
 8004faa:	801a      	strh	r2, [r3, #0]
 8004fac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004fb0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004fbc:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004fc0:	3302      	adds	r3, #2
 8004fc2:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8004fc6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004fca:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	f8d7 2340 	ldr.w	r2, [r7, #832]	; 0x340
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d962      	bls.n	80050a0 <cw_unpack_next+0x3fa0>
 8004fda:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004fde:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d111      	bne.n	800500e <cw_unpack_next+0x3f0e>
 8004fea:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004fee:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004ff8:	801a      	strh	r2, [r3, #0]
 8004ffa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004ffe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f06f 0202 	mvn.w	r2, #2
 8005008:	625a      	str	r2, [r3, #36]	; 0x24
 800500a:	f000 bd54 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 800500e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005012:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800501e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005022:	2102      	movs	r1, #2
 8005024:	6810      	ldr	r0, [r2, #0]
 8005026:	4798      	blx	r3
 8005028:	f8c7 0294 	str.w	r0, [r7, #660]	; 0x294
 800502c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8005030:	2b00      	cmp	r3, #0
 8005032:	d028      	beq.n	8005086 <cw_unpack_next+0x3f86>
 8005034:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503c:	d011      	beq.n	8005062 <cw_unpack_next+0x3f62>
 800503e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005042:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f240 32e7 	movw	r2, #999	; 0x3e7
 800504c:	801a      	strh	r2, [r3, #0]
 800504e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005052:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 800505c:	625a      	str	r2, [r3, #36]	; 0x24
 800505e:	f000 bd2a 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8005062:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005066:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005070:	801a      	strh	r2, [r3, #0]
 8005072:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005076:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f06f 0202 	mvn.w	r2, #2
 8005080:	625a      	str	r2, [r3, #36]	; 0x24
 8005082:	f000 bd18 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8005086:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800508a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005096:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800509a:	3302      	adds	r3, #2
 800509c:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 80050a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80050a4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f8d7 2340 	ldr.w	r2, [r7, #832]	; 0x340
 80050ae:	61da      	str	r2, [r3, #28]
 80050b0:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 80050ba:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	b21a      	sxth	r2, r3
 80050c2:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80050c6:	0a1b      	lsrs	r3, r3, #8
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	b21b      	sxth	r3, r3
 80050cc:	4313      	orrs	r3, r2
 80050ce:	b21b      	sxth	r3, r3
 80050d0:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 80050d4:	f8b7 22aa 	ldrh.w	r2, [r7, #682]	; 0x2aa
 80050d8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80050dc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(str);
 80050e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80050e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80050f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80050f8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8005104:	4413      	add	r3, r2
 8005106:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800510a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800510e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 800511a:	429a      	cmp	r2, r3
 800511c:	d96d      	bls.n	80051fa <cw_unpack_next+0x40fa>
 800511e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005122:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	2b00      	cmp	r3, #0
 800512c:	d111      	bne.n	8005152 <cw_unpack_next+0x4052>
 800512e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005132:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f240 32e7 	movw	r2, #999	; 0x3e7
 800513c:	801a      	strh	r2, [r3, #0]
 800513e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005142:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0202 	mvn.w	r2, #2
 800514c:	625a      	str	r2, [r3, #36]	; 0x24
 800514e:	f000 bcb2 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8005152:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005156:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8005162:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	68d1      	ldr	r1, [r2, #12]
 800516a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800516e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005172:	6810      	ldr	r0, [r2, #0]
 8005174:	4798      	blx	r3
 8005176:	f8c7 0290 	str.w	r0, [r7, #656]	; 0x290
 800517a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800517e:	2b00      	cmp	r3, #0
 8005180:	d028      	beq.n	80051d4 <cw_unpack_next+0x40d4>
 8005182:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518a:	d011      	beq.n	80051b0 <cw_unpack_next+0x40b0>
 800518c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005190:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f240 32e7 	movw	r2, #999	; 0x3e7
 800519a:	801a      	strh	r2, [r3, #0]
 800519c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80051a0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 80051aa:	625a      	str	r2, [r3, #36]	; 0x24
 80051ac:	f000 bc83 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80051b0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80051b4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80051be:	801a      	strh	r2, [r3, #0]
 80051c0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80051c4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f06f 0202 	mvn.w	r2, #2
 80051ce:	625a      	str	r2, [r3, #36]	; 0x24
 80051d0:	f000 bc71 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 80051d4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80051d8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80051e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80051e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80051f4:	4413      	add	r3, r2
 80051f6:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 80051fa:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80051fe:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8005208:	61da      	str	r2, [r3, #28]
 800520a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800520e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8005218:	609a      	str	r2, [r3, #8]
 800521a:	f000 bc4c 	b.w	8005ab6 <cw_unpack_next+0x49b6>
        case 0xdb:  getDDItem4(CWP_ITEM_STR, str.length, uint32_t);             // str 32
 800521e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005222:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f44f 7299 	mov.w	r2, #306	; 0x132
 800522c:	801a      	strh	r2, [r3, #0]
 800522e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005232:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800523e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005242:	3304      	adds	r3, #4
 8005244:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8005248:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800524c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 8005258:	429a      	cmp	r2, r3
 800525a:	d960      	bls.n	800531e <cw_unpack_next+0x421e>
 800525c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005260:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	2b00      	cmp	r3, #0
 800526a:	d111      	bne.n	8005290 <cw_unpack_next+0x4190>
 800526c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005270:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f240 32e7 	movw	r2, #999	; 0x3e7
 800527a:	801a      	strh	r2, [r3, #0]
 800527c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005280:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f06f 0202 	mvn.w	r2, #2
 800528a:	625a      	str	r2, [r3, #36]	; 0x24
 800528c:	f000 bc13 	b.w	8005ab6 <cw_unpack_next+0x49b6>
 8005290:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005294:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80052a0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80052a4:	2104      	movs	r1, #4
 80052a6:	6810      	ldr	r0, [r2, #0]
 80052a8:	4798      	blx	r3
 80052aa:	f8c7 029c 	str.w	r0, [r7, #668]	; 0x29c
 80052ae:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d026      	beq.n	8005304 <cw_unpack_next+0x4204>
 80052b6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80052ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052be:	d010      	beq.n	80052e2 <cw_unpack_next+0x41e2>
 80052c0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80052c4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80052ce:	801a      	strh	r2, [r3, #0]
 80052d0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80052d4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80052de:	625a      	str	r2, [r3, #36]	; 0x24
 80052e0:	e3e9      	b.n	8005ab6 <cw_unpack_next+0x49b6>
 80052e2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80052e6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80052f0:	801a      	strh	r2, [r3, #0]
 80052f2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80052f6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0202 	mvn.w	r2, #2
 8005300:	625a      	str	r2, [r3, #36]	; 0x24
 8005302:	e3d8      	b.n	8005ab6 <cw_unpack_next+0x49b6>
 8005304:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005308:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005314:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005318:	3304      	adds	r3, #4
 800531a:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 800531e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005322:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 800532c:	61da      	str	r2, [r3, #28]
 800532e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005338:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005342:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	061a      	lsls	r2, r3, #24
 800534a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800534e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800535a:	431a      	orrs	r2, r3
 800535c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005360:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	0a1b      	lsrs	r3, r3, #8
 8005368:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800536c:	431a      	orrs	r2, r3
 800536e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005372:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	0e1b      	lsrs	r3, r3, #24
 800537a:	431a      	orrs	r2, r3
 800537c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005380:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800538a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005394:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60da      	str	r2, [r3, #12]
                    cw_unpack_assert_blob(str);
 800539c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80053a0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80053ac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80053b0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80053bc:	4413      	add	r3, r2
 80053be:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 80053c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80053c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d96a      	bls.n	80054ac <cw_unpack_next+0x43ac>
 80053d6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80053da:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d110      	bne.n	8005408 <cw_unpack_next+0x4308>
 80053e6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80053ea:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80053f4:	801a      	strh	r2, [r3, #0]
 80053f6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80053fa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f06f 0202 	mvn.w	r2, #2
 8005404:	625a      	str	r2, [r3, #36]	; 0x24
 8005406:	e356      	b.n	8005ab6 <cw_unpack_next+0x49b6>
 8005408:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800540c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8005418:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	68d1      	ldr	r1, [r2, #12]
 8005420:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8005424:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005428:	6810      	ldr	r0, [r2, #0]
 800542a:	4798      	blx	r3
 800542c:	f8c7 0298 	str.w	r0, [r7, #664]	; 0x298
 8005430:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005434:	2b00      	cmp	r3, #0
 8005436:	d026      	beq.n	8005486 <cw_unpack_next+0x4386>
 8005438:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 800543c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005440:	d010      	beq.n	8005464 <cw_unpack_next+0x4364>
 8005442:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005446:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005450:	801a      	strh	r2, [r3, #0]
 8005452:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005456:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8005460:	625a      	str	r2, [r3, #36]	; 0x24
 8005462:	e328      	b.n	8005ab6 <cw_unpack_next+0x49b6>
 8005464:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005468:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005472:	801a      	strh	r2, [r3, #0]
 8005474:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005478:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f06f 0202 	mvn.w	r2, #2
 8005482:	625a      	str	r2, [r3, #36]	; 0x24
 8005484:	e317      	b.n	8005ab6 <cw_unpack_next+0x49b6>
 8005486:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800548a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005496:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800549a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80054a6:	4413      	add	r3, r2
 80054a8:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 80054ac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80054b0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 80054ba:	61da      	str	r2, [r3, #28]
 80054bc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80054c0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80054ca:	609a      	str	r2, [r3, #8]
 80054cc:	e2f3      	b.n	8005ab6 <cw_unpack_next+0x49b6>
        case 0xdc:  getDDItem2(CWP_ITEM_ARRAY, array.size, uint16_t);   return;  // array 16
 80054ce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80054d2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f44f 729a 	mov.w	r2, #308	; 0x134
 80054dc:	801a      	strh	r2, [r3, #0]
 80054de:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80054e2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80054ee:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80054f2:	3302      	adds	r3, #2
 80054f4:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 80054f8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80054fc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8005508:	429a      	cmp	r2, r3
 800550a:	d95f      	bls.n	80055cc <cw_unpack_next+0x44cc>
 800550c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005510:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	2b00      	cmp	r3, #0
 800551a:	d110      	bne.n	800553e <cw_unpack_next+0x443e>
 800551c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005520:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f240 32e7 	movw	r2, #999	; 0x3e7
 800552a:	801a      	strh	r2, [r3, #0]
 800552c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005530:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f06f 0202 	mvn.w	r2, #2
 800553a:	625a      	str	r2, [r3, #36]	; 0x24
 800553c:	e2bb      	b.n	8005ab6 <cw_unpack_next+0x49b6>
 800553e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005542:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800554e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005552:	2102      	movs	r1, #2
 8005554:	6810      	ldr	r0, [r2, #0]
 8005556:	4798      	blx	r3
 8005558:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
 800555c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d026      	beq.n	80055b2 <cw_unpack_next+0x44b2>
 8005564:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8005568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556c:	d010      	beq.n	8005590 <cw_unpack_next+0x4490>
 800556e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005572:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f240 32e7 	movw	r2, #999	; 0x3e7
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005582:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 800558c:	625a      	str	r2, [r3, #36]	; 0x24
 800558e:	e292      	b.n	8005ab6 <cw_unpack_next+0x49b6>
 8005590:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005594:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800559e:	801a      	strh	r2, [r3, #0]
 80055a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80055a4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f06f 0202 	mvn.w	r2, #2
 80055ae:	625a      	str	r2, [r3, #36]	; 0x24
 80055b0:	e281      	b.n	8005ab6 <cw_unpack_next+0x49b6>
 80055b2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80055b6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80055c2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80055c6:	3302      	adds	r3, #2
 80055c8:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 80055cc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80055d0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 80055da:	61da      	str	r2, [r3, #28]
 80055dc:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 80055e6:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80055ea:	021b      	lsls	r3, r3, #8
 80055ec:	b21a      	sxth	r2, r3
 80055ee:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80055f2:	0a1b      	lsrs	r3, r3, #8
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	b21b      	sxth	r3, r3
 80055f8:	4313      	orrs	r3, r2
 80055fa:	b21b      	sxth	r3, r3
 80055fc:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 8005600:	f8b7 22aa 	ldrh.w	r2, [r7, #682]	; 0x2aa
 8005604:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005608:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	609a      	str	r2, [r3, #8]
 8005610:	e251      	b.n	8005ab6 <cw_unpack_next+0x49b6>
        case 0xdd:  getDDItem4(CWP_ITEM_ARRAY, array.size, uint32_t);   return;  // array 32
 8005612:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005616:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f44f 729a 	mov.w	r2, #308	; 0x134
 8005620:	801a      	strh	r2, [r3, #0]
 8005622:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005626:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005632:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005636:	3304      	adds	r3, #4
 8005638:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800563c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005640:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 800564c:	429a      	cmp	r2, r3
 800564e:	d95f      	bls.n	8005710 <cw_unpack_next+0x4610>
 8005650:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005654:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565c:	2b00      	cmp	r3, #0
 800565e:	d110      	bne.n	8005682 <cw_unpack_next+0x4582>
 8005660:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005664:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800566e:	801a      	strh	r2, [r3, #0]
 8005670:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005674:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f06f 0202 	mvn.w	r2, #2
 800567e:	625a      	str	r2, [r3, #36]	; 0x24
 8005680:	e219      	b.n	8005ab6 <cw_unpack_next+0x49b6>
 8005682:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005686:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8005692:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005696:	2104      	movs	r1, #4
 8005698:	6810      	ldr	r0, [r2, #0]
 800569a:	4798      	blx	r3
 800569c:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
 80056a0:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d026      	beq.n	80056f6 <cw_unpack_next+0x45f6>
 80056a8:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80056ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b0:	d010      	beq.n	80056d4 <cw_unpack_next+0x45d4>
 80056b2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80056b6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80056c0:	801a      	strh	r2, [r3, #0]
 80056c2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80056c6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 80056d0:	625a      	str	r2, [r3, #36]	; 0x24
 80056d2:	e1f0      	b.n	8005ab6 <cw_unpack_next+0x49b6>
 80056d4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80056d8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80056e2:	801a      	strh	r2, [r3, #0]
 80056e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80056e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f06f 0202 	mvn.w	r2, #2
 80056f2:	625a      	str	r2, [r3, #36]	; 0x24
 80056f4:	e1df      	b.n	8005ab6 <cw_unpack_next+0x49b6>
 80056f6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80056fa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005706:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800570a:	3304      	adds	r3, #4
 800570c:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8005710:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005714:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 800571e:	61da      	str	r2, [r3, #28]
 8005720:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800572a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005734:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	061a      	lsls	r2, r3, #24
 800573c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005740:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	021b      	lsls	r3, r3, #8
 8005748:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800574c:	431a      	orrs	r2, r3
 800574e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005752:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	0a1b      	lsrs	r3, r3, #8
 800575a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800575e:	431a      	orrs	r2, r3
 8005760:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005764:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	0e1b      	lsrs	r3, r3, #24
 800576c:	431a      	orrs	r2, r3
 800576e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005772:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800577c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005786:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	609a      	str	r2, [r3, #8]
 800578e:	e192      	b.n	8005ab6 <cw_unpack_next+0x49b6>
        case 0xde:  getDDItem2(CWP_ITEM_MAP, map.size, uint16_t);       return;  // map 16
 8005790:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005794:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f240 1235 	movw	r2, #309	; 0x135
 800579e:	801a      	strh	r2, [r3, #0]
 80057a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80057a4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80057b0:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80057b4:	3302      	adds	r3, #2
 80057b6:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 80057ba:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80057be:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	f8d7 2328 	ldr.w	r2, [r7, #808]	; 0x328
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d95f      	bls.n	800588e <cw_unpack_next+0x478e>
 80057ce:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80057d2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d110      	bne.n	8005800 <cw_unpack_next+0x4700>
 80057de:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80057e2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80057ec:	801a      	strh	r2, [r3, #0]
 80057ee:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80057f2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 0202 	mvn.w	r2, #2
 80057fc:	625a      	str	r2, [r3, #36]	; 0x24
 80057fe:	e15a      	b.n	8005ab6 <cw_unpack_next+0x49b6>
 8005800:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005804:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8005810:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005814:	2102      	movs	r1, #2
 8005816:	6810      	ldr	r0, [r2, #0]
 8005818:	4798      	blx	r3
 800581a:	f8c7 02ac 	str.w	r0, [r7, #684]	; 0x2ac
 800581e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8005822:	2b00      	cmp	r3, #0
 8005824:	d026      	beq.n	8005874 <cw_unpack_next+0x4774>
 8005826:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582e:	d010      	beq.n	8005852 <cw_unpack_next+0x4752>
 8005830:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005834:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800583e:	801a      	strh	r2, [r3, #0]
 8005840:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005844:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 800584e:	625a      	str	r2, [r3, #36]	; 0x24
 8005850:	e131      	b.n	8005ab6 <cw_unpack_next+0x49b6>
 8005852:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005856:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005860:	801a      	strh	r2, [r3, #0]
 8005862:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005866:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f06f 0202 	mvn.w	r2, #2
 8005870:	625a      	str	r2, [r3, #36]	; 0x24
 8005872:	e120      	b.n	8005ab6 <cw_unpack_next+0x49b6>
 8005874:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005878:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005884:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8005888:	3302      	adds	r3, #2
 800588a:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 800588e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005892:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f8d7 2328 	ldr.w	r2, [r7, #808]	; 0x328
 800589c:	61da      	str	r2, [r3, #28]
 800589e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 80058a8:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80058ac:	021b      	lsls	r3, r3, #8
 80058ae:	b21a      	sxth	r2, r3
 80058b0:	f8b7 32aa 	ldrh.w	r3, [r7, #682]	; 0x2aa
 80058b4:	0a1b      	lsrs	r3, r3, #8
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	b21b      	sxth	r3, r3
 80058ba:	4313      	orrs	r3, r2
 80058bc:	b21b      	sxth	r3, r3
 80058be:	f8a7 32aa 	strh.w	r3, [r7, #682]	; 0x2aa
 80058c2:	f8b7 22aa 	ldrh.w	r2, [r7, #682]	; 0x2aa
 80058c6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80058ca:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	609a      	str	r2, [r3, #8]
 80058d2:	e0f0      	b.n	8005ab6 <cw_unpack_next+0x49b6>
        case 0xdf:  getDDItem4(CWP_ITEM_MAP, map.size, uint32_t);       return;  // map 32
 80058d4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80058d8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f240 1235 	movw	r2, #309	; 0x135
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80058e8:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80058f4:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80058f8:	3304      	adds	r3, #4
 80058fa:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80058fe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005902:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 800590e:	429a      	cmp	r2, r3
 8005910:	d95f      	bls.n	80059d2 <cw_unpack_next+0x48d2>
 8005912:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005916:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d110      	bne.n	8005944 <cw_unpack_next+0x4844>
 8005922:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005926:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005930:	801a      	strh	r2, [r3, #0]
 8005932:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005936:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f06f 0202 	mvn.w	r2, #2
 8005940:	625a      	str	r2, [r3, #36]	; 0x24
 8005942:	e0b8      	b.n	8005ab6 <cw_unpack_next+0x49b6>
 8005944:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005948:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8005954:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005958:	2104      	movs	r1, #4
 800595a:	6810      	ldr	r0, [r2, #0]
 800595c:	4798      	blx	r3
 800595e:	f8c7 02b0 	str.w	r0, [r7, #688]	; 0x2b0
 8005962:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d026      	beq.n	80059b8 <cw_unpack_next+0x48b8>
 800596a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005972:	d010      	beq.n	8005996 <cw_unpack_next+0x4896>
 8005974:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005978:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005982:	801a      	strh	r2, [r3, #0]
 8005984:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005988:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8005992:	625a      	str	r2, [r3, #36]	; 0x24
 8005994:	e08f      	b.n	8005ab6 <cw_unpack_next+0x49b6>
 8005996:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800599a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80059a4:	801a      	strh	r2, [r3, #0]
 80059a6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80059aa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0202 	mvn.w	r2, #2
 80059b4:	625a      	str	r2, [r3, #36]	; 0x24
 80059b6:	e07e      	b.n	8005ab6 <cw_unpack_next+0x49b6>
 80059b8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80059bc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80059c8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80059cc:	3304      	adds	r3, #4
 80059ce:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80059d2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80059d6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 80059e0:	61da      	str	r2, [r3, #28]
 80059e2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80059ec:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80059f6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	061a      	lsls	r2, r3, #24
 80059fe:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a02:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	021b      	lsls	r3, r3, #8
 8005a0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a14:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	0a1b      	lsrs	r3, r3, #8
 8005a1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005a20:	431a      	orrs	r2, r3
 8005a22:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a26:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	0e1b      	lsrs	r3, r3, #24
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a34:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a3e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a48:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	609a      	str	r2, [r3, #8]
 8005a50:	e031      	b.n	8005ab6 <cw_unpack_next+0x49b6>
        case 0xe0: case 0xe1: case 0xe2: case 0xe3: case 0xe4: case 0xe5: case 0xe6: case 0xe7:
        case 0xe8: case 0xe9: case 0xea: case 0xeb: case 0xec: case 0xed: case 0xee: case 0xef:
        case 0xf0: case 0xf1: case 0xf2: case 0xf3: case 0xf4: case 0xf5: case 0xf6: case 0xf7:
        case 0xf8: case 0xf9: case 0xfa: case 0xfb: case 0xfc: case 0xfd: case 0xfe: case 0xff:
                    getDDItem(CWP_ITEM_NEGATIVE_INTEGER, i64, (int8_t)c); return;    // negative fixnum
 8005a52:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a56:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f240 122f 	movw	r2, #303	; 0x12f
 8005a60:	801a      	strh	r2, [r3, #0]
 8005a62:	f997 32b7 	ldrsb.w	r3, [r7, #695]	; 0x2b7
 8005a66:	b25b      	sxtb	r3, r3
 8005a68:	17da      	asrs	r2, r3, #31
 8005a6a:	613b      	str	r3, [r7, #16]
 8005a6c:	617a      	str	r2, [r7, #20]
 8005a6e:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a72:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005a7c:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8005a80:	e019      	b.n	8005ab6 <cw_unpack_next+0x49b6>
        default:
                    UNPACK_ERROR(CWP_RC_MALFORMED_INPUT)
 8005a82:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a86:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a90:	801a      	strh	r2, [r3, #0]
 8005a92:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8005a96:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0203 	mvn.w	r2, #3
 8005aa0:	625a      	str	r2, [r3, #36]	; 0x24
 8005aa2:	e008      	b.n	8005ab6 <cw_unpack_next+0x49b6>
        return;
 8005aa4:	bf00      	nop
 8005aa6:	e006      	b.n	8005ab6 <cw_unpack_next+0x49b6>
                    return;
 8005aa8:	bf00      	nop
 8005aaa:	e004      	b.n	8005ab6 <cw_unpack_next+0x49b6>
                    return;
 8005aac:	bf00      	nop
 8005aae:	e002      	b.n	8005ab6 <cw_unpack_next+0x49b6>
                    return;
 8005ab0:	bf00      	nop
 8005ab2:	e000      	b.n	8005ab6 <cw_unpack_next+0x49b6>
                    return;
 8005ab4:	bf00      	nop
    }
}
 8005ab6:	f507 775d 	add.w	r7, r7, #884	; 0x374
 8005aba:	46bd      	mov	sp, r7
 8005abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005ac0 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005ac4:	f000 fd02 	bl	80064cc <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8005ac8:	f000 f9e7 	bl	8005e9a <SystemClock_Config>

	/* Initialize LEDs */
	BSP_LED_Init(LED1); // RED LED
 8005acc:	2000      	movs	r0, #0
 8005ace:	f000 fc7d 	bl	80063cc <BSP_LED_Init>
	BSP_LED_Init(LED2); // BLUE LED
 8005ad2:	2001      	movs	r0, #1
 8005ad4:	f000 fc7a 	bl	80063cc <BSP_LED_Init>
	BSP_LED_Init(LED3); // GREEN LED
 8005ad8:	2002      	movs	r0, #2
 8005ada:	f000 fc77 	bl	80063cc <BSP_LED_Init>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005ade:	f000 faa1 	bl	8006024 <MX_GPIO_Init>
	MX_DMA_Init();
 8005ae2:	f000 fa79 	bl	8005fd8 <MX_DMA_Init>
	MX_UART4_Init();
 8005ae6:	f000 fa3f 	bl	8005f68 <MX_UART4_Init>

	/* Initialize LCD screen */
	LCD_Init();
 8005aea:	f7fa fead 	bl	8000848 <LCD_Init>
	LCD_Clear();
 8005aee:	f7fa fe65 	bl	80007bc <LCD_Clear>
	LCD_Set_Cursor(1, 1);
 8005af2:	2101      	movs	r1, #1
 8005af4:	2001      	movs	r0, #1
 8005af6:	f7fa fe6e 	bl	80007d6 <LCD_Set_Cursor>
	LCD_Write_String("  Gary is  ");
 8005afa:	4825      	ldr	r0, [pc, #148]	; (8005b90 <main+0xd0>)
 8005afc:	f7fa fff6 	bl	8000aec <LCD_Write_String>
	LCD_Set_Cursor(2, 1);
 8005b00:	2101      	movs	r1, #1
 8005b02:	2002      	movs	r0, #2
 8005b04:	f7fa fe67 	bl	80007d6 <LCD_Set_Cursor>
	LCD_Write_String("very cool!!!");
 8005b08:	4822      	ldr	r0, [pc, #136]	; (8005b94 <main+0xd4>)
 8005b0a:	f7fa ffef 	bl	8000aec <LCD_Write_String>

	/* MAIN CONTROL LOOP FOR COMMUNICATION */
	pack_telemetry();
 8005b0e:	f000 f84b 	bl	8005ba8 <pack_telemetry>
	while (1) {
		errorType = 0;
 8005b12:	4b21      	ldr	r3, [pc, #132]	; (8005b98 <main+0xd8>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]
		BSP_LED_On(LED1);
 8005b18:	2000      	movs	r0, #0
 8005b1a:	f000 fca3 	bl	8006464 <BSP_LED_On>
		BSP_LED_Off(LED2); // LED OFF
 8005b1e:	2001      	movs	r0, #1
 8005b20:	f000 fcba 	bl	8006498 <BSP_LED_Off>

		// SEND TELEMETRY DATA
		send_telemetry();
 8005b24:	f000 f8f2 	bl	8005d0c <send_telemetry>

		BSP_LED_On(LED2); // LED ON
 8005b28:	2001      	movs	r0, #1
 8005b2a:	f000 fc9b 	bl	8006464 <BSP_LED_On>
		BSP_LED_Off(LED1);
 8005b2e:	2000      	movs	r0, #0
 8005b30:	f000 fcb2 	bl	8006498 <BSP_LED_Off>

		// RECEIVE DATA (if any)
		HAL_Delay(80);
 8005b34:	2050      	movs	r0, #80	; 0x50
 8005b36:	f000 fd3d 	bl	80065b4 <HAL_Delay>
		receive_commands();
 8005b3a:	f000 f913 	bl	8005d64 <receive_commands>
		do_something_with_commands();
 8005b3e:	f000 f9a5 	bl	8005e8c <do_something_with_commands>

		if ((int) *aRxBuffer != 0x96 || (((int) *aRxBuffer == 0x96) && ((int) *(aRxBuffer+1) == 0x96))) {
 8005b42:	4b16      	ldr	r3, [pc, #88]	; (8005b9c <main+0xdc>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b96      	cmp	r3, #150	; 0x96
 8005b48:	d107      	bne.n	8005b5a <main+0x9a>
 8005b4a:	4b14      	ldr	r3, [pc, #80]	; (8005b9c <main+0xdc>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b96      	cmp	r3, #150	; 0x96
 8005b50:	d10a      	bne.n	8005b68 <main+0xa8>
 8005b52:	4b12      	ldr	r3, [pc, #72]	; (8005b9c <main+0xdc>)
 8005b54:	785b      	ldrb	r3, [r3, #1]
 8005b56:	2b96      	cmp	r3, #150	; 0x96
 8005b58:	d106      	bne.n	8005b68 <main+0xa8>
			strncpy(unpackBuffer, aRxBuffer+1, UNPACKSIZE-1);
 8005b5a:	4b11      	ldr	r3, [pc, #68]	; (8005ba0 <main+0xe0>)
 8005b5c:	221d      	movs	r2, #29
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4810      	ldr	r0, [pc, #64]	; (8005ba4 <main+0xe4>)
 8005b62:	f004 fbcb 	bl	800a2fc <strncpy>
 8005b66:	e004      	b.n	8005b72 <main+0xb2>
		} else {
			strncpy(unpackBuffer, aRxBuffer, UNPACKSIZE);
 8005b68:	221e      	movs	r2, #30
 8005b6a:	490c      	ldr	r1, [pc, #48]	; (8005b9c <main+0xdc>)
 8005b6c:	480d      	ldr	r0, [pc, #52]	; (8005ba4 <main+0xe4>)
 8005b6e:	f004 fbc5 	bl	800a2fc <strncpy>
		}

		unpack_commands();
 8005b72:	f000 f867 	bl	8005c44 <unpack_commands>
		if (errorType != 1) {
 8005b76:	4b08      	ldr	r3, [pc, #32]	; (8005b98 <main+0xd8>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d001      	beq.n	8005b82 <main+0xc2>
			display_data_on_lcd();
 8005b7e:	f000 f91b 	bl	8005db8 <display_data_on_lcd>
		}
		memset(aRxBuffer, 0, RXBUFFERSIZE);
 8005b82:	221e      	movs	r2, #30
 8005b84:	2100      	movs	r1, #0
 8005b86:	4805      	ldr	r0, [pc, #20]	; (8005b9c <main+0xdc>)
 8005b88:	f004 fb90 	bl	800a2ac <memset>
		errorType = 0;
 8005b8c:	e7c1      	b.n	8005b12 <main+0x52>
 8005b8e:	bf00      	nop
 8005b90:	0800abc0 	.word	0x0800abc0
 8005b94:	0800abcc 	.word	0x0800abcc
 8005b98:	2000000c 	.word	0x2000000c
 8005b9c:	200001e8 	.word	0x200001e8
 8005ba0:	200001e9 	.word	0x200001e9
 8005ba4:	20000228 	.word	0x20000228

08005ba8 <pack_telemetry>:
	}
}

/* Pack telemetry data in order to send packed data to VR team */
void pack_telemetry() {
 8005ba8:	b5b0      	push	{r4, r5, r7, lr}
 8005baa:	b08c      	sub	sp, #48	; 0x30
 8005bac:	af00      	add	r7, sp, #0
	// generate values for now (6 integers - ax, ay, az, gx, gy, gz)
	char buffer[TXBUFFERSIZE];
	int num = 45;
 8005bae:	232d      	movs	r3, #45	; 0x2d
 8005bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	cw_pack_context_init(&pc, buffer, TXBUFFERSIZE, 0);
 8005bb2:	1d39      	adds	r1, r7, #4
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	221e      	movs	r2, #30
 8005bb8:	481e      	ldr	r0, [pc, #120]	; (8005c34 <pack_telemetry+0x8c>)
 8005bba:	f7fa ffcb 	bl	8000b54 <cw_pack_context_init>
	cw_pack_array_size(&pc, 6);
 8005bbe:	2106      	movs	r1, #6
 8005bc0:	481c      	ldr	r0, [pc, #112]	; (8005c34 <pack_telemetry+0x8c>)
 8005bc2:	f7fb f9bc 	bl	8000f3e <cw_pack_array_size>
	for (int i = 0; i < 6; i++) {
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bca:	e017      	b.n	8005bfc <pack_telemetry+0x54>
		cw_pack_unsigned(&pc, num);
 8005bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bce:	17da      	asrs	r2, r3, #31
 8005bd0:	461c      	mov	r4, r3
 8005bd2:	4615      	mov	r5, r2
 8005bd4:	4622      	mov	r2, r4
 8005bd6:	462b      	mov	r3, r5
 8005bd8:	4816      	ldr	r0, [pc, #88]	; (8005c34 <pack_telemetry+0x8c>)
 8005bda:	f7fa ffe6 	bl	8000baa <cw_pack_unsigned>
		num = (num * 0x78282) % 1024;
 8005bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be0:	4a15      	ldr	r2, [pc, #84]	; (8005c38 <pack_telemetry+0x90>)
 8005be2:	fb02 f303 	mul.w	r3, r2, r3
 8005be6:	425a      	negs	r2, r3
 8005be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bec:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005bf0:	bf58      	it	pl
 8005bf2:	4253      	negpl	r3, r2
 8005bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < 6; i++) {
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	2b05      	cmp	r3, #5
 8005c00:	dde4      	ble.n	8005bcc <pack_telemetry+0x24>
	}

	//uint8_t * sendBuffer;
	size_t length = pc.current - pc.start; // add 4 bytes to size for flush sequence
 8005c02:	4b0c      	ldr	r3, [pc, #48]	; (8005c34 <pack_telemetry+0x8c>)
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	4b0b      	ldr	r3, [pc, #44]	; (8005c34 <pack_telemetry+0x8c>)
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	627b      	str	r3, [r7, #36]	; 0x24

	// String operations
	//sendBuffer = malloc(length + 4);
	strncpy((char *) aTxBuffer, (char *) pc.start, length);
 8005c0e:	4b09      	ldr	r3, [pc, #36]	; (8005c34 <pack_telemetry+0x8c>)
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c14:	4619      	mov	r1, r3
 8005c16:	4809      	ldr	r0, [pc, #36]	; (8005c3c <pack_telemetry+0x94>)
 8005c18:	f004 fb70 	bl	800a2fc <strncpy>
	strncpy((char *) aTxBuffer + length, (char *) flushSequence, 4);
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	4a07      	ldr	r2, [pc, #28]	; (8005c3c <pack_telemetry+0x94>)
 8005c20:	4413      	add	r3, r2
 8005c22:	2204      	movs	r2, #4
 8005c24:	4906      	ldr	r1, [pc, #24]	; (8005c40 <pack_telemetry+0x98>)
 8005c26:	4618      	mov	r0, r3
 8005c28:	f004 fb68 	bl	800a2fc <strncpy>
}
 8005c2c:	bf00      	nop
 8005c2e:	3730      	adds	r7, #48	; 0x30
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bdb0      	pop	{r4, r5, r7, pc}
 8005c34:	20000248 	.word	0x20000248
 8005c38:	00078282 	.word	0x00078282
 8005c3c:	20000208 	.word	0x20000208
 8005c40:	20000004 	.word	0x20000004

08005c44 <unpack_commands>:

/* Unpack data received ---> integer array*/
void unpack_commands() {
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
	//int receivedData[5]; // Controls: pitch, yaw, roll --- Gimble: left/right, up/down
	int * ptr = commands;
 8005c4a:	4b2b      	ldr	r3, [pc, #172]	; (8005cf8 <unpack_commands+0xb4>)
 8005c4c:	60fb      	str	r3, [r7, #12]
	int numItems = 0;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	607b      	str	r3, [r7, #4]
	//cw_unpack_context uc;
	cw_unpack_context_init(&uc, (char *) unpackBuffer, UNPACKSIZE, 0);
 8005c52:	2300      	movs	r3, #0
 8005c54:	221e      	movs	r2, #30
 8005c56:	4929      	ldr	r1, [pc, #164]	; (8005cfc <unpack_commands+0xb8>)
 8005c58:	4829      	ldr	r0, [pc, #164]	; (8005d00 <unpack_commands+0xbc>)
 8005c5a:	f7fb fa2b 	bl	80010b4 <cw_unpack_context_init>
	cw_unpack_next(&uc); // get array length
 8005c5e:	4828      	ldr	r0, [pc, #160]	; (8005d00 <unpack_commands+0xbc>)
 8005c60:	f7fb fa4e 	bl	8001100 <cw_unpack_next>
	numItems = uc.item.as.i64;
 8005c64:	4b26      	ldr	r3, [pc, #152]	; (8005d00 <unpack_commands+0xbc>)
 8005c66:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	607b      	str	r3, [r7, #4]
	//commands = uc.item.as.array;
	for (int i = 0; i < numItems; i++) {
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60bb      	str	r3, [r7, #8]
 8005c72:	e038      	b.n	8005ce6 <unpack_commands+0xa2>
		cw_unpack_next(&uc);
 8005c74:	4822      	ldr	r0, [pc, #136]	; (8005d00 <unpack_commands+0xbc>)
 8005c76:	f7fb fa43 	bl	8001100 <cw_unpack_next>
		if (uc.item.type == CWP_ITEM_POSITIVE_INTEGER) {
 8005c7a:	4b21      	ldr	r3, [pc, #132]	; (8005d00 <unpack_commands+0xbc>)
 8005c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c80:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 8005c84:	d108      	bne.n	8005c98 <unpack_commands+0x54>
			*(ptr++) = uc.item.as.u64;
 8005c86:	4b1e      	ldr	r3, [pc, #120]	; (8005d00 <unpack_commands+0xbc>)
 8005c88:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	1d1a      	adds	r2, r3, #4
 8005c90:	60fa      	str	r2, [r7, #12]
 8005c92:	4602      	mov	r2, r0
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	e018      	b.n	8005cca <unpack_commands+0x86>
		} else if (uc.item.type == CWP_ITEM_NEGATIVE_INTEGER) {
 8005c98:	4b19      	ldr	r3, [pc, #100]	; (8005d00 <unpack_commands+0xbc>)
 8005c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c9e:	f240 122f 	movw	r2, #303	; 0x12f
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d108      	bne.n	8005cb8 <unpack_commands+0x74>
			*(ptr++) = uc.item.as.i64;
 8005ca6:	4b16      	ldr	r3, [pc, #88]	; (8005d00 <unpack_commands+0xbc>)
 8005ca8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	1d1a      	adds	r2, r3, #4
 8005cb0:	60fa      	str	r2, [r7, #12]
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	e008      	b.n	8005cca <unpack_commands+0x86>
		} else {
			errorType = 1;
 8005cb8:	4b12      	ldr	r3, [pc, #72]	; (8005d04 <unpack_commands+0xc0>)
 8005cba:	2201      	movs	r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]
			msgPackErrCnt++;
 8005cbe:	4b12      	ldr	r3, [pc, #72]	; (8005d08 <unpack_commands+0xc4>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	4a10      	ldr	r2, [pc, #64]	; (8005d08 <unpack_commands+0xc4>)
 8005cc6:	6013      	str	r3, [r2, #0]
			// TODO - figure out what exactly is breaking here
			break;
 8005cc8:	e012      	b.n	8005cf0 <unpack_commands+0xac>
			//Error_Handler(); // error if not pos/neg integer
		}

		if ((int) uc.current == 0xcc || (int) uc.current == 0xd0) {
 8005cca:	4b0d      	ldr	r3, [pc, #52]	; (8005d00 <unpack_commands+0xbc>)
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	2bcc      	cmp	r3, #204	; 0xcc
 8005cd0:	d003      	beq.n	8005cda <unpack_commands+0x96>
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <unpack_commands+0xbc>)
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	2bd0      	cmp	r3, #208	; 0xd0
 8005cd8:	d102      	bne.n	8005ce0 <unpack_commands+0x9c>
			cw_unpack_next(&uc);
 8005cda:	4809      	ldr	r0, [pc, #36]	; (8005d00 <unpack_commands+0xbc>)
 8005cdc:	f7fb fa10 	bl	8001100 <cw_unpack_next>
	for (int i = 0; i < numItems; i++) {
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	60bb      	str	r3, [r7, #8]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	dbc2      	blt.n	8005c74 <unpack_commands+0x30>
		}
	}
	//return receivedData;
}
 8005cee:	bf00      	nop
 8005cf0:	bf00      	nop
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	200001c4 	.word	0x200001c4
 8005cfc:	20000228 	.word	0x20000228
 8005d00:	20000268 	.word	0x20000268
 8005d04:	2000000c 	.word	0x2000000c
 8005d08:	200001e4 	.word	0x200001e4

08005d0c <send_telemetry>:

/* USART-TX: Send the packed telemetry */
void send_telemetry() {
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
	// Wait for current peripheral process to finish
	//while (HAL_UART_GetState(&huart4) != HAL_UART_STATE_READY);

	// send that shit
	BSP_LED_On(LED2);
 8005d10:	2001      	movs	r0, #1
 8005d12:	f000 fba7 	bl	8006464 <BSP_LED_On>
	if(HAL_UART_Transmit_DMA(&huart4, (uint8_t*) aTxBuffer, TXBUFFERSIZE) != HAL_OK) {
 8005d16:	221e      	movs	r2, #30
 8005d18:	490d      	ldr	r1, [pc, #52]	; (8005d50 <send_telemetry+0x44>)
 8005d1a:	480e      	ldr	r0, [pc, #56]	; (8005d54 <send_telemetry+0x48>)
 8005d1c:	f002 ff4a 	bl	8008bb4 <HAL_UART_Transmit_DMA>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d004      	beq.n	8005d30 <send_telemetry+0x24>
		errorType = 2;
 8005d26:	4b0c      	ldr	r3, [pc, #48]	; (8005d58 <send_telemetry+0x4c>)
 8005d28:	2202      	movs	r2, #2
 8005d2a:	601a      	str	r2, [r3, #0]
		Error_Handler(); /* Transfer error in transmission process */
 8005d2c:	f000 f9aa 	bl	8006084 <Error_Handler>
	}

	// Wait for current peripheral process to finish
	//while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
	while(UartReadyTX != SET);
 8005d30:	bf00      	nop
 8005d32:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <send_telemetry+0x50>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d1fa      	bne.n	8005d32 <send_telemetry+0x26>
	UartReadyTX = RESET;
 8005d3c:	4b07      	ldr	r3, [pc, #28]	; (8005d5c <send_telemetry+0x50>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	701a      	strb	r2, [r3, #0]
	txCount++;
 8005d42:	4b07      	ldr	r3, [pc, #28]	; (8005d60 <send_telemetry+0x54>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3301      	adds	r3, #1
 8005d48:	4a05      	ldr	r2, [pc, #20]	; (8005d60 <send_telemetry+0x54>)
 8005d4a:	6013      	str	r3, [r2, #0]
}
 8005d4c:	bf00      	nop
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	20000208 	.word	0x20000208
 8005d54:	200000b0 	.word	0x200000b0
 8005d58:	2000000c 	.word	0x2000000c
 8005d5c:	200000ac 	.word	0x200000ac
 8005d60:	200001dc 	.word	0x200001dc

08005d64 <receive_commands>:

/* USART-RX: Receive any incoming commands */
void receive_commands() {
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0
	// Wait for current peripheral process to finish
	while (UartReadyRX != SET);
 8005d68:	bf00      	nop
 8005d6a:	4b0e      	ldr	r3, [pc, #56]	; (8005da4 <receive_commands+0x40>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d1fa      	bne.n	8005d6a <receive_commands+0x6>
	UartReadyRX = RESET;
 8005d74:	4b0b      	ldr	r3, [pc, #44]	; (8005da4 <receive_commands+0x40>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	701a      	strb	r2, [r3, #0]

	BSP_LED_Off(LED3);
 8005d7a:	2002      	movs	r0, #2
 8005d7c:	f000 fb8c 	bl	8006498 <BSP_LED_Off>
	if (HAL_UART_Receive_DMA(&huart4, (uint8_t *) aRxBuffer, RXBUFFERSIZE) != HAL_OK) {
 8005d80:	221e      	movs	r2, #30
 8005d82:	4909      	ldr	r1, [pc, #36]	; (8005da8 <receive_commands+0x44>)
 8005d84:	4809      	ldr	r0, [pc, #36]	; (8005dac <receive_commands+0x48>)
 8005d86:	f002 ffa5 	bl	8008cd4 <HAL_UART_Receive_DMA>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <receive_commands+0x34>
		errorType = 3;
 8005d90:	4b07      	ldr	r3, [pc, #28]	; (8005db0 <receive_commands+0x4c>)
 8005d92:	2203      	movs	r2, #3
 8005d94:	601a      	str	r2, [r3, #0]
		return;
 8005d96:	e004      	b.n	8005da2 <receive_commands+0x3e>
		//Error_Handler(); /* Transfer error in reception process */
	}
	rxCount++;
 8005d98:	4b06      	ldr	r3, [pc, #24]	; (8005db4 <receive_commands+0x50>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	4a05      	ldr	r2, [pc, #20]	; (8005db4 <receive_commands+0x50>)
 8005da0:	6013      	str	r3, [r2, #0]
}
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	20000000 	.word	0x20000000
 8005da8:	200001e8 	.word	0x200001e8
 8005dac:	200000b0 	.word	0x200000b0
 8005db0:	2000000c 	.word	0x2000000c
 8005db4:	200001e0 	.word	0x200001e0

08005db8 <display_data_on_lcd>:

void display_data_on_lcd() {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
	char lcd_buf[5];

	// turn commands into string - commands
	LCD_Init();
 8005dbe:	f7fa fd43 	bl	8000848 <LCD_Init>
	LCD_Clear();
 8005dc2:	f7fa fcfb 	bl	80007bc <LCD_Clear>

	LCD_Set_Cursor(1, 1);
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	2001      	movs	r0, #1
 8005dca:	f7fa fd04 	bl	80007d6 <LCD_Set_Cursor>
	//LCD_Write_String("Gx: ");
	sprintf(lcd_buf, "%d", commands[0]);
 8005dce:	4b2d      	ldr	r3, [pc, #180]	; (8005e84 <display_data_on_lcd+0xcc>)
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	463b      	mov	r3, r7
 8005dd4:	492c      	ldr	r1, [pc, #176]	; (8005e88 <display_data_on_lcd+0xd0>)
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f004 fa70 	bl	800a2bc <siprintf>
	LCD_Write_String(lcd_buf);
 8005ddc:	463b      	mov	r3, r7
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fa fe84 	bl	8000aec <LCD_Write_String>

	LCD_Set_Cursor(1, 6);
 8005de4:	2106      	movs	r1, #6
 8005de6:	2001      	movs	r0, #1
 8005de8:	f7fa fcf5 	bl	80007d6 <LCD_Set_Cursor>
	//LCD_Write_String("Gy: ");
	sprintf(lcd_buf, "%d", commands[1]);
 8005dec:	4b25      	ldr	r3, [pc, #148]	; (8005e84 <display_data_on_lcd+0xcc>)
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	463b      	mov	r3, r7
 8005df2:	4925      	ldr	r1, [pc, #148]	; (8005e88 <display_data_on_lcd+0xd0>)
 8005df4:	4618      	mov	r0, r3
 8005df6:	f004 fa61 	bl	800a2bc <siprintf>
	LCD_Write_String(lcd_buf);
 8005dfa:	463b      	mov	r3, r7
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fa fe75 	bl	8000aec <LCD_Write_String>
	LCD_Set_Cursor(1, 11);
 8005e02:	210b      	movs	r1, #11
 8005e04:	2001      	movs	r0, #1
 8005e06:	f7fa fce6 	bl	80007d6 <LCD_Set_Cursor>
	sprintf(lcd_buf, "%d", commands[2]);
 8005e0a:	4b1e      	ldr	r3, [pc, #120]	; (8005e84 <display_data_on_lcd+0xcc>)
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	463b      	mov	r3, r7
 8005e10:	491d      	ldr	r1, [pc, #116]	; (8005e88 <display_data_on_lcd+0xd0>)
 8005e12:	4618      	mov	r0, r3
 8005e14:	f004 fa52 	bl	800a2bc <siprintf>
	LCD_Write_String(lcd_buf);
 8005e18:	463b      	mov	r3, r7
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fa fe66 	bl	8000aec <LCD_Write_String>

	LCD_Set_Cursor(2, 1);
 8005e20:	2101      	movs	r1, #1
 8005e22:	2002      	movs	r0, #2
 8005e24:	f7fa fcd7 	bl	80007d6 <LCD_Set_Cursor>
	sprintf(lcd_buf, "%d", commands[3]);
 8005e28:	4b16      	ldr	r3, [pc, #88]	; (8005e84 <display_data_on_lcd+0xcc>)
 8005e2a:	68da      	ldr	r2, [r3, #12]
 8005e2c:	463b      	mov	r3, r7
 8005e2e:	4916      	ldr	r1, [pc, #88]	; (8005e88 <display_data_on_lcd+0xd0>)
 8005e30:	4618      	mov	r0, r3
 8005e32:	f004 fa43 	bl	800a2bc <siprintf>
	LCD_Write_String(lcd_buf);
 8005e36:	463b      	mov	r3, r7
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fa fe57 	bl	8000aec <LCD_Write_String>
	LCD_Set_Cursor(2, 6);
 8005e3e:	2106      	movs	r1, #6
 8005e40:	2002      	movs	r0, #2
 8005e42:	f7fa fcc8 	bl	80007d6 <LCD_Set_Cursor>
	sprintf(lcd_buf, "%d", commands[4]);
 8005e46:	4b0f      	ldr	r3, [pc, #60]	; (8005e84 <display_data_on_lcd+0xcc>)
 8005e48:	691a      	ldr	r2, [r3, #16]
 8005e4a:	463b      	mov	r3, r7
 8005e4c:	490e      	ldr	r1, [pc, #56]	; (8005e88 <display_data_on_lcd+0xd0>)
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f004 fa34 	bl	800a2bc <siprintf>
	LCD_Write_String(lcd_buf);
 8005e54:	463b      	mov	r3, r7
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fa fe48 	bl	8000aec <LCD_Write_String>
	LCD_Set_Cursor(2, 11);
 8005e5c:	210b      	movs	r1, #11
 8005e5e:	2002      	movs	r0, #2
 8005e60:	f7fa fcb9 	bl	80007d6 <LCD_Set_Cursor>
	sprintf(lcd_buf, "%d", commands[5]);
 8005e64:	4b07      	ldr	r3, [pc, #28]	; (8005e84 <display_data_on_lcd+0xcc>)
 8005e66:	695a      	ldr	r2, [r3, #20]
 8005e68:	463b      	mov	r3, r7
 8005e6a:	4907      	ldr	r1, [pc, #28]	; (8005e88 <display_data_on_lcd+0xd0>)
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f004 fa25 	bl	800a2bc <siprintf>
	LCD_Write_String(lcd_buf);
 8005e72:	463b      	mov	r3, r7
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fa fe39 	bl	8000aec <LCD_Write_String>

}
 8005e7a:	bf00      	nop
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	200001c4 	.word	0x200001c4
 8005e88:	0800abdc 	.word	0x0800abdc

08005e8c <do_something_with_commands>:

void do_something_with_commands() {
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
	// for @codydeyarmin to implement for drone control
	// for @VRteam and @Akiva to implement for gimble control
}
 8005e90:	bf00      	nop
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b096      	sub	sp, #88	; 0x58
 8005e9e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ea0:	f107 0314 	add.w	r3, r7, #20
 8005ea4:	2244      	movs	r2, #68	; 0x44
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f004 f9ff 	bl	800a2ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005eae:	463b      	mov	r3, r7
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	605a      	str	r2, [r3, #4]
 8005eb6:	609a      	str	r2, [r3, #8]
 8005eb8:	60da      	str	r2, [r3, #12]
 8005eba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005ebc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005ec0:	f001 fa92 	bl	80073e8 <HAL_PWREx_ControlVoltageScaling>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005eca:	f000 f8db 	bl	8006084 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005ece:	2310      	movs	r3, #16
 8005ed0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005eda:	2360      	movs	r3, #96	; 0x60
 8005edc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ee2:	f107 0314 	add.w	r3, r7, #20
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 fad4 	bl	8007494 <HAL_RCC_OscConfig>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8005ef2:	f000 f8c7 	bl	8006084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005ef6:	230f      	movs	r3, #15
 8005ef8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8005efa:	2300      	movs	r3, #0
 8005efc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005f02:	2300      	movs	r3, #0
 8005f04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005f06:	2300      	movs	r3, #0
 8005f08:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8005f0a:	463b      	mov	r3, r7
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f001 feda 	bl	8007cc8 <HAL_RCC_ClockConfig>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <SystemClock_Config+0x84>
    Error_Handler();
 8005f1a:	f000 f8b3 	bl	8006084 <Error_Handler>
  }
}
 8005f1e:	bf00      	nop
 8005f20:	3758      	adds	r7, #88	; 0x58
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
	...

08005f28 <HAL_UART_TxCpltCallback>:
  * @param  UartHandle: UART handle.
  * @note   This example shows a simple way to report end of DMA Tx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete*/
	UartReadyTX = SET;
 8005f30:	4b04      	ldr	r3, [pc, #16]	; (8005f44 <HAL_UART_TxCpltCallback+0x1c>)
 8005f32:	2201      	movs	r2, #1
 8005f34:	701a      	strb	r2, [r3, #0]
  /* Turn LED1 on: Transfer in transmission process is correct */
	BSP_LED_On(LED3);
 8005f36:	2002      	movs	r0, #2
 8005f38:	f000 fa94 	bl	8006464 <BSP_LED_On>
}
 8005f3c:	bf00      	nop
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	200000ac 	.word	0x200000ac

08005f48 <HAL_UART_RxCpltCallback>:
  * @param  UartHandle: UART handle
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete*/
	UartReadyRX = SET;
 8005f50:	4b04      	ldr	r3, [pc, #16]	; (8005f64 <HAL_UART_RxCpltCallback+0x1c>)
 8005f52:	2201      	movs	r2, #1
 8005f54:	701a      	strb	r2, [r3, #0]

  /* Turn LED1 on: Transfer in reception process is correct */
	BSP_LED_On(LED3);
 8005f56:	2002      	movs	r0, #2
 8005f58:	f000 fa84 	bl	8006464 <BSP_LED_On>
}
 8005f5c:	bf00      	nop
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	20000000 	.word	0x20000000

08005f68 <MX_UART4_Init>:


static void MX_UART4_Init(void) {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  huart4.Instance = UART4;
 8005f6c:	4b18      	ldr	r3, [pc, #96]	; (8005fd0 <MX_UART4_Init+0x68>)
 8005f6e:	4a19      	ldr	r2, [pc, #100]	; (8005fd4 <MX_UART4_Init+0x6c>)
 8005f70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8005f72:	4b17      	ldr	r3, [pc, #92]	; (8005fd0 <MX_UART4_Init+0x68>)
 8005f74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005f78:	605a      	str	r2, [r3, #4]
  //huart4.Init.BaudRate = 250000;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005f7a:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <MX_UART4_Init+0x68>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005f80:	4b13      	ldr	r3, [pc, #76]	; (8005fd0 <MX_UART4_Init+0x68>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005f86:	4b12      	ldr	r3, [pc, #72]	; (8005fd0 <MX_UART4_Init+0x68>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005f8c:	4b10      	ldr	r3, [pc, #64]	; (8005fd0 <MX_UART4_Init+0x68>)
 8005f8e:	220c      	movs	r2, #12
 8005f90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f92:	4b0f      	ldr	r3, [pc, #60]	; (8005fd0 <MX_UART4_Init+0x68>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f98:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <MX_UART4_Init+0x68>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f9e:	4b0c      	ldr	r3, [pc, #48]	; (8005fd0 <MX_UART4_Init+0x68>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005fa4:	4b0a      	ldr	r3, [pc, #40]	; (8005fd0 <MX_UART4_Init+0x68>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_UART_DeInit(&huart4) != HAL_OK){
 8005faa:	4809      	ldr	r0, [pc, #36]	; (8005fd0 <MX_UART4_Init+0x68>)
 8005fac:	f002 fdc8 	bl	8008b40 <HAL_UART_DeInit>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <MX_UART4_Init+0x52>
    Error_Handler();
 8005fb6:	f000 f865 	bl	8006084 <Error_Handler>
  }
  if (HAL_UART_Init(&huart4) != HAL_OK) {
 8005fba:	4805      	ldr	r0, [pc, #20]	; (8005fd0 <MX_UART4_Init+0x68>)
 8005fbc:	f002 fd72 	bl	8008aa4 <HAL_UART_Init>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <MX_UART4_Init+0x62>
    Error_Handler();
 8005fc6:	f000 f85d 	bl	8006084 <Error_Handler>
  }

}
 8005fca:	bf00      	nop
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	200000b0 	.word	0x200000b0
 8005fd4:	40004c00 	.word	0x40004c00

08005fd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) {
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005fde:	4b10      	ldr	r3, [pc, #64]	; (8006020 <MX_DMA_Init+0x48>)
 8005fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fe2:	4a0f      	ldr	r2, [pc, #60]	; (8006020 <MX_DMA_Init+0x48>)
 8005fe4:	f043 0302 	orr.w	r3, r3, #2
 8005fe8:	6493      	str	r3, [r2, #72]	; 0x48
 8005fea:	4b0d      	ldr	r3, [pc, #52]	; (8006020 <MX_DMA_Init+0x48>)
 8005fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	607b      	str	r3, [r7, #4]
 8005ff4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	203a      	movs	r0, #58	; 0x3a
 8005ffc:	f000 fbfd 	bl	80067fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8006000:	203a      	movs	r0, #58	; 0x3a
 8006002:	f000 fc16 	bl	8006832 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8006006:	2200      	movs	r2, #0
 8006008:	2100      	movs	r1, #0
 800600a:	203c      	movs	r0, #60	; 0x3c
 800600c:	f000 fbf5 	bl	80067fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8006010:	203c      	movs	r0, #60	; 0x3c
 8006012:	f000 fc0e 	bl	8006832 <HAL_NVIC_EnableIRQ>
}
 8006016:	bf00      	nop
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	40021000 	.word	0x40021000

08006024 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800602a:	4b15      	ldr	r3, [pc, #84]	; (8006080 <MX_GPIO_Init+0x5c>)
 800602c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800602e:	4a14      	ldr	r2, [pc, #80]	; (8006080 <MX_GPIO_Init+0x5c>)
 8006030:	f043 0304 	orr.w	r3, r3, #4
 8006034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006036:	4b12      	ldr	r3, [pc, #72]	; (8006080 <MX_GPIO_Init+0x5c>)
 8006038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800603a:	f003 0304 	and.w	r3, r3, #4
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006042:	4b0f      	ldr	r3, [pc, #60]	; (8006080 <MX_GPIO_Init+0x5c>)
 8006044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006046:	4a0e      	ldr	r2, [pc, #56]	; (8006080 <MX_GPIO_Init+0x5c>)
 8006048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800604c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800604e:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <MX_GPIO_Init+0x5c>)
 8006050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006056:	60bb      	str	r3, [r7, #8]
 8006058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800605a:	4b09      	ldr	r3, [pc, #36]	; (8006080 <MX_GPIO_Init+0x5c>)
 800605c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800605e:	4a08      	ldr	r2, [pc, #32]	; (8006080 <MX_GPIO_Init+0x5c>)
 8006060:	f043 0301 	orr.w	r3, r3, #1
 8006064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006066:	4b06      	ldr	r3, [pc, #24]	; (8006080 <MX_GPIO_Init+0x5c>)
 8006068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	607b      	str	r3, [r7, #4]
 8006070:	687b      	ldr	r3, [r7, #4]
}
 8006072:	bf00      	nop
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40021000 	.word	0x40021000

08006084 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void){
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006088:	b672      	cpsid	i
}
 800608a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1);
 800608c:	e7fe      	b.n	800608c <Error_Handler+0x8>
	...

08006090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006096:	4b0f      	ldr	r3, [pc, #60]	; (80060d4 <HAL_MspInit+0x44>)
 8006098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800609a:	4a0e      	ldr	r2, [pc, #56]	; (80060d4 <HAL_MspInit+0x44>)
 800609c:	f043 0301 	orr.w	r3, r3, #1
 80060a0:	6613      	str	r3, [r2, #96]	; 0x60
 80060a2:	4b0c      	ldr	r3, [pc, #48]	; (80060d4 <HAL_MspInit+0x44>)
 80060a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	607b      	str	r3, [r7, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80060ae:	4b09      	ldr	r3, [pc, #36]	; (80060d4 <HAL_MspInit+0x44>)
 80060b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b2:	4a08      	ldr	r2, [pc, #32]	; (80060d4 <HAL_MspInit+0x44>)
 80060b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060b8:	6593      	str	r3, [r2, #88]	; 0x58
 80060ba:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <HAL_MspInit+0x44>)
 80060bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80060c6:	bf00      	nop
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40021000 	.word	0x40021000

080060d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b0ac      	sub	sp, #176	; 0xb0
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	605a      	str	r2, [r3, #4]
 80060ea:	609a      	str	r2, [r3, #8]
 80060ec:	60da      	str	r2, [r3, #12]
 80060ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80060f0:	f107 0310 	add.w	r3, r7, #16
 80060f4:	228c      	movs	r2, #140	; 0x8c
 80060f6:	2100      	movs	r1, #0
 80060f8:	4618      	mov	r0, r3
 80060fa:	f004 f8d7 	bl	800a2ac <memset>
  if(huart->Instance==UART4)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a4f      	ldr	r2, [pc, #316]	; (8006240 <HAL_UART_MspInit+0x168>)
 8006104:	4293      	cmp	r3, r2
 8006106:	f040 8096 	bne.w	8006236 <HAL_UART_MspInit+0x15e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800610a:	2308      	movs	r3, #8
 800610c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800610e:	2300      	movs	r3, #0
 8006110:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006112:	f107 0310 	add.w	r3, r7, #16
 8006116:	4618      	mov	r0, r3
 8006118:	f001 fffa 	bl	8008110 <HAL_RCCEx_PeriphCLKConfig>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006122:	f7ff ffaf 	bl	8006084 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006126:	4b47      	ldr	r3, [pc, #284]	; (8006244 <HAL_UART_MspInit+0x16c>)
 8006128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612a:	4a46      	ldr	r2, [pc, #280]	; (8006244 <HAL_UART_MspInit+0x16c>)
 800612c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006130:	6593      	str	r3, [r2, #88]	; 0x58
 8006132:	4b44      	ldr	r3, [pc, #272]	; (8006244 <HAL_UART_MspInit+0x16c>)
 8006134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006136:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800613e:	4b41      	ldr	r3, [pc, #260]	; (8006244 <HAL_UART_MspInit+0x16c>)
 8006140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006142:	4a40      	ldr	r2, [pc, #256]	; (8006244 <HAL_UART_MspInit+0x16c>)
 8006144:	f043 0301 	orr.w	r3, r3, #1
 8006148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800614a:	4b3e      	ldr	r3, [pc, #248]	; (8006244 <HAL_UART_MspInit+0x16c>)
 800614c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	60bb      	str	r3, [r7, #8]
 8006154:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006156:	2303      	movs	r3, #3
 8006158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800615c:	2302      	movs	r3, #2
 800615e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006162:	2300      	movs	r3, #0
 8006164:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006168:	2303      	movs	r3, #3
 800616a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800616e:	2308      	movs	r3, #8
 8006170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006174:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006178:	4619      	mov	r1, r3
 800617a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800617e:	f000 fe89 	bl	8006e94 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8006182:	4b31      	ldr	r3, [pc, #196]	; (8006248 <HAL_UART_MspInit+0x170>)
 8006184:	4a31      	ldr	r2, [pc, #196]	; (800624c <HAL_UART_MspInit+0x174>)
 8006186:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8006188:	4b2f      	ldr	r3, [pc, #188]	; (8006248 <HAL_UART_MspInit+0x170>)
 800618a:	2202      	movs	r2, #2
 800618c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800618e:	4b2e      	ldr	r3, [pc, #184]	; (8006248 <HAL_UART_MspInit+0x170>)
 8006190:	2200      	movs	r2, #0
 8006192:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006194:	4b2c      	ldr	r3, [pc, #176]	; (8006248 <HAL_UART_MspInit+0x170>)
 8006196:	2200      	movs	r2, #0
 8006198:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800619a:	4b2b      	ldr	r3, [pc, #172]	; (8006248 <HAL_UART_MspInit+0x170>)
 800619c:	2280      	movs	r2, #128	; 0x80
 800619e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061a0:	4b29      	ldr	r3, [pc, #164]	; (8006248 <HAL_UART_MspInit+0x170>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061a6:	4b28      	ldr	r3, [pc, #160]	; (8006248 <HAL_UART_MspInit+0x170>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80061ac:	4b26      	ldr	r3, [pc, #152]	; (8006248 <HAL_UART_MspInit+0x170>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80061b2:	4b25      	ldr	r3, [pc, #148]	; (8006248 <HAL_UART_MspInit+0x170>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80061b8:	4823      	ldr	r0, [pc, #140]	; (8006248 <HAL_UART_MspInit+0x170>)
 80061ba:	f000 fb63 	bl	8006884 <HAL_DMA_Init>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80061c4:	f7ff ff5e 	bl	8006084 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a1f      	ldr	r2, [pc, #124]	; (8006248 <HAL_UART_MspInit+0x170>)
 80061cc:	671a      	str	r2, [r3, #112]	; 0x70
 80061ce:	4a1e      	ldr	r2, [pc, #120]	; (8006248 <HAL_UART_MspInit+0x170>)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 80061d4:	4b1e      	ldr	r3, [pc, #120]	; (8006250 <HAL_UART_MspInit+0x178>)
 80061d6:	4a1f      	ldr	r2, [pc, #124]	; (8006254 <HAL_UART_MspInit+0x17c>)
 80061d8:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 80061da:	4b1d      	ldr	r3, [pc, #116]	; (8006250 <HAL_UART_MspInit+0x178>)
 80061dc:	2202      	movs	r2, #2
 80061de:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061e0:	4b1b      	ldr	r3, [pc, #108]	; (8006250 <HAL_UART_MspInit+0x178>)
 80061e2:	2210      	movs	r2, #16
 80061e4:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061e6:	4b1a      	ldr	r3, [pc, #104]	; (8006250 <HAL_UART_MspInit+0x178>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80061ec:	4b18      	ldr	r3, [pc, #96]	; (8006250 <HAL_UART_MspInit+0x178>)
 80061ee:	2280      	movs	r2, #128	; 0x80
 80061f0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061f2:	4b17      	ldr	r3, [pc, #92]	; (8006250 <HAL_UART_MspInit+0x178>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061f8:	4b15      	ldr	r3, [pc, #84]	; (8006250 <HAL_UART_MspInit+0x178>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80061fe:	4b14      	ldr	r3, [pc, #80]	; (8006250 <HAL_UART_MspInit+0x178>)
 8006200:	2200      	movs	r2, #0
 8006202:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006204:	4b12      	ldr	r3, [pc, #72]	; (8006250 <HAL_UART_MspInit+0x178>)
 8006206:	2200      	movs	r2, #0
 8006208:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800620a:	4811      	ldr	r0, [pc, #68]	; (8006250 <HAL_UART_MspInit+0x178>)
 800620c:	f000 fb3a 	bl	8006884 <HAL_DMA_Init>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8006216:	f7ff ff35 	bl	8006084 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a0c      	ldr	r2, [pc, #48]	; (8006250 <HAL_UART_MspInit+0x178>)
 800621e:	66da      	str	r2, [r3, #108]	; 0x6c
 8006220:	4a0b      	ldr	r2, [pc, #44]	; (8006250 <HAL_UART_MspInit+0x178>)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8006226:	2200      	movs	r2, #0
 8006228:	2100      	movs	r1, #0
 800622a:	2034      	movs	r0, #52	; 0x34
 800622c:	f000 fae5 	bl	80067fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006230:	2034      	movs	r0, #52	; 0x34
 8006232:	f000 fafe 	bl	8006832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8006236:	bf00      	nop
 8006238:	37b0      	adds	r7, #176	; 0xb0
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40004c00 	.word	0x40004c00
 8006244:	40021000 	.word	0x40021000
 8006248:	20000134 	.word	0x20000134
 800624c:	40020458 	.word	0x40020458
 8006250:	2000017c 	.word	0x2000017c
 8006254:	40020430 	.word	0x40020430

08006258 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a0f      	ldr	r2, [pc, #60]	; (80062a4 <HAL_UART_MspDeInit+0x4c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d117      	bne.n	800629a <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 800626a:	4b0f      	ldr	r3, [pc, #60]	; (80062a8 <HAL_UART_MspDeInit+0x50>)
 800626c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800626e:	4a0e      	ldr	r2, [pc, #56]	; (80062a8 <HAL_UART_MspDeInit+0x50>)
 8006270:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006274:	6593      	str	r3, [r2, #88]	; 0x58

    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8006276:	2103      	movs	r1, #3
 8006278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800627c:	f000 ff9c 	bl	80071b8 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006284:	4618      	mov	r0, r3
 8006286:	f000 fbb5 	bl	80069f4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fbb0 	bl	80069f4 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8006294:	2034      	movs	r0, #52	; 0x34
 8006296:	f000 fada 	bl	800684e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }

}
 800629a:	bf00      	nop
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	40004c00 	.word	0x40004c00
 80062a8:	40021000 	.word	0x40021000

080062ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80062b0:	e7fe      	b.n	80062b0 <NMI_Handler+0x4>

080062b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062b2:	b480      	push	{r7}
 80062b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80062b6:	e7fe      	b.n	80062b6 <HardFault_Handler+0x4>

080062b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80062bc:	e7fe      	b.n	80062bc <MemManage_Handler+0x4>

080062be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80062be:	b480      	push	{r7}
 80062c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80062c2:	e7fe      	b.n	80062c2 <BusFault_Handler+0x4>

080062c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80062c8:	e7fe      	b.n	80062c8 <UsageFault_Handler+0x4>

080062ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80062ca:	b480      	push	{r7}
 80062cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80062ce:	bf00      	nop
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80062d8:	b480      	push	{r7}
 80062da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80062dc:	bf00      	nop
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80062e6:	b480      	push	{r7}
 80062e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80062ea:	bf00      	nop
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80062f8:	f000 f93c 	bl	8006574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80062fc:	bf00      	nop
 80062fe:	bd80      	pop	{r7, pc}

08006300 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006304:	4802      	ldr	r0, [pc, #8]	; (8006310 <UART4_IRQHandler+0x10>)
 8006306:	f002 fd3b 	bl	8008d80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800630a:	bf00      	nop
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	200000b0 	.word	0x200000b0

08006314 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8006318:	4802      	ldr	r0, [pc, #8]	; (8006324 <DMA2_Channel3_IRQHandler+0x10>)
 800631a:	f000 fcdc 	bl	8006cd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800631e:	bf00      	nop
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	2000017c 	.word	0x2000017c

08006328 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800632c:	4802      	ldr	r0, [pc, #8]	; (8006338 <DMA2_Channel5_IRQHandler+0x10>)
 800632e:	f000 fcd2 	bl	8006cd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8006332:	bf00      	nop
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	20000134 	.word	0x20000134

0800633c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006344:	4a14      	ldr	r2, [pc, #80]	; (8006398 <_sbrk+0x5c>)
 8006346:	4b15      	ldr	r3, [pc, #84]	; (800639c <_sbrk+0x60>)
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006350:	4b13      	ldr	r3, [pc, #76]	; (80063a0 <_sbrk+0x64>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d102      	bne.n	800635e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006358:	4b11      	ldr	r3, [pc, #68]	; (80063a0 <_sbrk+0x64>)
 800635a:	4a12      	ldr	r2, [pc, #72]	; (80063a4 <_sbrk+0x68>)
 800635c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800635e:	4b10      	ldr	r3, [pc, #64]	; (80063a0 <_sbrk+0x64>)
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4413      	add	r3, r2
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	429a      	cmp	r2, r3
 800636a:	d207      	bcs.n	800637c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800636c:	f003 ff66 	bl	800a23c <__errno>
 8006370:	4603      	mov	r3, r0
 8006372:	220c      	movs	r2, #12
 8006374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006376:	f04f 33ff 	mov.w	r3, #4294967295
 800637a:	e009      	b.n	8006390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800637c:	4b08      	ldr	r3, [pc, #32]	; (80063a0 <_sbrk+0x64>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006382:	4b07      	ldr	r3, [pc, #28]	; (80063a0 <_sbrk+0x64>)
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4413      	add	r3, r2
 800638a:	4a05      	ldr	r2, [pc, #20]	; (80063a0 <_sbrk+0x64>)
 800638c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800638e:	68fb      	ldr	r3, [r7, #12]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	20050000 	.word	0x20050000
 800639c:	00000400 	.word	0x00000400
 80063a0:	20000298 	.word	0x20000298
 80063a4:	200002b0 	.word	0x200002b0

080063a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80063a8:	b480      	push	{r7}
 80063aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80063ac:	4b06      	ldr	r3, [pc, #24]	; (80063c8 <SystemInit+0x20>)
 80063ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b2:	4a05      	ldr	r2, [pc, #20]	; (80063c8 <SystemInit+0x20>)
 80063b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80063bc:	bf00      	nop
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	e000ed00 	.word	0xe000ed00

080063cc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08a      	sub	sp, #40	; 0x28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	4603      	mov	r3, r0
 80063d4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80063d6:	79fb      	ldrb	r3, [r7, #7]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10c      	bne.n	80063f6 <BSP_LED_Init+0x2a>
 80063dc:	4b1e      	ldr	r3, [pc, #120]	; (8006458 <BSP_LED_Init+0x8c>)
 80063de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e0:	4a1d      	ldr	r2, [pc, #116]	; (8006458 <BSP_LED_Init+0x8c>)
 80063e2:	f043 0304 	orr.w	r3, r3, #4
 80063e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063e8:	4b1b      	ldr	r3, [pc, #108]	; (8006458 <BSP_LED_Init+0x8c>)
 80063ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ec:	f003 0304 	and.w	r3, r3, #4
 80063f0:	613b      	str	r3, [r7, #16]
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	e00b      	b.n	800640e <BSP_LED_Init+0x42>
 80063f6:	4b18      	ldr	r3, [pc, #96]	; (8006458 <BSP_LED_Init+0x8c>)
 80063f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063fa:	4a17      	ldr	r2, [pc, #92]	; (8006458 <BSP_LED_Init+0x8c>)
 80063fc:	f043 0302 	orr.w	r3, r3, #2
 8006400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006402:	4b15      	ldr	r3, [pc, #84]	; (8006458 <BSP_LED_Init+0x8c>)
 8006404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800640e:	79fb      	ldrb	r3, [r7, #7]
 8006410:	4a12      	ldr	r2, [pc, #72]	; (800645c <BSP_LED_Init+0x90>)
 8006412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006418:	2301      	movs	r3, #1
 800641a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800641c:	2300      	movs	r3, #0
 800641e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006420:	2302      	movs	r3, #2
 8006422:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8006424:	79fb      	ldrb	r3, [r7, #7]
 8006426:	4a0e      	ldr	r2, [pc, #56]	; (8006460 <BSP_LED_Init+0x94>)
 8006428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800642c:	f107 0214 	add.w	r2, r7, #20
 8006430:	4611      	mov	r1, r2
 8006432:	4618      	mov	r0, r3
 8006434:	f000 fd2e 	bl	8006e94 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	4a09      	ldr	r2, [pc, #36]	; (8006460 <BSP_LED_Init+0x94>)
 800643c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006440:	79fb      	ldrb	r3, [r7, #7]
 8006442:	4a06      	ldr	r2, [pc, #24]	; (800645c <BSP_LED_Init+0x90>)
 8006444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006448:	2200      	movs	r2, #0
 800644a:	4619      	mov	r1, r3
 800644c:	f000 ffa6 	bl	800739c <HAL_GPIO_WritePin>
}
 8006450:	bf00      	nop
 8006452:	3728      	adds	r7, #40	; 0x28
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	40021000 	.word	0x40021000
 800645c:	0800ac3c 	.word	0x0800ac3c
 8006460:	20000014 	.word	0x20000014

08006464 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	4603      	mov	r3, r0
 800646c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800646e:	79fb      	ldrb	r3, [r7, #7]
 8006470:	4a07      	ldr	r2, [pc, #28]	; (8006490 <BSP_LED_On+0x2c>)
 8006472:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006476:	79fb      	ldrb	r3, [r7, #7]
 8006478:	4a06      	ldr	r2, [pc, #24]	; (8006494 <BSP_LED_On+0x30>)
 800647a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800647e:	2201      	movs	r2, #1
 8006480:	4619      	mov	r1, r3
 8006482:	f000 ff8b 	bl	800739c <HAL_GPIO_WritePin>
}
 8006486:	bf00      	nop
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000014 	.word	0x20000014
 8006494:	0800ac3c 	.word	0x0800ac3c

08006498 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	4603      	mov	r3, r0
 80064a0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80064a2:	79fb      	ldrb	r3, [r7, #7]
 80064a4:	4a07      	ldr	r2, [pc, #28]	; (80064c4 <BSP_LED_Off+0x2c>)
 80064a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80064aa:	79fb      	ldrb	r3, [r7, #7]
 80064ac:	4a06      	ldr	r2, [pc, #24]	; (80064c8 <BSP_LED_Off+0x30>)
 80064ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064b2:	2200      	movs	r2, #0
 80064b4:	4619      	mov	r1, r3
 80064b6:	f000 ff71 	bl	800739c <HAL_GPIO_WritePin>
}
 80064ba:	bf00      	nop
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20000014 	.word	0x20000014
 80064c8:	0800ac3c 	.word	0x0800ac3c

080064cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064d6:	2003      	movs	r0, #3
 80064d8:	f000 f984 	bl	80067e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80064dc:	200f      	movs	r0, #15
 80064de:	f000 f80d 	bl	80064fc <HAL_InitTick>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	71fb      	strb	r3, [r7, #7]
 80064ec:	e001      	b.n	80064f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80064ee:	f7ff fdcf 	bl	8006090 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80064f2:	79fb      	ldrb	r3, [r7, #7]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006508:	4b17      	ldr	r3, [pc, #92]	; (8006568 <HAL_InitTick+0x6c>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d023      	beq.n	8006558 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006510:	4b16      	ldr	r3, [pc, #88]	; (800656c <HAL_InitTick+0x70>)
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	4b14      	ldr	r3, [pc, #80]	; (8006568 <HAL_InitTick+0x6c>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	4619      	mov	r1, r3
 800651a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800651e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006522:	fbb2 f3f3 	udiv	r3, r2, r3
 8006526:	4618      	mov	r0, r3
 8006528:	f000 f99f 	bl	800686a <HAL_SYSTICK_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10f      	bne.n	8006552 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b0f      	cmp	r3, #15
 8006536:	d809      	bhi.n	800654c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006538:	2200      	movs	r2, #0
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	f04f 30ff 	mov.w	r0, #4294967295
 8006540:	f000 f95b 	bl	80067fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006544:	4a0a      	ldr	r2, [pc, #40]	; (8006570 <HAL_InitTick+0x74>)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	e007      	b.n	800655c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	73fb      	strb	r3, [r7, #15]
 8006550:	e004      	b.n	800655c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	73fb      	strb	r3, [r7, #15]
 8006556:	e001      	b.n	800655c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800655c:	7bfb      	ldrb	r3, [r7, #15]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	20000024 	.word	0x20000024
 800656c:	20000010 	.word	0x20000010
 8006570:	20000020 	.word	0x20000020

08006574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006578:	4b06      	ldr	r3, [pc, #24]	; (8006594 <HAL_IncTick+0x20>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	461a      	mov	r2, r3
 800657e:	4b06      	ldr	r3, [pc, #24]	; (8006598 <HAL_IncTick+0x24>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4413      	add	r3, r2
 8006584:	4a04      	ldr	r2, [pc, #16]	; (8006598 <HAL_IncTick+0x24>)
 8006586:	6013      	str	r3, [r2, #0]
}
 8006588:	bf00      	nop
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	20000024 	.word	0x20000024
 8006598:	2000029c 	.word	0x2000029c

0800659c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
  return uwTick;
 80065a0:	4b03      	ldr	r3, [pc, #12]	; (80065b0 <HAL_GetTick+0x14>)
 80065a2:	681b      	ldr	r3, [r3, #0]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	2000029c 	.word	0x2000029c

080065b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80065bc:	f7ff ffee 	bl	800659c <HAL_GetTick>
 80065c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065cc:	d005      	beq.n	80065da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80065ce:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <HAL_Delay+0x44>)
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80065da:	bf00      	nop
 80065dc:	f7ff ffde 	bl	800659c <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d8f7      	bhi.n	80065dc <HAL_Delay+0x28>
  {
  }
}
 80065ec:	bf00      	nop
 80065ee:	bf00      	nop
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000024 	.word	0x20000024

080065fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800660c:	4b0c      	ldr	r3, [pc, #48]	; (8006640 <__NVIC_SetPriorityGrouping+0x44>)
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006618:	4013      	ands	r3, r2
 800661a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800662c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800662e:	4a04      	ldr	r2, [pc, #16]	; (8006640 <__NVIC_SetPriorityGrouping+0x44>)
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	60d3      	str	r3, [r2, #12]
}
 8006634:	bf00      	nop
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	e000ed00 	.word	0xe000ed00

08006644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006648:	4b04      	ldr	r3, [pc, #16]	; (800665c <__NVIC_GetPriorityGrouping+0x18>)
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	0a1b      	lsrs	r3, r3, #8
 800664e:	f003 0307 	and.w	r3, r3, #7
}
 8006652:	4618      	mov	r0, r3
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	e000ed00 	.word	0xe000ed00

08006660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	4603      	mov	r3, r0
 8006668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800666a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800666e:	2b00      	cmp	r3, #0
 8006670:	db0b      	blt.n	800668a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006672:	79fb      	ldrb	r3, [r7, #7]
 8006674:	f003 021f 	and.w	r2, r3, #31
 8006678:	4907      	ldr	r1, [pc, #28]	; (8006698 <__NVIC_EnableIRQ+0x38>)
 800667a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800667e:	095b      	lsrs	r3, r3, #5
 8006680:	2001      	movs	r0, #1
 8006682:	fa00 f202 	lsl.w	r2, r0, r2
 8006686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800668a:	bf00      	nop
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	e000e100 	.word	0xe000e100

0800669c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	4603      	mov	r3, r0
 80066a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	db12      	blt.n	80066d4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066ae:	79fb      	ldrb	r3, [r7, #7]
 80066b0:	f003 021f 	and.w	r2, r3, #31
 80066b4:	490a      	ldr	r1, [pc, #40]	; (80066e0 <__NVIC_DisableIRQ+0x44>)
 80066b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ba:	095b      	lsrs	r3, r3, #5
 80066bc:	2001      	movs	r0, #1
 80066be:	fa00 f202 	lsl.w	r2, r0, r2
 80066c2:	3320      	adds	r3, #32
 80066c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80066c8:	f3bf 8f4f 	dsb	sy
}
 80066cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80066ce:	f3bf 8f6f 	isb	sy
}
 80066d2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	e000e100 	.word	0xe000e100

080066e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	4603      	mov	r3, r0
 80066ec:	6039      	str	r1, [r7, #0]
 80066ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	db0a      	blt.n	800670e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	490c      	ldr	r1, [pc, #48]	; (8006730 <__NVIC_SetPriority+0x4c>)
 80066fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006702:	0112      	lsls	r2, r2, #4
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	440b      	add	r3, r1
 8006708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800670c:	e00a      	b.n	8006724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	b2da      	uxtb	r2, r3
 8006712:	4908      	ldr	r1, [pc, #32]	; (8006734 <__NVIC_SetPriority+0x50>)
 8006714:	79fb      	ldrb	r3, [r7, #7]
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	3b04      	subs	r3, #4
 800671c:	0112      	lsls	r2, r2, #4
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	440b      	add	r3, r1
 8006722:	761a      	strb	r2, [r3, #24]
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	e000e100 	.word	0xe000e100
 8006734:	e000ed00 	.word	0xe000ed00

08006738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006738:	b480      	push	{r7}
 800673a:	b089      	sub	sp, #36	; 0x24
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f1c3 0307 	rsb	r3, r3, #7
 8006752:	2b04      	cmp	r3, #4
 8006754:	bf28      	it	cs
 8006756:	2304      	movcs	r3, #4
 8006758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	3304      	adds	r3, #4
 800675e:	2b06      	cmp	r3, #6
 8006760:	d902      	bls.n	8006768 <NVIC_EncodePriority+0x30>
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	3b03      	subs	r3, #3
 8006766:	e000      	b.n	800676a <NVIC_EncodePriority+0x32>
 8006768:	2300      	movs	r3, #0
 800676a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800676c:	f04f 32ff 	mov.w	r2, #4294967295
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	fa02 f303 	lsl.w	r3, r2, r3
 8006776:	43da      	mvns	r2, r3
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	401a      	ands	r2, r3
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006780:	f04f 31ff 	mov.w	r1, #4294967295
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	fa01 f303 	lsl.w	r3, r1, r3
 800678a:	43d9      	mvns	r1, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006790:	4313      	orrs	r3, r2
         );
}
 8006792:	4618      	mov	r0, r3
 8006794:	3724      	adds	r7, #36	; 0x24
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
	...

080067a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067b0:	d301      	bcc.n	80067b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80067b2:	2301      	movs	r3, #1
 80067b4:	e00f      	b.n	80067d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067b6:	4a0a      	ldr	r2, [pc, #40]	; (80067e0 <SysTick_Config+0x40>)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	3b01      	subs	r3, #1
 80067bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067be:	210f      	movs	r1, #15
 80067c0:	f04f 30ff 	mov.w	r0, #4294967295
 80067c4:	f7ff ff8e 	bl	80066e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067c8:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <SysTick_Config+0x40>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067ce:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <SysTick_Config+0x40>)
 80067d0:	2207      	movs	r2, #7
 80067d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	e000e010 	.word	0xe000e010

080067e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f7ff ff05 	bl	80065fc <__NVIC_SetPriorityGrouping>
}
 80067f2:	bf00      	nop
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b086      	sub	sp, #24
 80067fe:	af00      	add	r7, sp, #0
 8006800:	4603      	mov	r3, r0
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	607a      	str	r2, [r7, #4]
 8006806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006808:	2300      	movs	r3, #0
 800680a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800680c:	f7ff ff1a 	bl	8006644 <__NVIC_GetPriorityGrouping>
 8006810:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	68b9      	ldr	r1, [r7, #8]
 8006816:	6978      	ldr	r0, [r7, #20]
 8006818:	f7ff ff8e 	bl	8006738 <NVIC_EncodePriority>
 800681c:	4602      	mov	r2, r0
 800681e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006822:	4611      	mov	r1, r2
 8006824:	4618      	mov	r0, r3
 8006826:	f7ff ff5d 	bl	80066e4 <__NVIC_SetPriority>
}
 800682a:	bf00      	nop
 800682c:	3718      	adds	r7, #24
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b082      	sub	sp, #8
 8006836:	af00      	add	r7, sp, #0
 8006838:	4603      	mov	r3, r0
 800683a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800683c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006840:	4618      	mov	r0, r3
 8006842:	f7ff ff0d 	bl	8006660 <__NVIC_EnableIRQ>
}
 8006846:	bf00      	nop
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b082      	sub	sp, #8
 8006852:	af00      	add	r7, sp, #0
 8006854:	4603      	mov	r3, r0
 8006856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff ff1d 	bl	800669c <__NVIC_DisableIRQ>
}
 8006862:	bf00      	nop
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b082      	sub	sp, #8
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7ff ff94 	bl	80067a0 <SysTick_Config>
 8006878:	4603      	mov	r3, r0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
	...

08006884 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e098      	b.n	80069c8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	461a      	mov	r2, r3
 800689c:	4b4d      	ldr	r3, [pc, #308]	; (80069d4 <HAL_DMA_Init+0x150>)
 800689e:	429a      	cmp	r2, r3
 80068a0:	d80f      	bhi.n	80068c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	4b4b      	ldr	r3, [pc, #300]	; (80069d8 <HAL_DMA_Init+0x154>)
 80068aa:	4413      	add	r3, r2
 80068ac:	4a4b      	ldr	r2, [pc, #300]	; (80069dc <HAL_DMA_Init+0x158>)
 80068ae:	fba2 2303 	umull	r2, r3, r2, r3
 80068b2:	091b      	lsrs	r3, r3, #4
 80068b4:	009a      	lsls	r2, r3, #2
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a48      	ldr	r2, [pc, #288]	; (80069e0 <HAL_DMA_Init+0x15c>)
 80068be:	641a      	str	r2, [r3, #64]	; 0x40
 80068c0:	e00e      	b.n	80068e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	4b46      	ldr	r3, [pc, #280]	; (80069e4 <HAL_DMA_Init+0x160>)
 80068ca:	4413      	add	r3, r2
 80068cc:	4a43      	ldr	r2, [pc, #268]	; (80069dc <HAL_DMA_Init+0x158>)
 80068ce:	fba2 2303 	umull	r2, r3, r2, r3
 80068d2:	091b      	lsrs	r3, r3, #4
 80068d4:	009a      	lsls	r2, r3, #2
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a42      	ldr	r2, [pc, #264]	; (80069e8 <HAL_DMA_Init+0x164>)
 80068de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80068f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800691c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800693a:	d039      	beq.n	80069b0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006940:	4a27      	ldr	r2, [pc, #156]	; (80069e0 <HAL_DMA_Init+0x15c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d11a      	bne.n	800697c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006946:	4b29      	ldr	r3, [pc, #164]	; (80069ec <HAL_DMA_Init+0x168>)
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694e:	f003 031c 	and.w	r3, r3, #28
 8006952:	210f      	movs	r1, #15
 8006954:	fa01 f303 	lsl.w	r3, r1, r3
 8006958:	43db      	mvns	r3, r3
 800695a:	4924      	ldr	r1, [pc, #144]	; (80069ec <HAL_DMA_Init+0x168>)
 800695c:	4013      	ands	r3, r2
 800695e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006960:	4b22      	ldr	r3, [pc, #136]	; (80069ec <HAL_DMA_Init+0x168>)
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6859      	ldr	r1, [r3, #4]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696c:	f003 031c 	and.w	r3, r3, #28
 8006970:	fa01 f303 	lsl.w	r3, r1, r3
 8006974:	491d      	ldr	r1, [pc, #116]	; (80069ec <HAL_DMA_Init+0x168>)
 8006976:	4313      	orrs	r3, r2
 8006978:	600b      	str	r3, [r1, #0]
 800697a:	e019      	b.n	80069b0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800697c:	4b1c      	ldr	r3, [pc, #112]	; (80069f0 <HAL_DMA_Init+0x16c>)
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006984:	f003 031c 	and.w	r3, r3, #28
 8006988:	210f      	movs	r1, #15
 800698a:	fa01 f303 	lsl.w	r3, r1, r3
 800698e:	43db      	mvns	r3, r3
 8006990:	4917      	ldr	r1, [pc, #92]	; (80069f0 <HAL_DMA_Init+0x16c>)
 8006992:	4013      	ands	r3, r2
 8006994:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006996:	4b16      	ldr	r3, [pc, #88]	; (80069f0 <HAL_DMA_Init+0x16c>)
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6859      	ldr	r1, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a2:	f003 031c 	and.w	r3, r3, #28
 80069a6:	fa01 f303 	lsl.w	r3, r1, r3
 80069aa:	4911      	ldr	r1, [pc, #68]	; (80069f0 <HAL_DMA_Init+0x16c>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	40020407 	.word	0x40020407
 80069d8:	bffdfff8 	.word	0xbffdfff8
 80069dc:	cccccccd 	.word	0xcccccccd
 80069e0:	40020000 	.word	0x40020000
 80069e4:	bffdfbf8 	.word	0xbffdfbf8
 80069e8:	40020400 	.word	0x40020400
 80069ec:	400200a8 	.word	0x400200a8
 80069f0:	400204a8 	.word	0x400204a8

080069f4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e072      	b.n	8006aec <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0201 	bic.w	r2, r2, #1
 8006a14:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	4b36      	ldr	r3, [pc, #216]	; (8006af8 <HAL_DMA_DeInit+0x104>)
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d80f      	bhi.n	8006a42 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	4b34      	ldr	r3, [pc, #208]	; (8006afc <HAL_DMA_DeInit+0x108>)
 8006a2a:	4413      	add	r3, r2
 8006a2c:	4a34      	ldr	r2, [pc, #208]	; (8006b00 <HAL_DMA_DeInit+0x10c>)
 8006a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a32:	091b      	lsrs	r3, r3, #4
 8006a34:	009a      	lsls	r2, r3, #2
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a31      	ldr	r2, [pc, #196]	; (8006b04 <HAL_DMA_DeInit+0x110>)
 8006a3e:	641a      	str	r2, [r3, #64]	; 0x40
 8006a40:	e00e      	b.n	8006a60 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	4b2f      	ldr	r3, [pc, #188]	; (8006b08 <HAL_DMA_DeInit+0x114>)
 8006a4a:	4413      	add	r3, r2
 8006a4c:	4a2c      	ldr	r2, [pc, #176]	; (8006b00 <HAL_DMA_DeInit+0x10c>)
 8006a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a52:	091b      	lsrs	r3, r3, #4
 8006a54:	009a      	lsls	r2, r3, #2
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a2b      	ldr	r2, [pc, #172]	; (8006b0c <HAL_DMA_DeInit+0x118>)
 8006a5e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2200      	movs	r2, #0
 8006a66:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6c:	f003 021c 	and.w	r2, r3, #28
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a74:	2101      	movs	r1, #1
 8006a76:	fa01 f202 	lsl.w	r2, r1, r2
 8006a7a:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a80:	4a20      	ldr	r2, [pc, #128]	; (8006b04 <HAL_DMA_DeInit+0x110>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d10d      	bne.n	8006aa2 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006a86:	4b22      	ldr	r3, [pc, #136]	; (8006b10 <HAL_DMA_DeInit+0x11c>)
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a8e:	f003 031c 	and.w	r3, r3, #28
 8006a92:	210f      	movs	r1, #15
 8006a94:	fa01 f303 	lsl.w	r3, r1, r3
 8006a98:	43db      	mvns	r3, r3
 8006a9a:	491d      	ldr	r1, [pc, #116]	; (8006b10 <HAL_DMA_DeInit+0x11c>)
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	600b      	str	r3, [r1, #0]
 8006aa0:	e00c      	b.n	8006abc <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006aa2:	4b1c      	ldr	r3, [pc, #112]	; (8006b14 <HAL_DMA_DeInit+0x120>)
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aaa:	f003 031c 	and.w	r3, r3, #28
 8006aae:	210f      	movs	r1, #15
 8006ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	4917      	ldr	r1, [pc, #92]	; (8006b14 <HAL_DMA_DeInit+0x120>)
 8006ab8:	4013      	ands	r3, r2
 8006aba:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	40020407 	.word	0x40020407
 8006afc:	bffdfff8 	.word	0xbffdfff8
 8006b00:	cccccccd 	.word	0xcccccccd
 8006b04:	40020000 	.word	0x40020000
 8006b08:	bffdfbf8 	.word	0xbffdfbf8
 8006b0c:	40020400 	.word	0x40020400
 8006b10:	400200a8 	.word	0x400200a8
 8006b14:	400204a8 	.word	0x400204a8

08006b18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
 8006b24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d101      	bne.n	8006b38 <HAL_DMA_Start_IT+0x20>
 8006b34:	2302      	movs	r3, #2
 8006b36:	e04b      	b.n	8006bd0 <HAL_DMA_Start_IT+0xb8>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d13a      	bne.n	8006bc2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0201 	bic.w	r2, r2, #1
 8006b68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	68b9      	ldr	r1, [r7, #8]
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 f95f 	bl	8006e34 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d008      	beq.n	8006b90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f042 020e 	orr.w	r2, r2, #14
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	e00f      	b.n	8006bb0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0204 	bic.w	r2, r2, #4
 8006b9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f042 020a 	orr.w	r2, r2, #10
 8006bae:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0201 	orr.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	e005      	b.n	8006bce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006bca:	2302      	movs	r3, #2
 8006bcc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d008      	beq.n	8006c02 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2204      	movs	r2, #4
 8006bf4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e022      	b.n	8006c48 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 020e 	bic.w	r2, r2, #14
 8006c10:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 0201 	bic.w	r2, r2, #1
 8006c20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c26:	f003 021c 	and.w	r2, r3, #28
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	2101      	movs	r1, #1
 8006c30:	fa01 f202 	lsl.w	r2, r1, r2
 8006c34:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006c46:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d005      	beq.n	8006c78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2204      	movs	r2, #4
 8006c70:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	73fb      	strb	r3, [r7, #15]
 8006c76:	e029      	b.n	8006ccc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 020e 	bic.w	r2, r2, #14
 8006c86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 0201 	bic.w	r2, r2, #1
 8006c96:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c9c:	f003 021c 	and.w	r2, r3, #28
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8006caa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	4798      	blx	r3
    }
  }
  return status;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b084      	sub	sp, #16
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf2:	f003 031c 	and.w	r3, r3, #28
 8006cf6:	2204      	movs	r2, #4
 8006cf8:	409a      	lsls	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d026      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x7a>
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d021      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0320 	and.w	r3, r3, #32
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d107      	bne.n	8006d2a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f022 0204 	bic.w	r2, r2, #4
 8006d28:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d2e:	f003 021c 	and.w	r2, r3, #28
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d36:	2104      	movs	r1, #4
 8006d38:	fa01 f202 	lsl.w	r2, r1, r2
 8006d3c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d071      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006d4e:	e06c      	b.n	8006e2a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d54:	f003 031c 	and.w	r3, r3, #28
 8006d58:	2202      	movs	r2, #2
 8006d5a:	409a      	lsls	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4013      	ands	r3, r2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d02e      	beq.n	8006dc2 <HAL_DMA_IRQHandler+0xec>
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d029      	beq.n	8006dc2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0320 	and.w	r3, r3, #32
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10b      	bne.n	8006d94 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 020a 	bic.w	r2, r2, #10
 8006d8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d98:	f003 021c 	and.w	r2, r3, #28
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da0:	2102      	movs	r1, #2
 8006da2:	fa01 f202 	lsl.w	r2, r1, r2
 8006da6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d038      	beq.n	8006e2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006dc0:	e033      	b.n	8006e2a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc6:	f003 031c 	and.w	r3, r3, #28
 8006dca:	2208      	movs	r2, #8
 8006dcc:	409a      	lsls	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d02a      	beq.n	8006e2c <HAL_DMA_IRQHandler+0x156>
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f003 0308 	and.w	r3, r3, #8
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d025      	beq.n	8006e2c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 020e 	bic.w	r2, r2, #14
 8006dee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df4:	f003 021c 	and.w	r2, r3, #28
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8006e02:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d004      	beq.n	8006e2c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006e2a:	bf00      	nop
 8006e2c:	bf00      	nop
}
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
 8006e40:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e46:	f003 021c 	and.w	r2, r3, #28
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4e:	2101      	movs	r1, #1
 8006e50:	fa01 f202 	lsl.w	r2, r1, r2
 8006e54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	2b10      	cmp	r3, #16
 8006e64:	d108      	bne.n	8006e78 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006e76:	e007      	b.n	8006e88 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	60da      	str	r2, [r3, #12]
}
 8006e88:	bf00      	nop
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ea2:	e166      	b.n	8007172 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	2101      	movs	r1, #1
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 8158 	beq.w	800716c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f003 0303 	and.w	r3, r3, #3
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d005      	beq.n	8006ed4 <HAL_GPIO_Init+0x40>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f003 0303 	and.w	r3, r3, #3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d130      	bne.n	8006f36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	2203      	movs	r2, #3
 8006ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee4:	43db      	mvns	r3, r3
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	005b      	lsls	r3, r3, #1
 8006ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f12:	43db      	mvns	r3, r3
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	4013      	ands	r3, r2
 8006f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	091b      	lsrs	r3, r3, #4
 8006f20:	f003 0201 	and.w	r2, r3, #1
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	2b03      	cmp	r3, #3
 8006f40:	d017      	beq.n	8006f72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	2203      	movs	r2, #3
 8006f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f52:	43db      	mvns	r3, r3
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	4013      	ands	r3, r2
 8006f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	005b      	lsls	r3, r3, #1
 8006f62:	fa02 f303 	lsl.w	r3, r2, r3
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f003 0303 	and.w	r3, r3, #3
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d123      	bne.n	8006fc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	08da      	lsrs	r2, r3, #3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3208      	adds	r2, #8
 8006f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	220f      	movs	r2, #15
 8006f96:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9a:	43db      	mvns	r3, r3
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	691a      	ldr	r2, [r3, #16]
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	08da      	lsrs	r2, r3, #3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3208      	adds	r2, #8
 8006fc0:	6939      	ldr	r1, [r7, #16]
 8006fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	2203      	movs	r2, #3
 8006fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd6:	43db      	mvns	r3, r3
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	4013      	ands	r3, r2
 8006fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f003 0203 	and.w	r2, r3, #3
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	fa02 f303 	lsl.w	r3, r2, r3
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 80b2 	beq.w	800716c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007008:	4b61      	ldr	r3, [pc, #388]	; (8007190 <HAL_GPIO_Init+0x2fc>)
 800700a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800700c:	4a60      	ldr	r2, [pc, #384]	; (8007190 <HAL_GPIO_Init+0x2fc>)
 800700e:	f043 0301 	orr.w	r3, r3, #1
 8007012:	6613      	str	r3, [r2, #96]	; 0x60
 8007014:	4b5e      	ldr	r3, [pc, #376]	; (8007190 <HAL_GPIO_Init+0x2fc>)
 8007016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	60bb      	str	r3, [r7, #8]
 800701e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007020:	4a5c      	ldr	r2, [pc, #368]	; (8007194 <HAL_GPIO_Init+0x300>)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	089b      	lsrs	r3, r3, #2
 8007026:	3302      	adds	r3, #2
 8007028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800702c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f003 0303 	and.w	r3, r3, #3
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	220f      	movs	r2, #15
 8007038:	fa02 f303 	lsl.w	r3, r2, r3
 800703c:	43db      	mvns	r3, r3
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	4013      	ands	r3, r2
 8007042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800704a:	d02b      	beq.n	80070a4 <HAL_GPIO_Init+0x210>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a52      	ldr	r2, [pc, #328]	; (8007198 <HAL_GPIO_Init+0x304>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d025      	beq.n	80070a0 <HAL_GPIO_Init+0x20c>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a51      	ldr	r2, [pc, #324]	; (800719c <HAL_GPIO_Init+0x308>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d01f      	beq.n	800709c <HAL_GPIO_Init+0x208>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a50      	ldr	r2, [pc, #320]	; (80071a0 <HAL_GPIO_Init+0x30c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d019      	beq.n	8007098 <HAL_GPIO_Init+0x204>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a4f      	ldr	r2, [pc, #316]	; (80071a4 <HAL_GPIO_Init+0x310>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d013      	beq.n	8007094 <HAL_GPIO_Init+0x200>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a4e      	ldr	r2, [pc, #312]	; (80071a8 <HAL_GPIO_Init+0x314>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d00d      	beq.n	8007090 <HAL_GPIO_Init+0x1fc>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a4d      	ldr	r2, [pc, #308]	; (80071ac <HAL_GPIO_Init+0x318>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d007      	beq.n	800708c <HAL_GPIO_Init+0x1f8>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a4c      	ldr	r2, [pc, #304]	; (80071b0 <HAL_GPIO_Init+0x31c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d101      	bne.n	8007088 <HAL_GPIO_Init+0x1f4>
 8007084:	2307      	movs	r3, #7
 8007086:	e00e      	b.n	80070a6 <HAL_GPIO_Init+0x212>
 8007088:	2308      	movs	r3, #8
 800708a:	e00c      	b.n	80070a6 <HAL_GPIO_Init+0x212>
 800708c:	2306      	movs	r3, #6
 800708e:	e00a      	b.n	80070a6 <HAL_GPIO_Init+0x212>
 8007090:	2305      	movs	r3, #5
 8007092:	e008      	b.n	80070a6 <HAL_GPIO_Init+0x212>
 8007094:	2304      	movs	r3, #4
 8007096:	e006      	b.n	80070a6 <HAL_GPIO_Init+0x212>
 8007098:	2303      	movs	r3, #3
 800709a:	e004      	b.n	80070a6 <HAL_GPIO_Init+0x212>
 800709c:	2302      	movs	r3, #2
 800709e:	e002      	b.n	80070a6 <HAL_GPIO_Init+0x212>
 80070a0:	2301      	movs	r3, #1
 80070a2:	e000      	b.n	80070a6 <HAL_GPIO_Init+0x212>
 80070a4:	2300      	movs	r3, #0
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	f002 0203 	and.w	r2, r2, #3
 80070ac:	0092      	lsls	r2, r2, #2
 80070ae:	4093      	lsls	r3, r2
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80070b6:	4937      	ldr	r1, [pc, #220]	; (8007194 <HAL_GPIO_Init+0x300>)
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	089b      	lsrs	r3, r3, #2
 80070bc:	3302      	adds	r3, #2
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80070c4:	4b3b      	ldr	r3, [pc, #236]	; (80071b4 <HAL_GPIO_Init+0x320>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	43db      	mvns	r3, r3
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	4013      	ands	r3, r2
 80070d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80070e8:	4a32      	ldr	r2, [pc, #200]	; (80071b4 <HAL_GPIO_Init+0x320>)
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80070ee:	4b31      	ldr	r3, [pc, #196]	; (80071b4 <HAL_GPIO_Init+0x320>)
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	43db      	mvns	r3, r3
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	4013      	ands	r3, r2
 80070fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4313      	orrs	r3, r2
 8007110:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007112:	4a28      	ldr	r2, [pc, #160]	; (80071b4 <HAL_GPIO_Init+0x320>)
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007118:	4b26      	ldr	r3, [pc, #152]	; (80071b4 <HAL_GPIO_Init+0x320>)
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	43db      	mvns	r3, r3
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	4013      	ands	r3, r2
 8007126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	4313      	orrs	r3, r2
 800713a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800713c:	4a1d      	ldr	r2, [pc, #116]	; (80071b4 <HAL_GPIO_Init+0x320>)
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007142:	4b1c      	ldr	r3, [pc, #112]	; (80071b4 <HAL_GPIO_Init+0x320>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	43db      	mvns	r3, r3
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	4013      	ands	r3, r2
 8007150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4313      	orrs	r3, r2
 8007164:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007166:	4a13      	ldr	r2, [pc, #76]	; (80071b4 <HAL_GPIO_Init+0x320>)
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	3301      	adds	r3, #1
 8007170:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	fa22 f303 	lsr.w	r3, r2, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	f47f ae91 	bne.w	8006ea4 <HAL_GPIO_Init+0x10>
  }
}
 8007182:	bf00      	nop
 8007184:	bf00      	nop
 8007186:	371c      	adds	r7, #28
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	40021000 	.word	0x40021000
 8007194:	40010000 	.word	0x40010000
 8007198:	48000400 	.word	0x48000400
 800719c:	48000800 	.word	0x48000800
 80071a0:	48000c00 	.word	0x48000c00
 80071a4:	48001000 	.word	0x48001000
 80071a8:	48001400 	.word	0x48001400
 80071ac:	48001800 	.word	0x48001800
 80071b0:	48001c00 	.word	0x48001c00
 80071b4:	40010400 	.word	0x40010400

080071b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80071c2:	2300      	movs	r3, #0
 80071c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80071c6:	e0c9      	b.n	800735c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80071c8:	2201      	movs	r2, #1
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	fa02 f303 	lsl.w	r3, r2, r3
 80071d0:	683a      	ldr	r2, [r7, #0]
 80071d2:	4013      	ands	r3, r2
 80071d4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 80bc 	beq.w	8007356 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80071de:	4a66      	ldr	r2, [pc, #408]	; (8007378 <HAL_GPIO_DeInit+0x1c0>)
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	089b      	lsrs	r3, r3, #2
 80071e4:	3302      	adds	r3, #2
 80071e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ea:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f003 0303 	and.w	r3, r3, #3
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	220f      	movs	r2, #15
 80071f6:	fa02 f303 	lsl.w	r3, r2, r3
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	4013      	ands	r3, r2
 80071fe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007206:	d02b      	beq.n	8007260 <HAL_GPIO_DeInit+0xa8>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a5c      	ldr	r2, [pc, #368]	; (800737c <HAL_GPIO_DeInit+0x1c4>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d025      	beq.n	800725c <HAL_GPIO_DeInit+0xa4>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a5b      	ldr	r2, [pc, #364]	; (8007380 <HAL_GPIO_DeInit+0x1c8>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d01f      	beq.n	8007258 <HAL_GPIO_DeInit+0xa0>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a5a      	ldr	r2, [pc, #360]	; (8007384 <HAL_GPIO_DeInit+0x1cc>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d019      	beq.n	8007254 <HAL_GPIO_DeInit+0x9c>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a59      	ldr	r2, [pc, #356]	; (8007388 <HAL_GPIO_DeInit+0x1d0>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d013      	beq.n	8007250 <HAL_GPIO_DeInit+0x98>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a58      	ldr	r2, [pc, #352]	; (800738c <HAL_GPIO_DeInit+0x1d4>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d00d      	beq.n	800724c <HAL_GPIO_DeInit+0x94>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a57      	ldr	r2, [pc, #348]	; (8007390 <HAL_GPIO_DeInit+0x1d8>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d007      	beq.n	8007248 <HAL_GPIO_DeInit+0x90>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a56      	ldr	r2, [pc, #344]	; (8007394 <HAL_GPIO_DeInit+0x1dc>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d101      	bne.n	8007244 <HAL_GPIO_DeInit+0x8c>
 8007240:	2307      	movs	r3, #7
 8007242:	e00e      	b.n	8007262 <HAL_GPIO_DeInit+0xaa>
 8007244:	2308      	movs	r3, #8
 8007246:	e00c      	b.n	8007262 <HAL_GPIO_DeInit+0xaa>
 8007248:	2306      	movs	r3, #6
 800724a:	e00a      	b.n	8007262 <HAL_GPIO_DeInit+0xaa>
 800724c:	2305      	movs	r3, #5
 800724e:	e008      	b.n	8007262 <HAL_GPIO_DeInit+0xaa>
 8007250:	2304      	movs	r3, #4
 8007252:	e006      	b.n	8007262 <HAL_GPIO_DeInit+0xaa>
 8007254:	2303      	movs	r3, #3
 8007256:	e004      	b.n	8007262 <HAL_GPIO_DeInit+0xaa>
 8007258:	2302      	movs	r3, #2
 800725a:	e002      	b.n	8007262 <HAL_GPIO_DeInit+0xaa>
 800725c:	2301      	movs	r3, #1
 800725e:	e000      	b.n	8007262 <HAL_GPIO_DeInit+0xaa>
 8007260:	2300      	movs	r3, #0
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	f002 0203 	and.w	r2, r2, #3
 8007268:	0092      	lsls	r2, r2, #2
 800726a:	4093      	lsls	r3, r2
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	429a      	cmp	r2, r3
 8007270:	d132      	bne.n	80072d8 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007272:	4b49      	ldr	r3, [pc, #292]	; (8007398 <HAL_GPIO_DeInit+0x1e0>)
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	43db      	mvns	r3, r3
 800727a:	4947      	ldr	r1, [pc, #284]	; (8007398 <HAL_GPIO_DeInit+0x1e0>)
 800727c:	4013      	ands	r3, r2
 800727e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007280:	4b45      	ldr	r3, [pc, #276]	; (8007398 <HAL_GPIO_DeInit+0x1e0>)
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	43db      	mvns	r3, r3
 8007288:	4943      	ldr	r1, [pc, #268]	; (8007398 <HAL_GPIO_DeInit+0x1e0>)
 800728a:	4013      	ands	r3, r2
 800728c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800728e:	4b42      	ldr	r3, [pc, #264]	; (8007398 <HAL_GPIO_DeInit+0x1e0>)
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	43db      	mvns	r3, r3
 8007296:	4940      	ldr	r1, [pc, #256]	; (8007398 <HAL_GPIO_DeInit+0x1e0>)
 8007298:	4013      	ands	r3, r2
 800729a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800729c:	4b3e      	ldr	r3, [pc, #248]	; (8007398 <HAL_GPIO_DeInit+0x1e0>)
 800729e:	689a      	ldr	r2, [r3, #8]
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	43db      	mvns	r3, r3
 80072a4:	493c      	ldr	r1, [pc, #240]	; (8007398 <HAL_GPIO_DeInit+0x1e0>)
 80072a6:	4013      	ands	r3, r2
 80072a8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f003 0303 	and.w	r3, r3, #3
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	220f      	movs	r2, #15
 80072b4:	fa02 f303 	lsl.w	r3, r2, r3
 80072b8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80072ba:	4a2f      	ldr	r2, [pc, #188]	; (8007378 <HAL_GPIO_DeInit+0x1c0>)
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	089b      	lsrs	r3, r3, #2
 80072c0:	3302      	adds	r3, #2
 80072c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	43da      	mvns	r2, r3
 80072ca:	482b      	ldr	r0, [pc, #172]	; (8007378 <HAL_GPIO_DeInit+0x1c0>)
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	089b      	lsrs	r3, r3, #2
 80072d0:	400a      	ands	r2, r1
 80072d2:	3302      	adds	r3, #2
 80072d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	2103      	movs	r1, #3
 80072e2:	fa01 f303 	lsl.w	r3, r1, r3
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	08da      	lsrs	r2, r3, #3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	3208      	adds	r2, #8
 80072f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f003 0307 	and.w	r3, r3, #7
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	220f      	movs	r2, #15
 8007302:	fa02 f303 	lsl.w	r3, r2, r3
 8007306:	43db      	mvns	r3, r3
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	08d2      	lsrs	r2, r2, #3
 800730c:	4019      	ands	r1, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3208      	adds	r2, #8
 8007312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	2103      	movs	r1, #3
 8007320:	fa01 f303 	lsl.w	r3, r1, r3
 8007324:	43db      	mvns	r3, r3
 8007326:	401a      	ands	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	2101      	movs	r1, #1
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	fa01 f303 	lsl.w	r3, r1, r3
 8007338:	43db      	mvns	r3, r3
 800733a:	401a      	ands	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	2103      	movs	r1, #3
 800734a:	fa01 f303 	lsl.w	r3, r1, r3
 800734e:	43db      	mvns	r3, r3
 8007350:	401a      	ands	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	3301      	adds	r3, #1
 800735a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	fa22 f303 	lsr.w	r3, r2, r3
 8007364:	2b00      	cmp	r3, #0
 8007366:	f47f af2f 	bne.w	80071c8 <HAL_GPIO_DeInit+0x10>
  }
}
 800736a:	bf00      	nop
 800736c:	bf00      	nop
 800736e:	371c      	adds	r7, #28
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	40010000 	.word	0x40010000
 800737c:	48000400 	.word	0x48000400
 8007380:	48000800 	.word	0x48000800
 8007384:	48000c00 	.word	0x48000c00
 8007388:	48001000 	.word	0x48001000
 800738c:	48001400 	.word	0x48001400
 8007390:	48001800 	.word	0x48001800
 8007394:	48001c00 	.word	0x48001c00
 8007398:	40010400 	.word	0x40010400

0800739c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	807b      	strh	r3, [r7, #2]
 80073a8:	4613      	mov	r3, r2
 80073aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80073ac:	787b      	ldrb	r3, [r7, #1]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80073b2:	887a      	ldrh	r2, [r7, #2]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80073b8:	e002      	b.n	80073c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80073ba:	887a      	ldrh	r2, [r7, #2]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80073d0:	4b04      	ldr	r3, [pc, #16]	; (80073e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80073d8:	4618      	mov	r0, r3
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40007000 	.word	0x40007000

080073e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073f6:	d130      	bne.n	800745a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80073f8:	4b23      	ldr	r3, [pc, #140]	; (8007488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007404:	d038      	beq.n	8007478 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007406:	4b20      	ldr	r3, [pc, #128]	; (8007488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800740e:	4a1e      	ldr	r2, [pc, #120]	; (8007488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007410:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007414:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007416:	4b1d      	ldr	r3, [pc, #116]	; (800748c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2232      	movs	r2, #50	; 0x32
 800741c:	fb02 f303 	mul.w	r3, r2, r3
 8007420:	4a1b      	ldr	r2, [pc, #108]	; (8007490 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007422:	fba2 2303 	umull	r2, r3, r2, r3
 8007426:	0c9b      	lsrs	r3, r3, #18
 8007428:	3301      	adds	r3, #1
 800742a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800742c:	e002      	b.n	8007434 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3b01      	subs	r3, #1
 8007432:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007434:	4b14      	ldr	r3, [pc, #80]	; (8007488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800743c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007440:	d102      	bne.n	8007448 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1f2      	bne.n	800742e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007448:	4b0f      	ldr	r3, [pc, #60]	; (8007488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007454:	d110      	bne.n	8007478 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e00f      	b.n	800747a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800745a:	4b0b      	ldr	r3, [pc, #44]	; (8007488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007466:	d007      	beq.n	8007478 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007468:	4b07      	ldr	r3, [pc, #28]	; (8007488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007470:	4a05      	ldr	r2, [pc, #20]	; (8007488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007476:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	40007000 	.word	0x40007000
 800748c:	20000010 	.word	0x20000010
 8007490:	431bde83 	.word	0x431bde83

08007494 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b088      	sub	sp, #32
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d102      	bne.n	80074a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	f000 bc08 	b.w	8007cb8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074a8:	4b96      	ldr	r3, [pc, #600]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f003 030c 	and.w	r3, r3, #12
 80074b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074b2:	4b94      	ldr	r3, [pc, #592]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0310 	and.w	r3, r3, #16
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 80e4 	beq.w	8007692 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d007      	beq.n	80074e0 <HAL_RCC_OscConfig+0x4c>
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	2b0c      	cmp	r3, #12
 80074d4:	f040 808b 	bne.w	80075ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	f040 8087 	bne.w	80075ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80074e0:	4b88      	ldr	r3, [pc, #544]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d005      	beq.n	80074f8 <HAL_RCC_OscConfig+0x64>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e3df      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a1a      	ldr	r2, [r3, #32]
 80074fc:	4b81      	ldr	r3, [pc, #516]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0308 	and.w	r3, r3, #8
 8007504:	2b00      	cmp	r3, #0
 8007506:	d004      	beq.n	8007512 <HAL_RCC_OscConfig+0x7e>
 8007508:	4b7e      	ldr	r3, [pc, #504]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007510:	e005      	b.n	800751e <HAL_RCC_OscConfig+0x8a>
 8007512:	4b7c      	ldr	r3, [pc, #496]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007518:	091b      	lsrs	r3, r3, #4
 800751a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800751e:	4293      	cmp	r3, r2
 8007520:	d223      	bcs.n	800756a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fd92 	bl	8008050 <RCC_SetFlashLatencyFromMSIRange>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e3c0      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007536:	4b73      	ldr	r3, [pc, #460]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a72      	ldr	r2, [pc, #456]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 800753c:	f043 0308 	orr.w	r3, r3, #8
 8007540:	6013      	str	r3, [r2, #0]
 8007542:	4b70      	ldr	r3, [pc, #448]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	496d      	ldr	r1, [pc, #436]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007550:	4313      	orrs	r3, r2
 8007552:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007554:	4b6b      	ldr	r3, [pc, #428]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	021b      	lsls	r3, r3, #8
 8007562:	4968      	ldr	r1, [pc, #416]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007564:	4313      	orrs	r3, r2
 8007566:	604b      	str	r3, [r1, #4]
 8007568:	e025      	b.n	80075b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800756a:	4b66      	ldr	r3, [pc, #408]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a65      	ldr	r2, [pc, #404]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007570:	f043 0308 	orr.w	r3, r3, #8
 8007574:	6013      	str	r3, [r2, #0]
 8007576:	4b63      	ldr	r3, [pc, #396]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	4960      	ldr	r1, [pc, #384]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007584:	4313      	orrs	r3, r2
 8007586:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007588:	4b5e      	ldr	r3, [pc, #376]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	69db      	ldr	r3, [r3, #28]
 8007594:	021b      	lsls	r3, r3, #8
 8007596:	495b      	ldr	r1, [pc, #364]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007598:	4313      	orrs	r3, r2
 800759a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d109      	bne.n	80075b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 fd52 	bl	8008050 <RCC_SetFlashLatencyFromMSIRange>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d001      	beq.n	80075b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e380      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80075b6:	f000 fc87 	bl	8007ec8 <HAL_RCC_GetSysClockFreq>
 80075ba:	4602      	mov	r2, r0
 80075bc:	4b51      	ldr	r3, [pc, #324]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	091b      	lsrs	r3, r3, #4
 80075c2:	f003 030f 	and.w	r3, r3, #15
 80075c6:	4950      	ldr	r1, [pc, #320]	; (8007708 <HAL_RCC_OscConfig+0x274>)
 80075c8:	5ccb      	ldrb	r3, [r1, r3]
 80075ca:	f003 031f 	and.w	r3, r3, #31
 80075ce:	fa22 f303 	lsr.w	r3, r2, r3
 80075d2:	4a4e      	ldr	r2, [pc, #312]	; (800770c <HAL_RCC_OscConfig+0x278>)
 80075d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80075d6:	4b4e      	ldr	r3, [pc, #312]	; (8007710 <HAL_RCC_OscConfig+0x27c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fe ff8e 	bl	80064fc <HAL_InitTick>
 80075e0:	4603      	mov	r3, r0
 80075e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d052      	beq.n	8007690 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	e364      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d032      	beq.n	800765c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80075f6:	4b43      	ldr	r3, [pc, #268]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a42      	ldr	r2, [pc, #264]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80075fc:	f043 0301 	orr.w	r3, r3, #1
 8007600:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007602:	f7fe ffcb 	bl	800659c <HAL_GetTick>
 8007606:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007608:	e008      	b.n	800761c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800760a:	f7fe ffc7 	bl	800659c <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	2b02      	cmp	r3, #2
 8007616:	d901      	bls.n	800761c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e34d      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800761c:	4b39      	ldr	r3, [pc, #228]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	2b00      	cmp	r3, #0
 8007626:	d0f0      	beq.n	800760a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007628:	4b36      	ldr	r3, [pc, #216]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a35      	ldr	r2, [pc, #212]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 800762e:	f043 0308 	orr.w	r3, r3, #8
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	4b33      	ldr	r3, [pc, #204]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	4930      	ldr	r1, [pc, #192]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007642:	4313      	orrs	r3, r2
 8007644:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007646:	4b2f      	ldr	r3, [pc, #188]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	021b      	lsls	r3, r3, #8
 8007654:	492b      	ldr	r1, [pc, #172]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007656:	4313      	orrs	r3, r2
 8007658:	604b      	str	r3, [r1, #4]
 800765a:	e01a      	b.n	8007692 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800765c:	4b29      	ldr	r3, [pc, #164]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a28      	ldr	r2, [pc, #160]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007662:	f023 0301 	bic.w	r3, r3, #1
 8007666:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007668:	f7fe ff98 	bl	800659c <HAL_GetTick>
 800766c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800766e:	e008      	b.n	8007682 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007670:	f7fe ff94 	bl	800659c <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	2b02      	cmp	r3, #2
 800767c:	d901      	bls.n	8007682 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e31a      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007682:	4b20      	ldr	r3, [pc, #128]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1f0      	bne.n	8007670 <HAL_RCC_OscConfig+0x1dc>
 800768e:	e000      	b.n	8007692 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007690:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d073      	beq.n	8007786 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	d005      	beq.n	80076b0 <HAL_RCC_OscConfig+0x21c>
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	2b0c      	cmp	r3, #12
 80076a8:	d10e      	bne.n	80076c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d10b      	bne.n	80076c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076b0:	4b14      	ldr	r3, [pc, #80]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d063      	beq.n	8007784 <HAL_RCC_OscConfig+0x2f0>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d15f      	bne.n	8007784 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e2f7      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d0:	d106      	bne.n	80076e0 <HAL_RCC_OscConfig+0x24c>
 80076d2:	4b0c      	ldr	r3, [pc, #48]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a0b      	ldr	r2, [pc, #44]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80076d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	e025      	b.n	800772c <HAL_RCC_OscConfig+0x298>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076e8:	d114      	bne.n	8007714 <HAL_RCC_OscConfig+0x280>
 80076ea:	4b06      	ldr	r3, [pc, #24]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a05      	ldr	r2, [pc, #20]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80076f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	4b03      	ldr	r3, [pc, #12]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a02      	ldr	r2, [pc, #8]	; (8007704 <HAL_RCC_OscConfig+0x270>)
 80076fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	e013      	b.n	800772c <HAL_RCC_OscConfig+0x298>
 8007704:	40021000 	.word	0x40021000
 8007708:	0800abf4 	.word	0x0800abf4
 800770c:	20000010 	.word	0x20000010
 8007710:	20000020 	.word	0x20000020
 8007714:	4ba0      	ldr	r3, [pc, #640]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a9f      	ldr	r2, [pc, #636]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 800771a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	4b9d      	ldr	r3, [pc, #628]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a9c      	ldr	r2, [pc, #624]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800772a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d013      	beq.n	800775c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007734:	f7fe ff32 	bl	800659c <HAL_GetTick>
 8007738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800773a:	e008      	b.n	800774e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800773c:	f7fe ff2e 	bl	800659c <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b64      	cmp	r3, #100	; 0x64
 8007748:	d901      	bls.n	800774e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e2b4      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800774e:	4b92      	ldr	r3, [pc, #584]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0f0      	beq.n	800773c <HAL_RCC_OscConfig+0x2a8>
 800775a:	e014      	b.n	8007786 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800775c:	f7fe ff1e 	bl	800659c <HAL_GetTick>
 8007760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007762:	e008      	b.n	8007776 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007764:	f7fe ff1a 	bl	800659c <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b64      	cmp	r3, #100	; 0x64
 8007770:	d901      	bls.n	8007776 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e2a0      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007776:	4b88      	ldr	r3, [pc, #544]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1f0      	bne.n	8007764 <HAL_RCC_OscConfig+0x2d0>
 8007782:	e000      	b.n	8007786 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0302 	and.w	r3, r3, #2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d060      	beq.n	8007854 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	2b04      	cmp	r3, #4
 8007796:	d005      	beq.n	80077a4 <HAL_RCC_OscConfig+0x310>
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	2b0c      	cmp	r3, #12
 800779c:	d119      	bne.n	80077d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d116      	bne.n	80077d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077a4:	4b7c      	ldr	r3, [pc, #496]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d005      	beq.n	80077bc <HAL_RCC_OscConfig+0x328>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e27d      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077bc:	4b76      	ldr	r3, [pc, #472]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	061b      	lsls	r3, r3, #24
 80077ca:	4973      	ldr	r1, [pc, #460]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077d0:	e040      	b.n	8007854 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d023      	beq.n	8007822 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077da:	4b6f      	ldr	r3, [pc, #444]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a6e      	ldr	r2, [pc, #440]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80077e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e6:	f7fe fed9 	bl	800659c <HAL_GetTick>
 80077ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077ec:	e008      	b.n	8007800 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077ee:	f7fe fed5 	bl	800659c <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d901      	bls.n	8007800 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e25b      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007800:	4b65      	ldr	r3, [pc, #404]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007808:	2b00      	cmp	r3, #0
 800780a:	d0f0      	beq.n	80077ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800780c:	4b62      	ldr	r3, [pc, #392]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	061b      	lsls	r3, r3, #24
 800781a:	495f      	ldr	r1, [pc, #380]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 800781c:	4313      	orrs	r3, r2
 800781e:	604b      	str	r3, [r1, #4]
 8007820:	e018      	b.n	8007854 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007822:	4b5d      	ldr	r3, [pc, #372]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a5c      	ldr	r2, [pc, #368]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800782c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800782e:	f7fe feb5 	bl	800659c <HAL_GetTick>
 8007832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007834:	e008      	b.n	8007848 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007836:	f7fe feb1 	bl	800659c <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d901      	bls.n	8007848 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e237      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007848:	4b53      	ldr	r3, [pc, #332]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1f0      	bne.n	8007836 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0308 	and.w	r3, r3, #8
 800785c:	2b00      	cmp	r3, #0
 800785e:	d03c      	beq.n	80078da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d01c      	beq.n	80078a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007868:	4b4b      	ldr	r3, [pc, #300]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 800786a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800786e:	4a4a      	ldr	r2, [pc, #296]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007870:	f043 0301 	orr.w	r3, r3, #1
 8007874:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007878:	f7fe fe90 	bl	800659c <HAL_GetTick>
 800787c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800787e:	e008      	b.n	8007892 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007880:	f7fe fe8c 	bl	800659c <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	2b02      	cmp	r3, #2
 800788c:	d901      	bls.n	8007892 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e212      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007892:	4b41      	ldr	r3, [pc, #260]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d0ef      	beq.n	8007880 <HAL_RCC_OscConfig+0x3ec>
 80078a0:	e01b      	b.n	80078da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078a2:	4b3d      	ldr	r3, [pc, #244]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80078a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078a8:	4a3b      	ldr	r2, [pc, #236]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80078aa:	f023 0301 	bic.w	r3, r3, #1
 80078ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b2:	f7fe fe73 	bl	800659c <HAL_GetTick>
 80078b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80078b8:	e008      	b.n	80078cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078ba:	f7fe fe6f 	bl	800659c <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d901      	bls.n	80078cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e1f5      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80078cc:	4b32      	ldr	r3, [pc, #200]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80078ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078d2:	f003 0302 	and.w	r3, r3, #2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1ef      	bne.n	80078ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0304 	and.w	r3, r3, #4
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 80a6 	beq.w	8007a34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078e8:	2300      	movs	r3, #0
 80078ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80078ec:	4b2a      	ldr	r3, [pc, #168]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80078ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10d      	bne.n	8007914 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078f8:	4b27      	ldr	r3, [pc, #156]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80078fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078fc:	4a26      	ldr	r2, [pc, #152]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 80078fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007902:	6593      	str	r3, [r2, #88]	; 0x58
 8007904:	4b24      	ldr	r3, [pc, #144]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800790c:	60bb      	str	r3, [r7, #8]
 800790e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007910:	2301      	movs	r3, #1
 8007912:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007914:	4b21      	ldr	r3, [pc, #132]	; (800799c <HAL_RCC_OscConfig+0x508>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800791c:	2b00      	cmp	r3, #0
 800791e:	d118      	bne.n	8007952 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007920:	4b1e      	ldr	r3, [pc, #120]	; (800799c <HAL_RCC_OscConfig+0x508>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a1d      	ldr	r2, [pc, #116]	; (800799c <HAL_RCC_OscConfig+0x508>)
 8007926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800792a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800792c:	f7fe fe36 	bl	800659c <HAL_GetTick>
 8007930:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007932:	e008      	b.n	8007946 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007934:	f7fe fe32 	bl	800659c <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	2b02      	cmp	r3, #2
 8007940:	d901      	bls.n	8007946 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e1b8      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007946:	4b15      	ldr	r3, [pc, #84]	; (800799c <HAL_RCC_OscConfig+0x508>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800794e:	2b00      	cmp	r3, #0
 8007950:	d0f0      	beq.n	8007934 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d108      	bne.n	800796c <HAL_RCC_OscConfig+0x4d8>
 800795a:	4b0f      	ldr	r3, [pc, #60]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 800795c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007960:	4a0d      	ldr	r2, [pc, #52]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007962:	f043 0301 	orr.w	r3, r3, #1
 8007966:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800796a:	e029      	b.n	80079c0 <HAL_RCC_OscConfig+0x52c>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	2b05      	cmp	r3, #5
 8007972:	d115      	bne.n	80079a0 <HAL_RCC_OscConfig+0x50c>
 8007974:	4b08      	ldr	r3, [pc, #32]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800797a:	4a07      	ldr	r2, [pc, #28]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 800797c:	f043 0304 	orr.w	r3, r3, #4
 8007980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007984:	4b04      	ldr	r3, [pc, #16]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 8007986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800798a:	4a03      	ldr	r2, [pc, #12]	; (8007998 <HAL_RCC_OscConfig+0x504>)
 800798c:	f043 0301 	orr.w	r3, r3, #1
 8007990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007994:	e014      	b.n	80079c0 <HAL_RCC_OscConfig+0x52c>
 8007996:	bf00      	nop
 8007998:	40021000 	.word	0x40021000
 800799c:	40007000 	.word	0x40007000
 80079a0:	4b9d      	ldr	r3, [pc, #628]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 80079a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a6:	4a9c      	ldr	r2, [pc, #624]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 80079a8:	f023 0301 	bic.w	r3, r3, #1
 80079ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80079b0:	4b99      	ldr	r3, [pc, #612]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 80079b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b6:	4a98      	ldr	r2, [pc, #608]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 80079b8:	f023 0304 	bic.w	r3, r3, #4
 80079bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d016      	beq.n	80079f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079c8:	f7fe fde8 	bl	800659c <HAL_GetTick>
 80079cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079ce:	e00a      	b.n	80079e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079d0:	f7fe fde4 	bl	800659c <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	f241 3288 	movw	r2, #5000	; 0x1388
 80079de:	4293      	cmp	r3, r2
 80079e0:	d901      	bls.n	80079e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e168      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079e6:	4b8c      	ldr	r3, [pc, #560]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 80079e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d0ed      	beq.n	80079d0 <HAL_RCC_OscConfig+0x53c>
 80079f4:	e015      	b.n	8007a22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079f6:	f7fe fdd1 	bl	800659c <HAL_GetTick>
 80079fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80079fc:	e00a      	b.n	8007a14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079fe:	f7fe fdcd 	bl	800659c <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d901      	bls.n	8007a14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e151      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a14:	4b80      	ldr	r3, [pc, #512]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1ed      	bne.n	80079fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a22:	7ffb      	ldrb	r3, [r7, #31]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d105      	bne.n	8007a34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a28:	4b7b      	ldr	r3, [pc, #492]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a2c:	4a7a      	ldr	r2, [pc, #488]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d03c      	beq.n	8007aba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d01c      	beq.n	8007a82 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007a48:	4b73      	ldr	r3, [pc, #460]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007a4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a4e:	4a72      	ldr	r2, [pc, #456]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007a50:	f043 0301 	orr.w	r3, r3, #1
 8007a54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a58:	f7fe fda0 	bl	800659c <HAL_GetTick>
 8007a5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007a5e:	e008      	b.n	8007a72 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a60:	f7fe fd9c 	bl	800659c <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d901      	bls.n	8007a72 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e122      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007a72:	4b69      	ldr	r3, [pc, #420]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a78:	f003 0302 	and.w	r3, r3, #2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0ef      	beq.n	8007a60 <HAL_RCC_OscConfig+0x5cc>
 8007a80:	e01b      	b.n	8007aba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007a82:	4b65      	ldr	r3, [pc, #404]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007a84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007a88:	4a63      	ldr	r2, [pc, #396]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007a8a:	f023 0301 	bic.w	r3, r3, #1
 8007a8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a92:	f7fe fd83 	bl	800659c <HAL_GetTick>
 8007a96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007a98:	e008      	b.n	8007aac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a9a:	f7fe fd7f 	bl	800659c <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d901      	bls.n	8007aac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e105      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007aac:	4b5a      	ldr	r3, [pc, #360]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007aae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1ef      	bne.n	8007a9a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 80f9 	beq.w	8007cb6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	f040 80cf 	bne.w	8007c6c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007ace:	4b52      	ldr	r3, [pc, #328]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f003 0203 	and.w	r2, r3, #3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d12c      	bne.n	8007b3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aec:	3b01      	subs	r3, #1
 8007aee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d123      	bne.n	8007b3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d11b      	bne.n	8007b3c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d113      	bne.n	8007b3c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1e:	085b      	lsrs	r3, r3, #1
 8007b20:	3b01      	subs	r3, #1
 8007b22:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d109      	bne.n	8007b3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b32:	085b      	lsrs	r3, r3, #1
 8007b34:	3b01      	subs	r3, #1
 8007b36:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d071      	beq.n	8007c20 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	2b0c      	cmp	r3, #12
 8007b40:	d068      	beq.n	8007c14 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007b42:	4b35      	ldr	r3, [pc, #212]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d105      	bne.n	8007b5a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007b4e:	4b32      	ldr	r3, [pc, #200]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e0ac      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007b5e:	4b2e      	ldr	r3, [pc, #184]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a2d      	ldr	r2, [pc, #180]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007b64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b68:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007b6a:	f7fe fd17 	bl	800659c <HAL_GetTick>
 8007b6e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b70:	e008      	b.n	8007b84 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b72:	f7fe fd13 	bl	800659c <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d901      	bls.n	8007b84 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e099      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b84:	4b24      	ldr	r3, [pc, #144]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1f0      	bne.n	8007b72 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b90:	4b21      	ldr	r3, [pc, #132]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007b92:	68da      	ldr	r2, [r3, #12]
 8007b94:	4b21      	ldr	r3, [pc, #132]	; (8007c1c <HAL_RCC_OscConfig+0x788>)
 8007b96:	4013      	ands	r3, r2
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007ba0:	3a01      	subs	r2, #1
 8007ba2:	0112      	lsls	r2, r2, #4
 8007ba4:	4311      	orrs	r1, r2
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007baa:	0212      	lsls	r2, r2, #8
 8007bac:	4311      	orrs	r1, r2
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007bb2:	0852      	lsrs	r2, r2, #1
 8007bb4:	3a01      	subs	r2, #1
 8007bb6:	0552      	lsls	r2, r2, #21
 8007bb8:	4311      	orrs	r1, r2
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007bbe:	0852      	lsrs	r2, r2, #1
 8007bc0:	3a01      	subs	r2, #1
 8007bc2:	0652      	lsls	r2, r2, #25
 8007bc4:	4311      	orrs	r1, r2
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007bca:	06d2      	lsls	r2, r2, #27
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	4912      	ldr	r1, [pc, #72]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007bd4:	4b10      	ldr	r3, [pc, #64]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a0f      	ldr	r2, [pc, #60]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007be0:	4b0d      	ldr	r3, [pc, #52]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	4a0c      	ldr	r2, [pc, #48]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007bec:	f7fe fcd6 	bl	800659c <HAL_GetTick>
 8007bf0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bf2:	e008      	b.n	8007c06 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bf4:	f7fe fcd2 	bl	800659c <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d901      	bls.n	8007c06 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e058      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c06:	4b04      	ldr	r3, [pc, #16]	; (8007c18 <HAL_RCC_OscConfig+0x784>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d0f0      	beq.n	8007bf4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c12:	e050      	b.n	8007cb6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e04f      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
 8007c18:	40021000 	.word	0x40021000
 8007c1c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c20:	4b27      	ldr	r3, [pc, #156]	; (8007cc0 <HAL_RCC_OscConfig+0x82c>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d144      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007c2c:	4b24      	ldr	r3, [pc, #144]	; (8007cc0 <HAL_RCC_OscConfig+0x82c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a23      	ldr	r2, [pc, #140]	; (8007cc0 <HAL_RCC_OscConfig+0x82c>)
 8007c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007c38:	4b21      	ldr	r3, [pc, #132]	; (8007cc0 <HAL_RCC_OscConfig+0x82c>)
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	4a20      	ldr	r2, [pc, #128]	; (8007cc0 <HAL_RCC_OscConfig+0x82c>)
 8007c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007c44:	f7fe fcaa 	bl	800659c <HAL_GetTick>
 8007c48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c4a:	e008      	b.n	8007c5e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c4c:	f7fe fca6 	bl	800659c <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d901      	bls.n	8007c5e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e02c      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c5e:	4b18      	ldr	r3, [pc, #96]	; (8007cc0 <HAL_RCC_OscConfig+0x82c>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d0f0      	beq.n	8007c4c <HAL_RCC_OscConfig+0x7b8>
 8007c6a:	e024      	b.n	8007cb6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	2b0c      	cmp	r3, #12
 8007c70:	d01f      	beq.n	8007cb2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c72:	4b13      	ldr	r3, [pc, #76]	; (8007cc0 <HAL_RCC_OscConfig+0x82c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a12      	ldr	r2, [pc, #72]	; (8007cc0 <HAL_RCC_OscConfig+0x82c>)
 8007c78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c7e:	f7fe fc8d 	bl	800659c <HAL_GetTick>
 8007c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c84:	e008      	b.n	8007c98 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c86:	f7fe fc89 	bl	800659c <HAL_GetTick>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d901      	bls.n	8007c98 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e00f      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c98:	4b09      	ldr	r3, [pc, #36]	; (8007cc0 <HAL_RCC_OscConfig+0x82c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1f0      	bne.n	8007c86 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007ca4:	4b06      	ldr	r3, [pc, #24]	; (8007cc0 <HAL_RCC_OscConfig+0x82c>)
 8007ca6:	68da      	ldr	r2, [r3, #12]
 8007ca8:	4905      	ldr	r1, [pc, #20]	; (8007cc0 <HAL_RCC_OscConfig+0x82c>)
 8007caa:	4b06      	ldr	r3, [pc, #24]	; (8007cc4 <HAL_RCC_OscConfig+0x830>)
 8007cac:	4013      	ands	r3, r2
 8007cae:	60cb      	str	r3, [r1, #12]
 8007cb0:	e001      	b.n	8007cb6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e000      	b.n	8007cb8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3720      	adds	r7, #32
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	40021000 	.word	0x40021000
 8007cc4:	feeefffc 	.word	0xfeeefffc

08007cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e0e7      	b.n	8007eac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cdc:	4b75      	ldr	r3, [pc, #468]	; (8007eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0307 	and.w	r3, r3, #7
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d910      	bls.n	8007d0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cea:	4b72      	ldr	r3, [pc, #456]	; (8007eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f023 0207 	bic.w	r2, r3, #7
 8007cf2:	4970      	ldr	r1, [pc, #448]	; (8007eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cfa:	4b6e      	ldr	r3, [pc, #440]	; (8007eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0307 	and.w	r3, r3, #7
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d001      	beq.n	8007d0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e0cf      	b.n	8007eac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0302 	and.w	r3, r3, #2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d010      	beq.n	8007d3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	4b66      	ldr	r3, [pc, #408]	; (8007eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d908      	bls.n	8007d3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d28:	4b63      	ldr	r3, [pc, #396]	; (8007eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	4960      	ldr	r1, [pc, #384]	; (8007eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d04c      	beq.n	8007de0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d107      	bne.n	8007d5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d4e:	4b5a      	ldr	r3, [pc, #360]	; (8007eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d121      	bne.n	8007d9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e0a6      	b.n	8007eac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d107      	bne.n	8007d76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d66:	4b54      	ldr	r3, [pc, #336]	; (8007eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d115      	bne.n	8007d9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e09a      	b.n	8007eac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d107      	bne.n	8007d8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007d7e:	4b4e      	ldr	r3, [pc, #312]	; (8007eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d109      	bne.n	8007d9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e08e      	b.n	8007eac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d8e:	4b4a      	ldr	r3, [pc, #296]	; (8007eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e086      	b.n	8007eac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007d9e:	4b46      	ldr	r3, [pc, #280]	; (8007eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f023 0203 	bic.w	r2, r3, #3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	4943      	ldr	r1, [pc, #268]	; (8007eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8007dac:	4313      	orrs	r3, r2
 8007dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007db0:	f7fe fbf4 	bl	800659c <HAL_GetTick>
 8007db4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007db6:	e00a      	b.n	8007dce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007db8:	f7fe fbf0 	bl	800659c <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d901      	bls.n	8007dce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e06e      	b.n	8007eac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dce:	4b3a      	ldr	r3, [pc, #232]	; (8007eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f003 020c 	and.w	r2, r3, #12
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d1eb      	bne.n	8007db8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d010      	beq.n	8007e0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	4b31      	ldr	r3, [pc, #196]	; (8007eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d208      	bcs.n	8007e0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007dfc:	4b2e      	ldr	r3, [pc, #184]	; (8007eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	492b      	ldr	r1, [pc, #172]	; (8007eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e0e:	4b29      	ldr	r3, [pc, #164]	; (8007eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0307 	and.w	r3, r3, #7
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d210      	bcs.n	8007e3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e1c:	4b25      	ldr	r3, [pc, #148]	; (8007eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f023 0207 	bic.w	r2, r3, #7
 8007e24:	4923      	ldr	r1, [pc, #140]	; (8007eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e2c:	4b21      	ldr	r3, [pc, #132]	; (8007eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0307 	and.w	r3, r3, #7
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d001      	beq.n	8007e3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e036      	b.n	8007eac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 0304 	and.w	r3, r3, #4
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d008      	beq.n	8007e5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e4a:	4b1b      	ldr	r3, [pc, #108]	; (8007eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	4918      	ldr	r1, [pc, #96]	; (8007eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 0308 	and.w	r3, r3, #8
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d009      	beq.n	8007e7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e68:	4b13      	ldr	r3, [pc, #76]	; (8007eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	00db      	lsls	r3, r3, #3
 8007e76:	4910      	ldr	r1, [pc, #64]	; (8007eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007e7c:	f000 f824 	bl	8007ec8 <HAL_RCC_GetSysClockFreq>
 8007e80:	4602      	mov	r2, r0
 8007e82:	4b0d      	ldr	r3, [pc, #52]	; (8007eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	091b      	lsrs	r3, r3, #4
 8007e88:	f003 030f 	and.w	r3, r3, #15
 8007e8c:	490b      	ldr	r1, [pc, #44]	; (8007ebc <HAL_RCC_ClockConfig+0x1f4>)
 8007e8e:	5ccb      	ldrb	r3, [r1, r3]
 8007e90:	f003 031f 	and.w	r3, r3, #31
 8007e94:	fa22 f303 	lsr.w	r3, r2, r3
 8007e98:	4a09      	ldr	r2, [pc, #36]	; (8007ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8007e9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007e9c:	4b09      	ldr	r3, [pc, #36]	; (8007ec4 <HAL_RCC_ClockConfig+0x1fc>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fe fb2b 	bl	80064fc <HAL_InitTick>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	72fb      	strb	r3, [r7, #11]

  return status;
 8007eaa:	7afb      	ldrb	r3, [r7, #11]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	40022000 	.word	0x40022000
 8007eb8:	40021000 	.word	0x40021000
 8007ebc:	0800abf4 	.word	0x0800abf4
 8007ec0:	20000010 	.word	0x20000010
 8007ec4:	20000020 	.word	0x20000020

08007ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b089      	sub	sp, #36	; 0x24
 8007ecc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	61fb      	str	r3, [r7, #28]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ed6:	4b3e      	ldr	r3, [pc, #248]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f003 030c 	and.w	r3, r3, #12
 8007ede:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ee0:	4b3b      	ldr	r3, [pc, #236]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	f003 0303 	and.w	r3, r3, #3
 8007ee8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d005      	beq.n	8007efc <HAL_RCC_GetSysClockFreq+0x34>
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	2b0c      	cmp	r3, #12
 8007ef4:	d121      	bne.n	8007f3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d11e      	bne.n	8007f3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007efc:	4b34      	ldr	r3, [pc, #208]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0308 	and.w	r3, r3, #8
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d107      	bne.n	8007f18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007f08:	4b31      	ldr	r3, [pc, #196]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f0e:	0a1b      	lsrs	r3, r3, #8
 8007f10:	f003 030f 	and.w	r3, r3, #15
 8007f14:	61fb      	str	r3, [r7, #28]
 8007f16:	e005      	b.n	8007f24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007f18:	4b2d      	ldr	r3, [pc, #180]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	091b      	lsrs	r3, r3, #4
 8007f1e:	f003 030f 	and.w	r3, r3, #15
 8007f22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007f24:	4a2b      	ldr	r2, [pc, #172]	; (8007fd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10d      	bne.n	8007f50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f38:	e00a      	b.n	8007f50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	d102      	bne.n	8007f46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007f40:	4b25      	ldr	r3, [pc, #148]	; (8007fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007f42:	61bb      	str	r3, [r7, #24]
 8007f44:	e004      	b.n	8007f50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	2b08      	cmp	r3, #8
 8007f4a:	d101      	bne.n	8007f50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007f4c:	4b23      	ldr	r3, [pc, #140]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x114>)
 8007f4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	2b0c      	cmp	r3, #12
 8007f54:	d134      	bne.n	8007fc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f56:	4b1e      	ldr	r3, [pc, #120]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	f003 0303 	and.w	r3, r3, #3
 8007f5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d003      	beq.n	8007f6e <HAL_RCC_GetSysClockFreq+0xa6>
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d003      	beq.n	8007f74 <HAL_RCC_GetSysClockFreq+0xac>
 8007f6c:	e005      	b.n	8007f7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007f6e:	4b1a      	ldr	r3, [pc, #104]	; (8007fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007f70:	617b      	str	r3, [r7, #20]
      break;
 8007f72:	e005      	b.n	8007f80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007f74:	4b19      	ldr	r3, [pc, #100]	; (8007fdc <HAL_RCC_GetSysClockFreq+0x114>)
 8007f76:	617b      	str	r3, [r7, #20]
      break;
 8007f78:	e002      	b.n	8007f80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	617b      	str	r3, [r7, #20]
      break;
 8007f7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f80:	4b13      	ldr	r3, [pc, #76]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	091b      	lsrs	r3, r3, #4
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007f8e:	4b10      	ldr	r3, [pc, #64]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	0a1b      	lsrs	r3, r3, #8
 8007f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	fb03 f202 	mul.w	r2, r3, r2
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007fa6:	4b0a      	ldr	r3, [pc, #40]	; (8007fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	0e5b      	lsrs	r3, r3, #25
 8007fac:	f003 0303 	and.w	r3, r3, #3
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	005b      	lsls	r3, r3, #1
 8007fb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007fc0:	69bb      	ldr	r3, [r7, #24]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3724      	adds	r7, #36	; 0x24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	40021000 	.word	0x40021000
 8007fd4:	0800ac0c 	.word	0x0800ac0c
 8007fd8:	00f42400 	.word	0x00f42400
 8007fdc:	007a1200 	.word	0x007a1200

08007fe0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fe4:	4b03      	ldr	r3, [pc, #12]	; (8007ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	20000010 	.word	0x20000010

08007ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007ffc:	f7ff fff0 	bl	8007fe0 <HAL_RCC_GetHCLKFreq>
 8008000:	4602      	mov	r2, r0
 8008002:	4b06      	ldr	r3, [pc, #24]	; (800801c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	0a1b      	lsrs	r3, r3, #8
 8008008:	f003 0307 	and.w	r3, r3, #7
 800800c:	4904      	ldr	r1, [pc, #16]	; (8008020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800800e:	5ccb      	ldrb	r3, [r1, r3]
 8008010:	f003 031f 	and.w	r3, r3, #31
 8008014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008018:	4618      	mov	r0, r3
 800801a:	bd80      	pop	{r7, pc}
 800801c:	40021000 	.word	0x40021000
 8008020:	0800ac04 	.word	0x0800ac04

08008024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008028:	f7ff ffda 	bl	8007fe0 <HAL_RCC_GetHCLKFreq>
 800802c:	4602      	mov	r2, r0
 800802e:	4b06      	ldr	r3, [pc, #24]	; (8008048 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	0adb      	lsrs	r3, r3, #11
 8008034:	f003 0307 	and.w	r3, r3, #7
 8008038:	4904      	ldr	r1, [pc, #16]	; (800804c <HAL_RCC_GetPCLK2Freq+0x28>)
 800803a:	5ccb      	ldrb	r3, [r1, r3]
 800803c:	f003 031f 	and.w	r3, r3, #31
 8008040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008044:	4618      	mov	r0, r3
 8008046:	bd80      	pop	{r7, pc}
 8008048:	40021000 	.word	0x40021000
 800804c:	0800ac04 	.word	0x0800ac04

08008050 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008058:	2300      	movs	r3, #0
 800805a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800805c:	4b2a      	ldr	r3, [pc, #168]	; (8008108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800805e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d003      	beq.n	8008070 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008068:	f7ff f9b0 	bl	80073cc <HAL_PWREx_GetVoltageRange>
 800806c:	6178      	str	r0, [r7, #20]
 800806e:	e014      	b.n	800809a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008070:	4b25      	ldr	r3, [pc, #148]	; (8008108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008074:	4a24      	ldr	r2, [pc, #144]	; (8008108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800807a:	6593      	str	r3, [r2, #88]	; 0x58
 800807c:	4b22      	ldr	r3, [pc, #136]	; (8008108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800807e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008084:	60fb      	str	r3, [r7, #12]
 8008086:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008088:	f7ff f9a0 	bl	80073cc <HAL_PWREx_GetVoltageRange>
 800808c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800808e:	4b1e      	ldr	r3, [pc, #120]	; (8008108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008092:	4a1d      	ldr	r2, [pc, #116]	; (8008108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008098:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080a0:	d10b      	bne.n	80080ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b80      	cmp	r3, #128	; 0x80
 80080a6:	d919      	bls.n	80080dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2ba0      	cmp	r3, #160	; 0xa0
 80080ac:	d902      	bls.n	80080b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80080ae:	2302      	movs	r3, #2
 80080b0:	613b      	str	r3, [r7, #16]
 80080b2:	e013      	b.n	80080dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80080b4:	2301      	movs	r3, #1
 80080b6:	613b      	str	r3, [r7, #16]
 80080b8:	e010      	b.n	80080dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b80      	cmp	r3, #128	; 0x80
 80080be:	d902      	bls.n	80080c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80080c0:	2303      	movs	r3, #3
 80080c2:	613b      	str	r3, [r7, #16]
 80080c4:	e00a      	b.n	80080dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2b80      	cmp	r3, #128	; 0x80
 80080ca:	d102      	bne.n	80080d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80080cc:	2302      	movs	r3, #2
 80080ce:	613b      	str	r3, [r7, #16]
 80080d0:	e004      	b.n	80080dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2b70      	cmp	r3, #112	; 0x70
 80080d6:	d101      	bne.n	80080dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80080d8:	2301      	movs	r3, #1
 80080da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80080dc:	4b0b      	ldr	r3, [pc, #44]	; (800810c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f023 0207 	bic.w	r2, r3, #7
 80080e4:	4909      	ldr	r1, [pc, #36]	; (800810c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80080ec:	4b07      	ldr	r3, [pc, #28]	; (800810c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0307 	and.w	r3, r3, #7
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d001      	beq.n	80080fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e000      	b.n	8008100 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3718      	adds	r7, #24
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	40021000 	.word	0x40021000
 800810c:	40022000 	.word	0x40022000

08008110 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008118:	2300      	movs	r3, #0
 800811a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800811c:	2300      	movs	r3, #0
 800811e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008128:	2b00      	cmp	r3, #0
 800812a:	d041      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008130:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008134:	d02a      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008136:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800813a:	d824      	bhi.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800813c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008140:	d008      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008142:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008146:	d81e      	bhi.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00a      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800814c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008150:	d010      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008152:	e018      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008154:	4b86      	ldr	r3, [pc, #536]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	4a85      	ldr	r2, [pc, #532]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800815a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800815e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008160:	e015      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	3304      	adds	r3, #4
 8008166:	2100      	movs	r1, #0
 8008168:	4618      	mov	r0, r3
 800816a:	f000 facd 	bl	8008708 <RCCEx_PLLSAI1_Config>
 800816e:	4603      	mov	r3, r0
 8008170:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008172:	e00c      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	3320      	adds	r3, #32
 8008178:	2100      	movs	r1, #0
 800817a:	4618      	mov	r0, r3
 800817c:	f000 fbb6 	bl	80088ec <RCCEx_PLLSAI2_Config>
 8008180:	4603      	mov	r3, r0
 8008182:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008184:	e003      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	74fb      	strb	r3, [r7, #19]
      break;
 800818a:	e000      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800818c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800818e:	7cfb      	ldrb	r3, [r7, #19]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10b      	bne.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008194:	4b76      	ldr	r3, [pc, #472]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800819a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081a2:	4973      	ldr	r1, [pc, #460]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081a4:	4313      	orrs	r3, r2
 80081a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80081aa:	e001      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ac:	7cfb      	ldrb	r3, [r7, #19]
 80081ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d041      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80081c4:	d02a      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80081c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80081ca:	d824      	bhi.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80081cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081d0:	d008      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80081d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081d6:	d81e      	bhi.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00a      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80081dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081e0:	d010      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80081e2:	e018      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80081e4:	4b62      	ldr	r3, [pc, #392]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	4a61      	ldr	r2, [pc, #388]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80081f0:	e015      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	3304      	adds	r3, #4
 80081f6:	2100      	movs	r1, #0
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 fa85 	bl	8008708 <RCCEx_PLLSAI1_Config>
 80081fe:	4603      	mov	r3, r0
 8008200:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008202:	e00c      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3320      	adds	r3, #32
 8008208:	2100      	movs	r1, #0
 800820a:	4618      	mov	r0, r3
 800820c:	f000 fb6e 	bl	80088ec <RCCEx_PLLSAI2_Config>
 8008210:	4603      	mov	r3, r0
 8008212:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008214:	e003      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	74fb      	strb	r3, [r7, #19]
      break;
 800821a:	e000      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800821c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800821e:	7cfb      	ldrb	r3, [r7, #19]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10b      	bne.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008224:	4b52      	ldr	r3, [pc, #328]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800822a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008232:	494f      	ldr	r1, [pc, #316]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008234:	4313      	orrs	r3, r2
 8008236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800823a:	e001      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800823c:	7cfb      	ldrb	r3, [r7, #19]
 800823e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 80a0 	beq.w	800838e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800824e:	2300      	movs	r3, #0
 8008250:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008252:	4b47      	ldr	r3, [pc, #284]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800825e:	2301      	movs	r3, #1
 8008260:	e000      	b.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008262:	2300      	movs	r3, #0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00d      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008268:	4b41      	ldr	r3, [pc, #260]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800826a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800826c:	4a40      	ldr	r2, [pc, #256]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800826e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008272:	6593      	str	r3, [r2, #88]	; 0x58
 8008274:	4b3e      	ldr	r3, [pc, #248]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800827c:	60bb      	str	r3, [r7, #8]
 800827e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008280:	2301      	movs	r3, #1
 8008282:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008284:	4b3b      	ldr	r3, [pc, #236]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a3a      	ldr	r2, [pc, #232]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800828a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800828e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008290:	f7fe f984 	bl	800659c <HAL_GetTick>
 8008294:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008296:	e009      	b.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008298:	f7fe f980 	bl	800659c <HAL_GetTick>
 800829c:	4602      	mov	r2, r0
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d902      	bls.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	74fb      	strb	r3, [r7, #19]
        break;
 80082aa:	e005      	b.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80082ac:	4b31      	ldr	r3, [pc, #196]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d0ef      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80082b8:	7cfb      	ldrb	r3, [r7, #19]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d15c      	bne.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80082be:	4b2c      	ldr	r3, [pc, #176]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d01f      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d019      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80082dc:	4b24      	ldr	r3, [pc, #144]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80082e8:	4b21      	ldr	r3, [pc, #132]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ee:	4a20      	ldr	r2, [pc, #128]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082f8:	4b1d      	ldr	r3, [pc, #116]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082fe:	4a1c      	ldr	r2, [pc, #112]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008308:	4a19      	ldr	r2, [pc, #100]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f003 0301 	and.w	r3, r3, #1
 8008316:	2b00      	cmp	r3, #0
 8008318:	d016      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800831a:	f7fe f93f 	bl	800659c <HAL_GetTick>
 800831e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008320:	e00b      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008322:	f7fe f93b 	bl	800659c <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008330:	4293      	cmp	r3, r2
 8008332:	d902      	bls.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	74fb      	strb	r3, [r7, #19]
            break;
 8008338:	e006      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800833a:	4b0d      	ldr	r3, [pc, #52]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800833c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008340:	f003 0302 	and.w	r3, r3, #2
 8008344:	2b00      	cmp	r3, #0
 8008346:	d0ec      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008348:	7cfb      	ldrb	r3, [r7, #19]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10c      	bne.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800834e:	4b08      	ldr	r3, [pc, #32]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008354:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800835e:	4904      	ldr	r1, [pc, #16]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008360:	4313      	orrs	r3, r2
 8008362:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008366:	e009      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008368:	7cfb      	ldrb	r3, [r7, #19]
 800836a:	74bb      	strb	r3, [r7, #18]
 800836c:	e006      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800836e:	bf00      	nop
 8008370:	40021000 	.word	0x40021000
 8008374:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008378:	7cfb      	ldrb	r3, [r7, #19]
 800837a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800837c:	7c7b      	ldrb	r3, [r7, #17]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d105      	bne.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008382:	4ba6      	ldr	r3, [pc, #664]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008386:	4aa5      	ldr	r2, [pc, #660]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800838c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00a      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800839a:	4ba0      	ldr	r3, [pc, #640]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800839c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a0:	f023 0203 	bic.w	r2, r3, #3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a8:	499c      	ldr	r1, [pc, #624]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0302 	and.w	r3, r3, #2
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00a      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80083bc:	4b97      	ldr	r3, [pc, #604]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083c2:	f023 020c 	bic.w	r2, r3, #12
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ca:	4994      	ldr	r1, [pc, #592]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083cc:	4313      	orrs	r3, r2
 80083ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0304 	and.w	r3, r3, #4
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80083de:	4b8f      	ldr	r3, [pc, #572]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ec:	498b      	ldr	r1, [pc, #556]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80083ee:	4313      	orrs	r3, r2
 80083f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0308 	and.w	r3, r3, #8
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00a      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008400:	4b86      	ldr	r3, [pc, #536]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008406:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800840e:	4983      	ldr	r1, [pc, #524]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008410:	4313      	orrs	r3, r2
 8008412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 0310 	and.w	r3, r3, #16
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00a      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008422:	4b7e      	ldr	r3, [pc, #504]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008428:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008430:	497a      	ldr	r1, [pc, #488]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008432:	4313      	orrs	r3, r2
 8008434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 0320 	and.w	r3, r3, #32
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00a      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008444:	4b75      	ldr	r3, [pc, #468]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800844a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008452:	4972      	ldr	r1, [pc, #456]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008454:	4313      	orrs	r3, r2
 8008456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008466:	4b6d      	ldr	r3, [pc, #436]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800846c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008474:	4969      	ldr	r1, [pc, #420]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008476:	4313      	orrs	r3, r2
 8008478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00a      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008488:	4b64      	ldr	r3, [pc, #400]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800848a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800848e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008496:	4961      	ldr	r1, [pc, #388]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008498:	4313      	orrs	r3, r2
 800849a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00a      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80084aa:	4b5c      	ldr	r3, [pc, #368]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80084ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b8:	4958      	ldr	r1, [pc, #352]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80084ba:	4313      	orrs	r3, r2
 80084bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00a      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80084cc:	4b53      	ldr	r3, [pc, #332]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80084ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084da:	4950      	ldr	r1, [pc, #320]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80084dc:	4313      	orrs	r3, r2
 80084de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00a      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80084ee:	4b4b      	ldr	r3, [pc, #300]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80084f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084fc:	4947      	ldr	r1, [pc, #284]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00a      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008510:	4b42      	ldr	r3, [pc, #264]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008512:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008516:	f023 0203 	bic.w	r2, r3, #3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800851e:	493f      	ldr	r1, [pc, #252]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008520:	4313      	orrs	r3, r2
 8008522:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d028      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008532:	4b3a      	ldr	r3, [pc, #232]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008538:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008540:	4936      	ldr	r1, [pc, #216]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008542:	4313      	orrs	r3, r2
 8008544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008550:	d106      	bne.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008552:	4b32      	ldr	r3, [pc, #200]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	4a31      	ldr	r2, [pc, #196]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800855c:	60d3      	str	r3, [r2, #12]
 800855e:	e011      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008564:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008568:	d10c      	bne.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	3304      	adds	r3, #4
 800856e:	2101      	movs	r1, #1
 8008570:	4618      	mov	r0, r3
 8008572:	f000 f8c9 	bl	8008708 <RCCEx_PLLSAI1_Config>
 8008576:	4603      	mov	r3, r0
 8008578:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800857a:	7cfb      	ldrb	r3, [r7, #19]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d001      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8008580:	7cfb      	ldrb	r3, [r7, #19]
 8008582:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d028      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008590:	4b22      	ldr	r3, [pc, #136]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008596:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800859e:	491f      	ldr	r1, [pc, #124]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085ae:	d106      	bne.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085b0:	4b1a      	ldr	r3, [pc, #104]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	4a19      	ldr	r2, [pc, #100]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80085b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085ba:	60d3      	str	r3, [r2, #12]
 80085bc:	e011      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085c6:	d10c      	bne.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	3304      	adds	r3, #4
 80085cc:	2101      	movs	r1, #1
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 f89a 	bl	8008708 <RCCEx_PLLSAI1_Config>
 80085d4:	4603      	mov	r3, r0
 80085d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80085d8:	7cfb      	ldrb	r3, [r7, #19]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80085de:	7cfb      	ldrb	r3, [r7, #19]
 80085e0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d02a      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085ee:	4b0b      	ldr	r3, [pc, #44]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80085f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085fc:	4907      	ldr	r1, [pc, #28]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800860c:	d108      	bne.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800860e:	4b03      	ldr	r3, [pc, #12]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	4a02      	ldr	r2, [pc, #8]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8008614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008618:	60d3      	str	r3, [r2, #12]
 800861a:	e013      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800861c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008624:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008628:	d10c      	bne.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	3304      	adds	r3, #4
 800862e:	2101      	movs	r1, #1
 8008630:	4618      	mov	r0, r3
 8008632:	f000 f869 	bl	8008708 <RCCEx_PLLSAI1_Config>
 8008636:	4603      	mov	r3, r0
 8008638:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800863a:	7cfb      	ldrb	r3, [r7, #19]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d001      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8008640:	7cfb      	ldrb	r3, [r7, #19]
 8008642:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d02f      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008650:	4b2c      	ldr	r3, [pc, #176]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008656:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800865e:	4929      	ldr	r1, [pc, #164]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008660:	4313      	orrs	r3, r2
 8008662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800866a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800866e:	d10d      	bne.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	3304      	adds	r3, #4
 8008674:	2102      	movs	r1, #2
 8008676:	4618      	mov	r0, r3
 8008678:	f000 f846 	bl	8008708 <RCCEx_PLLSAI1_Config>
 800867c:	4603      	mov	r3, r0
 800867e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008680:	7cfb      	ldrb	r3, [r7, #19]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d014      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8008686:	7cfb      	ldrb	r3, [r7, #19]
 8008688:	74bb      	strb	r3, [r7, #18]
 800868a:	e011      	b.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008694:	d10c      	bne.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	3320      	adds	r3, #32
 800869a:	2102      	movs	r1, #2
 800869c:	4618      	mov	r0, r3
 800869e:	f000 f925 	bl	80088ec <RCCEx_PLLSAI2_Config>
 80086a2:	4603      	mov	r3, r0
 80086a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80086a6:	7cfb      	ldrb	r3, [r7, #19]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80086ac:	7cfb      	ldrb	r3, [r7, #19]
 80086ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00b      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80086bc:	4b11      	ldr	r3, [pc, #68]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80086be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086cc:	490d      	ldr	r1, [pc, #52]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80086ce:	4313      	orrs	r3, r2
 80086d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00b      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80086e0:	4b08      	ldr	r3, [pc, #32]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80086e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086f0:	4904      	ldr	r1, [pc, #16]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80086f2:	4313      	orrs	r3, r2
 80086f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80086f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3718      	adds	r7, #24
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	40021000 	.word	0x40021000

08008708 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008716:	4b74      	ldr	r3, [pc, #464]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	f003 0303 	and.w	r3, r3, #3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d018      	beq.n	8008754 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008722:	4b71      	ldr	r3, [pc, #452]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	f003 0203 	and.w	r2, r3, #3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	429a      	cmp	r2, r3
 8008730:	d10d      	bne.n	800874e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
       ||
 8008736:	2b00      	cmp	r3, #0
 8008738:	d009      	beq.n	800874e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800873a:	4b6b      	ldr	r3, [pc, #428]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	091b      	lsrs	r3, r3, #4
 8008740:	f003 0307 	and.w	r3, r3, #7
 8008744:	1c5a      	adds	r2, r3, #1
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	685b      	ldr	r3, [r3, #4]
       ||
 800874a:	429a      	cmp	r2, r3
 800874c:	d047      	beq.n	80087de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	73fb      	strb	r3, [r7, #15]
 8008752:	e044      	b.n	80087de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b03      	cmp	r3, #3
 800875a:	d018      	beq.n	800878e <RCCEx_PLLSAI1_Config+0x86>
 800875c:	2b03      	cmp	r3, #3
 800875e:	d825      	bhi.n	80087ac <RCCEx_PLLSAI1_Config+0xa4>
 8008760:	2b01      	cmp	r3, #1
 8008762:	d002      	beq.n	800876a <RCCEx_PLLSAI1_Config+0x62>
 8008764:	2b02      	cmp	r3, #2
 8008766:	d009      	beq.n	800877c <RCCEx_PLLSAI1_Config+0x74>
 8008768:	e020      	b.n	80087ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800876a:	4b5f      	ldr	r3, [pc, #380]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0302 	and.w	r3, r3, #2
 8008772:	2b00      	cmp	r3, #0
 8008774:	d11d      	bne.n	80087b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800877a:	e01a      	b.n	80087b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800877c:	4b5a      	ldr	r3, [pc, #360]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008784:	2b00      	cmp	r3, #0
 8008786:	d116      	bne.n	80087b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800878c:	e013      	b.n	80087b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800878e:	4b56      	ldr	r3, [pc, #344]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10f      	bne.n	80087ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800879a:	4b53      	ldr	r3, [pc, #332]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d109      	bne.n	80087ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80087aa:	e006      	b.n	80087ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	73fb      	strb	r3, [r7, #15]
      break;
 80087b0:	e004      	b.n	80087bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80087b2:	bf00      	nop
 80087b4:	e002      	b.n	80087bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80087b6:	bf00      	nop
 80087b8:	e000      	b.n	80087bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80087ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10d      	bne.n	80087de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80087c2:	4b49      	ldr	r3, [pc, #292]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6819      	ldr	r1, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	3b01      	subs	r3, #1
 80087d4:	011b      	lsls	r3, r3, #4
 80087d6:	430b      	orrs	r3, r1
 80087d8:	4943      	ldr	r1, [pc, #268]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80087de:	7bfb      	ldrb	r3, [r7, #15]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d17c      	bne.n	80088de <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80087e4:	4b40      	ldr	r3, [pc, #256]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a3f      	ldr	r2, [pc, #252]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80087ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087f0:	f7fd fed4 	bl	800659c <HAL_GetTick>
 80087f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80087f6:	e009      	b.n	800880c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80087f8:	f7fd fed0 	bl	800659c <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b02      	cmp	r3, #2
 8008804:	d902      	bls.n	800880c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	73fb      	strb	r3, [r7, #15]
        break;
 800880a:	e005      	b.n	8008818 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800880c:	4b36      	ldr	r3, [pc, #216]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1ef      	bne.n	80087f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008818:	7bfb      	ldrb	r3, [r7, #15]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d15f      	bne.n	80088de <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d110      	bne.n	8008846 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008824:	4b30      	ldr	r3, [pc, #192]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800882c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	6892      	ldr	r2, [r2, #8]
 8008834:	0211      	lsls	r1, r2, #8
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	68d2      	ldr	r2, [r2, #12]
 800883a:	06d2      	lsls	r2, r2, #27
 800883c:	430a      	orrs	r2, r1
 800883e:	492a      	ldr	r1, [pc, #168]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008840:	4313      	orrs	r3, r2
 8008842:	610b      	str	r3, [r1, #16]
 8008844:	e027      	b.n	8008896 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d112      	bne.n	8008872 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800884c:	4b26      	ldr	r3, [pc, #152]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008854:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	6892      	ldr	r2, [r2, #8]
 800885c:	0211      	lsls	r1, r2, #8
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	6912      	ldr	r2, [r2, #16]
 8008862:	0852      	lsrs	r2, r2, #1
 8008864:	3a01      	subs	r2, #1
 8008866:	0552      	lsls	r2, r2, #21
 8008868:	430a      	orrs	r2, r1
 800886a:	491f      	ldr	r1, [pc, #124]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800886c:	4313      	orrs	r3, r2
 800886e:	610b      	str	r3, [r1, #16]
 8008870:	e011      	b.n	8008896 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008872:	4b1d      	ldr	r3, [pc, #116]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800887a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	6892      	ldr	r2, [r2, #8]
 8008882:	0211      	lsls	r1, r2, #8
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	6952      	ldr	r2, [r2, #20]
 8008888:	0852      	lsrs	r2, r2, #1
 800888a:	3a01      	subs	r2, #1
 800888c:	0652      	lsls	r2, r2, #25
 800888e:	430a      	orrs	r2, r1
 8008890:	4915      	ldr	r1, [pc, #84]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008892:	4313      	orrs	r3, r2
 8008894:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008896:	4b14      	ldr	r3, [pc, #80]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a13      	ldr	r2, [pc, #76]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800889c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088a2:	f7fd fe7b 	bl	800659c <HAL_GetTick>
 80088a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80088a8:	e009      	b.n	80088be <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80088aa:	f7fd fe77 	bl	800659c <HAL_GetTick>
 80088ae:	4602      	mov	r2, r0
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d902      	bls.n	80088be <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	73fb      	strb	r3, [r7, #15]
          break;
 80088bc:	e005      	b.n	80088ca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80088be:	4b0a      	ldr	r3, [pc, #40]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0ef      	beq.n	80088aa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d106      	bne.n	80088de <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80088d0:	4b05      	ldr	r3, [pc, #20]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80088d2:	691a      	ldr	r2, [r3, #16]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	4903      	ldr	r1, [pc, #12]	; (80088e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80088de:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	40021000 	.word	0x40021000

080088ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80088fa:	4b69      	ldr	r3, [pc, #420]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	f003 0303 	and.w	r3, r3, #3
 8008902:	2b00      	cmp	r3, #0
 8008904:	d018      	beq.n	8008938 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008906:	4b66      	ldr	r3, [pc, #408]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	f003 0203 	and.w	r2, r3, #3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	429a      	cmp	r2, r3
 8008914:	d10d      	bne.n	8008932 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
       ||
 800891a:	2b00      	cmp	r3, #0
 800891c:	d009      	beq.n	8008932 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800891e:	4b60      	ldr	r3, [pc, #384]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	091b      	lsrs	r3, r3, #4
 8008924:	f003 0307 	and.w	r3, r3, #7
 8008928:	1c5a      	adds	r2, r3, #1
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
       ||
 800892e:	429a      	cmp	r2, r3
 8008930:	d047      	beq.n	80089c2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	73fb      	strb	r3, [r7, #15]
 8008936:	e044      	b.n	80089c2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b03      	cmp	r3, #3
 800893e:	d018      	beq.n	8008972 <RCCEx_PLLSAI2_Config+0x86>
 8008940:	2b03      	cmp	r3, #3
 8008942:	d825      	bhi.n	8008990 <RCCEx_PLLSAI2_Config+0xa4>
 8008944:	2b01      	cmp	r3, #1
 8008946:	d002      	beq.n	800894e <RCCEx_PLLSAI2_Config+0x62>
 8008948:	2b02      	cmp	r3, #2
 800894a:	d009      	beq.n	8008960 <RCCEx_PLLSAI2_Config+0x74>
 800894c:	e020      	b.n	8008990 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800894e:	4b54      	ldr	r3, [pc, #336]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b00      	cmp	r3, #0
 8008958:	d11d      	bne.n	8008996 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800895e:	e01a      	b.n	8008996 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008960:	4b4f      	ldr	r3, [pc, #316]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008968:	2b00      	cmp	r3, #0
 800896a:	d116      	bne.n	800899a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008970:	e013      	b.n	800899a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008972:	4b4b      	ldr	r3, [pc, #300]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10f      	bne.n	800899e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800897e:	4b48      	ldr	r3, [pc, #288]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d109      	bne.n	800899e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800898e:	e006      	b.n	800899e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	73fb      	strb	r3, [r7, #15]
      break;
 8008994:	e004      	b.n	80089a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008996:	bf00      	nop
 8008998:	e002      	b.n	80089a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800899a:	bf00      	nop
 800899c:	e000      	b.n	80089a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800899e:	bf00      	nop
    }

    if(status == HAL_OK)
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10d      	bne.n	80089c2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80089a6:	4b3e      	ldr	r3, [pc, #248]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6819      	ldr	r1, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	3b01      	subs	r3, #1
 80089b8:	011b      	lsls	r3, r3, #4
 80089ba:	430b      	orrs	r3, r1
 80089bc:	4938      	ldr	r1, [pc, #224]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d166      	bne.n	8008a96 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80089c8:	4b35      	ldr	r3, [pc, #212]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a34      	ldr	r2, [pc, #208]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80089ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089d4:	f7fd fde2 	bl	800659c <HAL_GetTick>
 80089d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80089da:	e009      	b.n	80089f0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80089dc:	f7fd fdde 	bl	800659c <HAL_GetTick>
 80089e0:	4602      	mov	r2, r0
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d902      	bls.n	80089f0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	73fb      	strb	r3, [r7, #15]
        break;
 80089ee:	e005      	b.n	80089fc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80089f0:	4b2b      	ldr	r3, [pc, #172]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1ef      	bne.n	80089dc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d149      	bne.n	8008a96 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d110      	bne.n	8008a2a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008a08:	4b25      	ldr	r3, [pc, #148]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008a0a:	695b      	ldr	r3, [r3, #20]
 8008a0c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008a10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	6892      	ldr	r2, [r2, #8]
 8008a18:	0211      	lsls	r1, r2, #8
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	68d2      	ldr	r2, [r2, #12]
 8008a1e:	06d2      	lsls	r2, r2, #27
 8008a20:	430a      	orrs	r2, r1
 8008a22:	491f      	ldr	r1, [pc, #124]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008a24:	4313      	orrs	r3, r2
 8008a26:	614b      	str	r3, [r1, #20]
 8008a28:	e011      	b.n	8008a4e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008a2a:	4b1d      	ldr	r3, [pc, #116]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008a32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	6892      	ldr	r2, [r2, #8]
 8008a3a:	0211      	lsls	r1, r2, #8
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	6912      	ldr	r2, [r2, #16]
 8008a40:	0852      	lsrs	r2, r2, #1
 8008a42:	3a01      	subs	r2, #1
 8008a44:	0652      	lsls	r2, r2, #25
 8008a46:	430a      	orrs	r2, r1
 8008a48:	4915      	ldr	r1, [pc, #84]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008a4e:	4b14      	ldr	r3, [pc, #80]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a13      	ldr	r2, [pc, #76]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a58:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a5a:	f7fd fd9f 	bl	800659c <HAL_GetTick>
 8008a5e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008a60:	e009      	b.n	8008a76 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008a62:	f7fd fd9b 	bl	800659c <HAL_GetTick>
 8008a66:	4602      	mov	r2, r0
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d902      	bls.n	8008a76 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	73fb      	strb	r3, [r7, #15]
          break;
 8008a74:	e005      	b.n	8008a82 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008a76:	4b0a      	ldr	r3, [pc, #40]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d0ef      	beq.n	8008a62 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d106      	bne.n	8008a96 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008a88:	4b05      	ldr	r3, [pc, #20]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008a8a:	695a      	ldr	r2, [r3, #20]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	4903      	ldr	r1, [pc, #12]	; (8008aa0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8008a92:	4313      	orrs	r3, r2
 8008a94:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	40021000 	.word	0x40021000

08008aa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e040      	b.n	8008b38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d106      	bne.n	8008acc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f7fd fb06 	bl	80060d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2224      	movs	r2, #36	; 0x24
 8008ad0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f022 0201 	bic.w	r2, r2, #1
 8008ae0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fc58 	bl	8009398 <UART_SetConfig>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d101      	bne.n	8008af2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e022      	b.n	8008b38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d002      	beq.n	8008b00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 ff04 	bl	8009908 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	689a      	ldr	r2, [r3, #8]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f042 0201 	orr.w	r2, r2, #1
 8008b2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 ff8b 	bl	8009a4c <UART_CheckIdleState>
 8008b36:	4603      	mov	r3, r0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e02b      	b.n	8008baa <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2224      	movs	r2, #36	; 0x24
 8008b56:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 0201 	bic.w	r2, r2, #1
 8008b66:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2200      	movs	r2, #0
 8008b76:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7fd fb69 	bl	8006258 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
	...

08008bb4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b08a      	sub	sp, #40	; 0x28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bc6:	2b20      	cmp	r3, #32
 8008bc8:	d178      	bne.n	8008cbc <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <HAL_UART_Transmit_DMA+0x22>
 8008bd0:	88fb      	ldrh	r3, [r7, #6]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e071      	b.n	8008cbe <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d101      	bne.n	8008be8 <HAL_UART_Transmit_DMA+0x34>
 8008be4:	2302      	movs	r3, #2
 8008be6:	e06a      	b.n	8008cbe <HAL_UART_Transmit_DMA+0x10a>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	88fa      	ldrh	r2, [r7, #6]
 8008bfa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	88fa      	ldrh	r2, [r7, #6]
 8008c02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2221      	movs	r2, #33	; 0x21
 8008c12:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d02b      	beq.n	8008c74 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c20:	4a29      	ldr	r2, [pc, #164]	; (8008cc8 <HAL_UART_Transmit_DMA+0x114>)
 8008c22:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c28:	4a28      	ldr	r2, [pc, #160]	; (8008ccc <HAL_UART_Transmit_DMA+0x118>)
 8008c2a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c30:	4a27      	ldr	r2, [pc, #156]	; (8008cd0 <HAL_UART_Transmit_DMA+0x11c>)
 8008c32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c38:	2200      	movs	r2, #0
 8008c3a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c44:	4619      	mov	r1, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	3328      	adds	r3, #40	; 0x28
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	88fb      	ldrh	r3, [r7, #6]
 8008c50:	f7fd ff62 	bl	8006b18 <HAL_DMA_Start_IT>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00c      	beq.n	8008c74 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2210      	movs	r2, #16
 8008c5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2220      	movs	r2, #32
 8008c6e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e024      	b.n	8008cbe <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2240      	movs	r2, #64	; 0x40
 8008c7a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3308      	adds	r3, #8
 8008c8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	e853 3f00 	ldrex	r3, [r3]
 8008c92:	613b      	str	r3, [r7, #16]
   return(result);
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	3308      	adds	r3, #8
 8008ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ca4:	623a      	str	r2, [r7, #32]
 8008ca6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca8:	69f9      	ldr	r1, [r7, #28]
 8008caa:	6a3a      	ldr	r2, [r7, #32]
 8008cac:	e841 2300 	strex	r3, r2, [r1]
 8008cb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d1e5      	bne.n	8008c84 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	e000      	b.n	8008cbe <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008cbc:	2302      	movs	r3, #2
  }
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3728      	adds	r7, #40	; 0x28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	08009ec7 	.word	0x08009ec7
 8008ccc:	08009f61 	.word	0x08009f61
 8008cd0:	0800a0d9 	.word	0x0800a0d9

08008cd4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b08a      	sub	sp, #40	; 0x28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ce6:	2b20      	cmp	r3, #32
 8008ce8:	d142      	bne.n	8008d70 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <HAL_UART_Receive_DMA+0x22>
 8008cf0:	88fb      	ldrh	r3, [r7, #6]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e03b      	b.n	8008d72 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d101      	bne.n	8008d08 <HAL_UART_Receive_DMA+0x34>
 8008d04:	2302      	movs	r3, #2
 8008d06:	e034      	b.n	8008d72 <HAL_UART_Receive_DMA+0x9e>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a18      	ldr	r2, [pc, #96]	; (8008d7c <HAL_UART_Receive_DMA+0xa8>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d01f      	beq.n	8008d60 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d018      	beq.n	8008d60 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	e853 3f00 	ldrex	r3, [r3]
 8008d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d42:	627b      	str	r3, [r7, #36]	; 0x24
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	461a      	mov	r2, r3
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	623b      	str	r3, [r7, #32]
 8008d4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d50:	69f9      	ldr	r1, [r7, #28]
 8008d52:	6a3a      	ldr	r2, [r7, #32]
 8008d54:	e841 2300 	strex	r3, r2, [r1]
 8008d58:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1e6      	bne.n	8008d2e <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008d60:	88fb      	ldrh	r3, [r7, #6]
 8008d62:	461a      	mov	r2, r3
 8008d64:	68b9      	ldr	r1, [r7, #8]
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f000 ff7e 	bl	8009c68 <UART_Start_Receive_DMA>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	e000      	b.n	8008d72 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008d70:	2302      	movs	r3, #2
  }
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3728      	adds	r7, #40	; 0x28
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	40008000 	.word	0x40008000

08008d80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b0ba      	sub	sp, #232	; 0xe8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008da6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008daa:	f640 030f 	movw	r3, #2063	; 0x80f
 8008dae:	4013      	ands	r3, r2
 8008db0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008db4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d115      	bne.n	8008de8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dc0:	f003 0320 	and.w	r3, r3, #32
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00f      	beq.n	8008de8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dcc:	f003 0320 	and.w	r3, r3, #32
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d009      	beq.n	8008de8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f000 82a6 	beq.w	800932a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	4798      	blx	r3
      }
      return;
 8008de6:	e2a0      	b.n	800932a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008de8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 8117 	beq.w	8009020 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d106      	bne.n	8008e0c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008dfe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008e02:	4b85      	ldr	r3, [pc, #532]	; (8009018 <HAL_UART_IRQHandler+0x298>)
 8008e04:	4013      	ands	r3, r2
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f000 810a 	beq.w	8009020 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d011      	beq.n	8008e3c <HAL_UART_IRQHandler+0xbc>
 8008e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00b      	beq.n	8008e3c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e32:	f043 0201 	orr.w	r2, r3, #1
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e40:	f003 0302 	and.w	r3, r3, #2
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d011      	beq.n	8008e6c <HAL_UART_IRQHandler+0xec>
 8008e48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00b      	beq.n	8008e6c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2202      	movs	r2, #2
 8008e5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e62:	f043 0204 	orr.w	r2, r3, #4
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e70:	f003 0304 	and.w	r3, r3, #4
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d011      	beq.n	8008e9c <HAL_UART_IRQHandler+0x11c>
 8008e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e7c:	f003 0301 	and.w	r3, r3, #1
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00b      	beq.n	8008e9c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2204      	movs	r2, #4
 8008e8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e92:	f043 0202 	orr.w	r2, r3, #2
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ea0:	f003 0308 	and.w	r3, r3, #8
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d017      	beq.n	8008ed8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eac:	f003 0320 	and.w	r3, r3, #32
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d105      	bne.n	8008ec0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008eb8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00b      	beq.n	8008ed8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2208      	movs	r2, #8
 8008ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ece:	f043 0208 	orr.w	r2, r3, #8
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d012      	beq.n	8008f0a <HAL_UART_IRQHandler+0x18a>
 8008ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ee8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00c      	beq.n	8008f0a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ef8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f00:	f043 0220 	orr.w	r2, r3, #32
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 820c 	beq.w	800932e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f1a:	f003 0320 	and.w	r3, r3, #32
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00d      	beq.n	8008f3e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f26:	f003 0320 	and.w	r3, r3, #32
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d007      	beq.n	8008f3e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d003      	beq.n	8008f3e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f52:	2b40      	cmp	r3, #64	; 0x40
 8008f54:	d005      	beq.n	8008f62 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d04f      	beq.n	8009002 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 ff4c 	bl	8009e00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f72:	2b40      	cmp	r3, #64	; 0x40
 8008f74:	d141      	bne.n	8008ffa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3308      	adds	r3, #8
 8008f7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f84:	e853 3f00 	ldrex	r3, [r3]
 8008f88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	3308      	adds	r3, #8
 8008f9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008fa2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008faa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008fae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008fb2:	e841 2300 	strex	r3, r2, [r1]
 8008fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008fba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1d9      	bne.n	8008f76 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d013      	beq.n	8008ff2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fce:	4a13      	ldr	r2, [pc, #76]	; (800901c <HAL_UART_IRQHandler+0x29c>)
 8008fd0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fd fe3c 	bl	8006c54 <HAL_DMA_Abort_IT>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d017      	beq.n	8009012 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008fec:	4610      	mov	r0, r2
 8008fee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ff0:	e00f      	b.n	8009012 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f9ba 	bl	800936c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ff8:	e00b      	b.n	8009012 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f9b6 	bl	800936c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009000:	e007      	b.n	8009012 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f9b2 	bl	800936c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009010:	e18d      	b.n	800932e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009012:	bf00      	nop
    return;
 8009014:	e18b      	b.n	800932e <HAL_UART_IRQHandler+0x5ae>
 8009016:	bf00      	nop
 8009018:	04000120 	.word	0x04000120
 800901c:	0800a155 	.word	0x0800a155

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009024:	2b01      	cmp	r3, #1
 8009026:	f040 8146 	bne.w	80092b6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800902a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800902e:	f003 0310 	and.w	r3, r3, #16
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 813f 	beq.w	80092b6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800903c:	f003 0310 	and.w	r3, r3, #16
 8009040:	2b00      	cmp	r3, #0
 8009042:	f000 8138 	beq.w	80092b6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2210      	movs	r2, #16
 800904c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009058:	2b40      	cmp	r3, #64	; 0x40
 800905a:	f040 80b4 	bne.w	80091c6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800906a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 815f 	beq.w	8009332 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800907a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800907e:	429a      	cmp	r2, r3
 8009080:	f080 8157 	bcs.w	8009332 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800908a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f003 0320 	and.w	r3, r3, #32
 800909a:	2b00      	cmp	r3, #0
 800909c:	f040 8085 	bne.w	80091aa <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090ac:	e853 3f00 	ldrex	r3, [r3]
 80090b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80090b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	461a      	mov	r2, r3
 80090c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80090ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80090d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80090da:	e841 2300 	strex	r3, r2, [r1]
 80090de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80090e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1da      	bne.n	80090a0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	3308      	adds	r3, #8
 80090f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090f4:	e853 3f00 	ldrex	r3, [r3]
 80090f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80090fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090fc:	f023 0301 	bic.w	r3, r3, #1
 8009100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3308      	adds	r3, #8
 800910a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800910e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009112:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009114:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009116:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800911a:	e841 2300 	strex	r3, r2, [r1]
 800911e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1e1      	bne.n	80090ea <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3308      	adds	r3, #8
 800912c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009130:	e853 3f00 	ldrex	r3, [r3]
 8009134:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800913c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	3308      	adds	r3, #8
 8009146:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800914a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800914c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009150:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009152:	e841 2300 	strex	r3, r2, [r1]
 8009156:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1e3      	bne.n	8009126 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2220      	movs	r2, #32
 8009162:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009172:	e853 3f00 	ldrex	r3, [r3]
 8009176:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800917a:	f023 0310 	bic.w	r3, r3, #16
 800917e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800918c:	65bb      	str	r3, [r7, #88]	; 0x58
 800918e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009190:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009192:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009194:	e841 2300 	strex	r3, r2, [r1]
 8009198:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800919a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800919c:	2b00      	cmp	r3, #0
 800919e:	d1e4      	bne.n	800916a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fd fd17 	bl	8006bd8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	4619      	mov	r1, r3
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f8de 	bl	8009380 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091c4:	e0b5      	b.n	8009332 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 80a7 	beq.w	8009336 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80091e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f000 80a2 	beq.w	8009336 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fa:	e853 3f00 	ldrex	r3, [r3]
 80091fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009202:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009206:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	461a      	mov	r2, r3
 8009210:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009214:	647b      	str	r3, [r7, #68]	; 0x44
 8009216:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009218:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800921a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800921c:	e841 2300 	strex	r3, r2, [r1]
 8009220:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1e4      	bne.n	80091f2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3308      	adds	r3, #8
 800922e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009232:	e853 3f00 	ldrex	r3, [r3]
 8009236:	623b      	str	r3, [r7, #32]
   return(result);
 8009238:	6a3b      	ldr	r3, [r7, #32]
 800923a:	f023 0301 	bic.w	r3, r3, #1
 800923e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	3308      	adds	r3, #8
 8009248:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800924c:	633a      	str	r2, [r7, #48]	; 0x30
 800924e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009250:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009254:	e841 2300 	strex	r3, r2, [r1]
 8009258:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800925a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1e3      	bne.n	8009228 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2220      	movs	r2, #32
 8009264:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	e853 3f00 	ldrex	r3, [r3]
 800927e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f023 0310 	bic.w	r3, r3, #16
 8009286:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	461a      	mov	r2, r3
 8009290:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009294:	61fb      	str	r3, [r7, #28]
 8009296:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009298:	69b9      	ldr	r1, [r7, #24]
 800929a:	69fa      	ldr	r2, [r7, #28]
 800929c:	e841 2300 	strex	r3, r2, [r1]
 80092a0:	617b      	str	r3, [r7, #20]
   return(result);
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1e4      	bne.n	8009272 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092ac:	4619      	mov	r1, r3
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f866 	bl	8009380 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092b4:	e03f      	b.n	8009336 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80092b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00e      	beq.n	80092e0 <HAL_UART_IRQHandler+0x560>
 80092c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d008      	beq.n	80092e0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80092d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 ff7b 	bl	800a1d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092de:	e02d      	b.n	800933c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80092e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00e      	beq.n	800930a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80092ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d008      	beq.n	800930a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d01c      	beq.n	800933a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	4798      	blx	r3
    }
    return;
 8009308:	e017      	b.n	800933a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800930a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800930e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009312:	2b00      	cmp	r3, #0
 8009314:	d012      	beq.n	800933c <HAL_UART_IRQHandler+0x5bc>
 8009316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800931a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00c      	beq.n	800933c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 ff2c 	bl	800a180 <UART_EndTransmit_IT>
    return;
 8009328:	e008      	b.n	800933c <HAL_UART_IRQHandler+0x5bc>
      return;
 800932a:	bf00      	nop
 800932c:	e006      	b.n	800933c <HAL_UART_IRQHandler+0x5bc>
    return;
 800932e:	bf00      	nop
 8009330:	e004      	b.n	800933c <HAL_UART_IRQHandler+0x5bc>
      return;
 8009332:	bf00      	nop
 8009334:	e002      	b.n	800933c <HAL_UART_IRQHandler+0x5bc>
      return;
 8009336:	bf00      	nop
 8009338:	e000      	b.n	800933c <HAL_UART_IRQHandler+0x5bc>
    return;
 800933a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800933c:	37e8      	adds	r7, #232	; 0xe8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop

08009344 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009374:	bf00      	nop
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	460b      	mov	r3, r1
 800938a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800938c:	bf00      	nop
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800939c:	b08a      	sub	sp, #40	; 0x28
 800939e:	af00      	add	r7, sp, #0
 80093a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093a2:	2300      	movs	r3, #0
 80093a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	689a      	ldr	r2, [r3, #8]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	431a      	orrs	r2, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	431a      	orrs	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	69db      	ldr	r3, [r3, #28]
 80093bc:	4313      	orrs	r3, r2
 80093be:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	4ba4      	ldr	r3, [pc, #656]	; (8009658 <UART_SetConfig+0x2c0>)
 80093c8:	4013      	ands	r3, r2
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	6812      	ldr	r2, [r2, #0]
 80093ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093d0:	430b      	orrs	r3, r1
 80093d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	68da      	ldr	r2, [r3, #12]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	430a      	orrs	r2, r1
 80093e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a99      	ldr	r2, [pc, #612]	; (800965c <UART_SetConfig+0x2c4>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d004      	beq.n	8009404 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009400:	4313      	orrs	r3, r2
 8009402:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009414:	430a      	orrs	r2, r1
 8009416:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a90      	ldr	r2, [pc, #576]	; (8009660 <UART_SetConfig+0x2c8>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d126      	bne.n	8009470 <UART_SetConfig+0xd8>
 8009422:	4b90      	ldr	r3, [pc, #576]	; (8009664 <UART_SetConfig+0x2cc>)
 8009424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009428:	f003 0303 	and.w	r3, r3, #3
 800942c:	2b03      	cmp	r3, #3
 800942e:	d81b      	bhi.n	8009468 <UART_SetConfig+0xd0>
 8009430:	a201      	add	r2, pc, #4	; (adr r2, 8009438 <UART_SetConfig+0xa0>)
 8009432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009436:	bf00      	nop
 8009438:	08009449 	.word	0x08009449
 800943c:	08009459 	.word	0x08009459
 8009440:	08009451 	.word	0x08009451
 8009444:	08009461 	.word	0x08009461
 8009448:	2301      	movs	r3, #1
 800944a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800944e:	e116      	b.n	800967e <UART_SetConfig+0x2e6>
 8009450:	2302      	movs	r3, #2
 8009452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009456:	e112      	b.n	800967e <UART_SetConfig+0x2e6>
 8009458:	2304      	movs	r3, #4
 800945a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800945e:	e10e      	b.n	800967e <UART_SetConfig+0x2e6>
 8009460:	2308      	movs	r3, #8
 8009462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009466:	e10a      	b.n	800967e <UART_SetConfig+0x2e6>
 8009468:	2310      	movs	r3, #16
 800946a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800946e:	e106      	b.n	800967e <UART_SetConfig+0x2e6>
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a7c      	ldr	r2, [pc, #496]	; (8009668 <UART_SetConfig+0x2d0>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d138      	bne.n	80094ec <UART_SetConfig+0x154>
 800947a:	4b7a      	ldr	r3, [pc, #488]	; (8009664 <UART_SetConfig+0x2cc>)
 800947c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009480:	f003 030c 	and.w	r3, r3, #12
 8009484:	2b0c      	cmp	r3, #12
 8009486:	d82d      	bhi.n	80094e4 <UART_SetConfig+0x14c>
 8009488:	a201      	add	r2, pc, #4	; (adr r2, 8009490 <UART_SetConfig+0xf8>)
 800948a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948e:	bf00      	nop
 8009490:	080094c5 	.word	0x080094c5
 8009494:	080094e5 	.word	0x080094e5
 8009498:	080094e5 	.word	0x080094e5
 800949c:	080094e5 	.word	0x080094e5
 80094a0:	080094d5 	.word	0x080094d5
 80094a4:	080094e5 	.word	0x080094e5
 80094a8:	080094e5 	.word	0x080094e5
 80094ac:	080094e5 	.word	0x080094e5
 80094b0:	080094cd 	.word	0x080094cd
 80094b4:	080094e5 	.word	0x080094e5
 80094b8:	080094e5 	.word	0x080094e5
 80094bc:	080094e5 	.word	0x080094e5
 80094c0:	080094dd 	.word	0x080094dd
 80094c4:	2300      	movs	r3, #0
 80094c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094ca:	e0d8      	b.n	800967e <UART_SetConfig+0x2e6>
 80094cc:	2302      	movs	r3, #2
 80094ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094d2:	e0d4      	b.n	800967e <UART_SetConfig+0x2e6>
 80094d4:	2304      	movs	r3, #4
 80094d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094da:	e0d0      	b.n	800967e <UART_SetConfig+0x2e6>
 80094dc:	2308      	movs	r3, #8
 80094de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094e2:	e0cc      	b.n	800967e <UART_SetConfig+0x2e6>
 80094e4:	2310      	movs	r3, #16
 80094e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80094ea:	e0c8      	b.n	800967e <UART_SetConfig+0x2e6>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a5e      	ldr	r2, [pc, #376]	; (800966c <UART_SetConfig+0x2d4>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d125      	bne.n	8009542 <UART_SetConfig+0x1aa>
 80094f6:	4b5b      	ldr	r3, [pc, #364]	; (8009664 <UART_SetConfig+0x2cc>)
 80094f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009500:	2b30      	cmp	r3, #48	; 0x30
 8009502:	d016      	beq.n	8009532 <UART_SetConfig+0x19a>
 8009504:	2b30      	cmp	r3, #48	; 0x30
 8009506:	d818      	bhi.n	800953a <UART_SetConfig+0x1a2>
 8009508:	2b20      	cmp	r3, #32
 800950a:	d00a      	beq.n	8009522 <UART_SetConfig+0x18a>
 800950c:	2b20      	cmp	r3, #32
 800950e:	d814      	bhi.n	800953a <UART_SetConfig+0x1a2>
 8009510:	2b00      	cmp	r3, #0
 8009512:	d002      	beq.n	800951a <UART_SetConfig+0x182>
 8009514:	2b10      	cmp	r3, #16
 8009516:	d008      	beq.n	800952a <UART_SetConfig+0x192>
 8009518:	e00f      	b.n	800953a <UART_SetConfig+0x1a2>
 800951a:	2300      	movs	r3, #0
 800951c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009520:	e0ad      	b.n	800967e <UART_SetConfig+0x2e6>
 8009522:	2302      	movs	r3, #2
 8009524:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009528:	e0a9      	b.n	800967e <UART_SetConfig+0x2e6>
 800952a:	2304      	movs	r3, #4
 800952c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009530:	e0a5      	b.n	800967e <UART_SetConfig+0x2e6>
 8009532:	2308      	movs	r3, #8
 8009534:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009538:	e0a1      	b.n	800967e <UART_SetConfig+0x2e6>
 800953a:	2310      	movs	r3, #16
 800953c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009540:	e09d      	b.n	800967e <UART_SetConfig+0x2e6>
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a4a      	ldr	r2, [pc, #296]	; (8009670 <UART_SetConfig+0x2d8>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d125      	bne.n	8009598 <UART_SetConfig+0x200>
 800954c:	4b45      	ldr	r3, [pc, #276]	; (8009664 <UART_SetConfig+0x2cc>)
 800954e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009552:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009556:	2bc0      	cmp	r3, #192	; 0xc0
 8009558:	d016      	beq.n	8009588 <UART_SetConfig+0x1f0>
 800955a:	2bc0      	cmp	r3, #192	; 0xc0
 800955c:	d818      	bhi.n	8009590 <UART_SetConfig+0x1f8>
 800955e:	2b80      	cmp	r3, #128	; 0x80
 8009560:	d00a      	beq.n	8009578 <UART_SetConfig+0x1e0>
 8009562:	2b80      	cmp	r3, #128	; 0x80
 8009564:	d814      	bhi.n	8009590 <UART_SetConfig+0x1f8>
 8009566:	2b00      	cmp	r3, #0
 8009568:	d002      	beq.n	8009570 <UART_SetConfig+0x1d8>
 800956a:	2b40      	cmp	r3, #64	; 0x40
 800956c:	d008      	beq.n	8009580 <UART_SetConfig+0x1e8>
 800956e:	e00f      	b.n	8009590 <UART_SetConfig+0x1f8>
 8009570:	2300      	movs	r3, #0
 8009572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009576:	e082      	b.n	800967e <UART_SetConfig+0x2e6>
 8009578:	2302      	movs	r3, #2
 800957a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800957e:	e07e      	b.n	800967e <UART_SetConfig+0x2e6>
 8009580:	2304      	movs	r3, #4
 8009582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009586:	e07a      	b.n	800967e <UART_SetConfig+0x2e6>
 8009588:	2308      	movs	r3, #8
 800958a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800958e:	e076      	b.n	800967e <UART_SetConfig+0x2e6>
 8009590:	2310      	movs	r3, #16
 8009592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009596:	e072      	b.n	800967e <UART_SetConfig+0x2e6>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a35      	ldr	r2, [pc, #212]	; (8009674 <UART_SetConfig+0x2dc>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d12a      	bne.n	80095f8 <UART_SetConfig+0x260>
 80095a2:	4b30      	ldr	r3, [pc, #192]	; (8009664 <UART_SetConfig+0x2cc>)
 80095a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095b0:	d01a      	beq.n	80095e8 <UART_SetConfig+0x250>
 80095b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095b6:	d81b      	bhi.n	80095f0 <UART_SetConfig+0x258>
 80095b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095bc:	d00c      	beq.n	80095d8 <UART_SetConfig+0x240>
 80095be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095c2:	d815      	bhi.n	80095f0 <UART_SetConfig+0x258>
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d003      	beq.n	80095d0 <UART_SetConfig+0x238>
 80095c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095cc:	d008      	beq.n	80095e0 <UART_SetConfig+0x248>
 80095ce:	e00f      	b.n	80095f0 <UART_SetConfig+0x258>
 80095d0:	2300      	movs	r3, #0
 80095d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095d6:	e052      	b.n	800967e <UART_SetConfig+0x2e6>
 80095d8:	2302      	movs	r3, #2
 80095da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095de:	e04e      	b.n	800967e <UART_SetConfig+0x2e6>
 80095e0:	2304      	movs	r3, #4
 80095e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095e6:	e04a      	b.n	800967e <UART_SetConfig+0x2e6>
 80095e8:	2308      	movs	r3, #8
 80095ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095ee:	e046      	b.n	800967e <UART_SetConfig+0x2e6>
 80095f0:	2310      	movs	r3, #16
 80095f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095f6:	e042      	b.n	800967e <UART_SetConfig+0x2e6>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a17      	ldr	r2, [pc, #92]	; (800965c <UART_SetConfig+0x2c4>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d13a      	bne.n	8009678 <UART_SetConfig+0x2e0>
 8009602:	4b18      	ldr	r3, [pc, #96]	; (8009664 <UART_SetConfig+0x2cc>)
 8009604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009608:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800960c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009610:	d01a      	beq.n	8009648 <UART_SetConfig+0x2b0>
 8009612:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009616:	d81b      	bhi.n	8009650 <UART_SetConfig+0x2b8>
 8009618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800961c:	d00c      	beq.n	8009638 <UART_SetConfig+0x2a0>
 800961e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009622:	d815      	bhi.n	8009650 <UART_SetConfig+0x2b8>
 8009624:	2b00      	cmp	r3, #0
 8009626:	d003      	beq.n	8009630 <UART_SetConfig+0x298>
 8009628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800962c:	d008      	beq.n	8009640 <UART_SetConfig+0x2a8>
 800962e:	e00f      	b.n	8009650 <UART_SetConfig+0x2b8>
 8009630:	2300      	movs	r3, #0
 8009632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009636:	e022      	b.n	800967e <UART_SetConfig+0x2e6>
 8009638:	2302      	movs	r3, #2
 800963a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800963e:	e01e      	b.n	800967e <UART_SetConfig+0x2e6>
 8009640:	2304      	movs	r3, #4
 8009642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009646:	e01a      	b.n	800967e <UART_SetConfig+0x2e6>
 8009648:	2308      	movs	r3, #8
 800964a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800964e:	e016      	b.n	800967e <UART_SetConfig+0x2e6>
 8009650:	2310      	movs	r3, #16
 8009652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009656:	e012      	b.n	800967e <UART_SetConfig+0x2e6>
 8009658:	efff69f3 	.word	0xefff69f3
 800965c:	40008000 	.word	0x40008000
 8009660:	40013800 	.word	0x40013800
 8009664:	40021000 	.word	0x40021000
 8009668:	40004400 	.word	0x40004400
 800966c:	40004800 	.word	0x40004800
 8009670:	40004c00 	.word	0x40004c00
 8009674:	40005000 	.word	0x40005000
 8009678:	2310      	movs	r3, #16
 800967a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a9f      	ldr	r2, [pc, #636]	; (8009900 <UART_SetConfig+0x568>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d17a      	bne.n	800977e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009688:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800968c:	2b08      	cmp	r3, #8
 800968e:	d824      	bhi.n	80096da <UART_SetConfig+0x342>
 8009690:	a201      	add	r2, pc, #4	; (adr r2, 8009698 <UART_SetConfig+0x300>)
 8009692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009696:	bf00      	nop
 8009698:	080096bd 	.word	0x080096bd
 800969c:	080096db 	.word	0x080096db
 80096a0:	080096c5 	.word	0x080096c5
 80096a4:	080096db 	.word	0x080096db
 80096a8:	080096cb 	.word	0x080096cb
 80096ac:	080096db 	.word	0x080096db
 80096b0:	080096db 	.word	0x080096db
 80096b4:	080096db 	.word	0x080096db
 80096b8:	080096d3 	.word	0x080096d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096bc:	f7fe fc9c 	bl	8007ff8 <HAL_RCC_GetPCLK1Freq>
 80096c0:	61f8      	str	r0, [r7, #28]
        break;
 80096c2:	e010      	b.n	80096e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096c4:	4b8f      	ldr	r3, [pc, #572]	; (8009904 <UART_SetConfig+0x56c>)
 80096c6:	61fb      	str	r3, [r7, #28]
        break;
 80096c8:	e00d      	b.n	80096e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096ca:	f7fe fbfd 	bl	8007ec8 <HAL_RCC_GetSysClockFreq>
 80096ce:	61f8      	str	r0, [r7, #28]
        break;
 80096d0:	e009      	b.n	80096e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096d6:	61fb      	str	r3, [r7, #28]
        break;
 80096d8:	e005      	b.n	80096e6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80096da:	2300      	movs	r3, #0
 80096dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80096e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f000 80fb 	beq.w	80098e4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	4613      	mov	r3, r2
 80096f4:	005b      	lsls	r3, r3, #1
 80096f6:	4413      	add	r3, r2
 80096f8:	69fa      	ldr	r2, [r7, #28]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d305      	bcc.n	800970a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009704:	69fa      	ldr	r2, [r7, #28]
 8009706:	429a      	cmp	r2, r3
 8009708:	d903      	bls.n	8009712 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009710:	e0e8      	b.n	80098e4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	2200      	movs	r2, #0
 8009716:	461c      	mov	r4, r3
 8009718:	4615      	mov	r5, r2
 800971a:	f04f 0200 	mov.w	r2, #0
 800971e:	f04f 0300 	mov.w	r3, #0
 8009722:	022b      	lsls	r3, r5, #8
 8009724:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009728:	0222      	lsls	r2, r4, #8
 800972a:	68f9      	ldr	r1, [r7, #12]
 800972c:	6849      	ldr	r1, [r1, #4]
 800972e:	0849      	lsrs	r1, r1, #1
 8009730:	2000      	movs	r0, #0
 8009732:	4688      	mov	r8, r1
 8009734:	4681      	mov	r9, r0
 8009736:	eb12 0a08 	adds.w	sl, r2, r8
 800973a:	eb43 0b09 	adc.w	fp, r3, r9
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	603b      	str	r3, [r7, #0]
 8009746:	607a      	str	r2, [r7, #4]
 8009748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800974c:	4650      	mov	r0, sl
 800974e:	4659      	mov	r1, fp
 8009750:	f7f6 fd9e 	bl	8000290 <__aeabi_uldivmod>
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	4613      	mov	r3, r2
 800975a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009762:	d308      	bcc.n	8009776 <UART_SetConfig+0x3de>
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800976a:	d204      	bcs.n	8009776 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	69ba      	ldr	r2, [r7, #24]
 8009772:	60da      	str	r2, [r3, #12]
 8009774:	e0b6      	b.n	80098e4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800977c:	e0b2      	b.n	80098e4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	69db      	ldr	r3, [r3, #28]
 8009782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009786:	d15e      	bne.n	8009846 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009788:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800978c:	2b08      	cmp	r3, #8
 800978e:	d828      	bhi.n	80097e2 <UART_SetConfig+0x44a>
 8009790:	a201      	add	r2, pc, #4	; (adr r2, 8009798 <UART_SetConfig+0x400>)
 8009792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009796:	bf00      	nop
 8009798:	080097bd 	.word	0x080097bd
 800979c:	080097c5 	.word	0x080097c5
 80097a0:	080097cd 	.word	0x080097cd
 80097a4:	080097e3 	.word	0x080097e3
 80097a8:	080097d3 	.word	0x080097d3
 80097ac:	080097e3 	.word	0x080097e3
 80097b0:	080097e3 	.word	0x080097e3
 80097b4:	080097e3 	.word	0x080097e3
 80097b8:	080097db 	.word	0x080097db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097bc:	f7fe fc1c 	bl	8007ff8 <HAL_RCC_GetPCLK1Freq>
 80097c0:	61f8      	str	r0, [r7, #28]
        break;
 80097c2:	e014      	b.n	80097ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097c4:	f7fe fc2e 	bl	8008024 <HAL_RCC_GetPCLK2Freq>
 80097c8:	61f8      	str	r0, [r7, #28]
        break;
 80097ca:	e010      	b.n	80097ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097cc:	4b4d      	ldr	r3, [pc, #308]	; (8009904 <UART_SetConfig+0x56c>)
 80097ce:	61fb      	str	r3, [r7, #28]
        break;
 80097d0:	e00d      	b.n	80097ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097d2:	f7fe fb79 	bl	8007ec8 <HAL_RCC_GetSysClockFreq>
 80097d6:	61f8      	str	r0, [r7, #28]
        break;
 80097d8:	e009      	b.n	80097ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097de:	61fb      	str	r3, [r7, #28]
        break;
 80097e0:	e005      	b.n	80097ee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80097e2:	2300      	movs	r3, #0
 80097e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80097ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d077      	beq.n	80098e4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	005a      	lsls	r2, r3, #1
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	085b      	lsrs	r3, r3, #1
 80097fe:	441a      	add	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	fbb2 f3f3 	udiv	r3, r2, r3
 8009808:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	2b0f      	cmp	r3, #15
 800980e:	d916      	bls.n	800983e <UART_SetConfig+0x4a6>
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009816:	d212      	bcs.n	800983e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	b29b      	uxth	r3, r3
 800981c:	f023 030f 	bic.w	r3, r3, #15
 8009820:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	085b      	lsrs	r3, r3, #1
 8009826:	b29b      	uxth	r3, r3
 8009828:	f003 0307 	and.w	r3, r3, #7
 800982c:	b29a      	uxth	r2, r3
 800982e:	8afb      	ldrh	r3, [r7, #22]
 8009830:	4313      	orrs	r3, r2
 8009832:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	8afa      	ldrh	r2, [r7, #22]
 800983a:	60da      	str	r2, [r3, #12]
 800983c:	e052      	b.n	80098e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009844:	e04e      	b.n	80098e4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009846:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800984a:	2b08      	cmp	r3, #8
 800984c:	d827      	bhi.n	800989e <UART_SetConfig+0x506>
 800984e:	a201      	add	r2, pc, #4	; (adr r2, 8009854 <UART_SetConfig+0x4bc>)
 8009850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009854:	08009879 	.word	0x08009879
 8009858:	08009881 	.word	0x08009881
 800985c:	08009889 	.word	0x08009889
 8009860:	0800989f 	.word	0x0800989f
 8009864:	0800988f 	.word	0x0800988f
 8009868:	0800989f 	.word	0x0800989f
 800986c:	0800989f 	.word	0x0800989f
 8009870:	0800989f 	.word	0x0800989f
 8009874:	08009897 	.word	0x08009897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009878:	f7fe fbbe 	bl	8007ff8 <HAL_RCC_GetPCLK1Freq>
 800987c:	61f8      	str	r0, [r7, #28]
        break;
 800987e:	e014      	b.n	80098aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009880:	f7fe fbd0 	bl	8008024 <HAL_RCC_GetPCLK2Freq>
 8009884:	61f8      	str	r0, [r7, #28]
        break;
 8009886:	e010      	b.n	80098aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009888:	4b1e      	ldr	r3, [pc, #120]	; (8009904 <UART_SetConfig+0x56c>)
 800988a:	61fb      	str	r3, [r7, #28]
        break;
 800988c:	e00d      	b.n	80098aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800988e:	f7fe fb1b 	bl	8007ec8 <HAL_RCC_GetSysClockFreq>
 8009892:	61f8      	str	r0, [r7, #28]
        break;
 8009894:	e009      	b.n	80098aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800989a:	61fb      	str	r3, [r7, #28]
        break;
 800989c:	e005      	b.n	80098aa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800989e:	2300      	movs	r3, #0
 80098a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80098a8:	bf00      	nop
    }

    if (pclk != 0U)
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d019      	beq.n	80098e4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	085a      	lsrs	r2, r3, #1
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	441a      	add	r2, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	fbb2 f3f3 	udiv	r3, r2, r3
 80098c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	2b0f      	cmp	r3, #15
 80098c8:	d909      	bls.n	80098de <UART_SetConfig+0x546>
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098d0:	d205      	bcs.n	80098de <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	60da      	str	r2, [r3, #12]
 80098dc:	e002      	b.n	80098e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80098f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3728      	adds	r7, #40	; 0x28
 80098f8:	46bd      	mov	sp, r7
 80098fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098fe:	bf00      	nop
 8009900:	40008000 	.word	0x40008000
 8009904:	00f42400 	.word	0x00f42400

08009908 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009914:	f003 0301 	and.w	r3, r3, #1
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00a      	beq.n	8009932 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	430a      	orrs	r2, r1
 8009930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00a      	beq.n	8009954 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	430a      	orrs	r2, r1
 8009952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009958:	f003 0304 	and.w	r3, r3, #4
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00a      	beq.n	8009976 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	430a      	orrs	r2, r1
 8009974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997a:	f003 0308 	and.w	r3, r3, #8
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00a      	beq.n	8009998 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	430a      	orrs	r2, r1
 8009996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999c:	f003 0310 	and.w	r3, r3, #16
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00a      	beq.n	80099ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	430a      	orrs	r2, r1
 80099b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099be:	f003 0320 	and.w	r3, r3, #32
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d00a      	beq.n	80099dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	430a      	orrs	r2, r1
 80099da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d01a      	beq.n	8009a1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	430a      	orrs	r2, r1
 80099fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a06:	d10a      	bne.n	8009a1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00a      	beq.n	8009a40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	430a      	orrs	r2, r1
 8009a3e:	605a      	str	r2, [r3, #4]
  }
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af02      	add	r7, sp, #8
 8009a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a5c:	f7fc fd9e 	bl	800659c <HAL_GetTick>
 8009a60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 0308 	and.w	r3, r3, #8
 8009a6c:	2b08      	cmp	r3, #8
 8009a6e:	d10e      	bne.n	8009a8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a74:	9300      	str	r3, [sp, #0]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f82d 	bl	8009ade <UART_WaitOnFlagUntilTimeout>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d001      	beq.n	8009a8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e023      	b.n	8009ad6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f003 0304 	and.w	r3, r3, #4
 8009a98:	2b04      	cmp	r3, #4
 8009a9a:	d10e      	bne.n	8009aba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 f817 	bl	8009ade <UART_WaitOnFlagUntilTimeout>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d001      	beq.n	8009aba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	e00d      	b.n	8009ad6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2220      	movs	r2, #32
 8009abe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2220      	movs	r2, #32
 8009ac4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b09c      	sub	sp, #112	; 0x70
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	60f8      	str	r0, [r7, #12]
 8009ae6:	60b9      	str	r1, [r7, #8]
 8009ae8:	603b      	str	r3, [r7, #0]
 8009aea:	4613      	mov	r3, r2
 8009aec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009aee:	e0a5      	b.n	8009c3c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af6:	f000 80a1 	beq.w	8009c3c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009afa:	f7fc fd4f 	bl	800659c <HAL_GetTick>
 8009afe:	4602      	mov	r2, r0
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d302      	bcc.n	8009b10 <UART_WaitOnFlagUntilTimeout+0x32>
 8009b0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d13e      	bne.n	8009b8e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b18:	e853 3f00 	ldrex	r3, [r3]
 8009b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b24:	667b      	str	r3, [r7, #100]	; 0x64
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b30:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009b36:	e841 2300 	strex	r3, r2, [r1]
 8009b3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1e6      	bne.n	8009b10 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	3308      	adds	r3, #8
 8009b48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b4c:	e853 3f00 	ldrex	r3, [r3]
 8009b50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b54:	f023 0301 	bic.w	r3, r3, #1
 8009b58:	663b      	str	r3, [r7, #96]	; 0x60
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	3308      	adds	r3, #8
 8009b60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b62:	64ba      	str	r2, [r7, #72]	; 0x48
 8009b64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b6a:	e841 2300 	strex	r3, r2, [r1]
 8009b6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1e5      	bne.n	8009b42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2220      	movs	r2, #32
 8009b7a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2220      	movs	r2, #32
 8009b80:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e067      	b.n	8009c5e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f003 0304 	and.w	r3, r3, #4
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d04f      	beq.n	8009c3c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	69db      	ldr	r3, [r3, #28]
 8009ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009baa:	d147      	bne.n	8009c3c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009bb4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbe:	e853 3f00 	ldrex	r3, [r3]
 8009bc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009bca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8009bd6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009bda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bdc:	e841 2300 	strex	r3, r2, [r1]
 8009be0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1e6      	bne.n	8009bb6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3308      	adds	r3, #8
 8009bee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	e853 3f00 	ldrex	r3, [r3]
 8009bf6:	613b      	str	r3, [r7, #16]
   return(result);
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	f023 0301 	bic.w	r3, r3, #1
 8009bfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3308      	adds	r3, #8
 8009c06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c08:	623a      	str	r2, [r7, #32]
 8009c0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0c:	69f9      	ldr	r1, [r7, #28]
 8009c0e:	6a3a      	ldr	r2, [r7, #32]
 8009c10:	e841 2300 	strex	r3, r2, [r1]
 8009c14:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1e5      	bne.n	8009be8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2220      	movs	r2, #32
 8009c20:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2220      	movs	r2, #32
 8009c26:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2220      	movs	r2, #32
 8009c2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009c38:	2303      	movs	r3, #3
 8009c3a:	e010      	b.n	8009c5e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	69da      	ldr	r2, [r3, #28]
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	4013      	ands	r3, r2
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	bf0c      	ite	eq
 8009c4c:	2301      	moveq	r3, #1
 8009c4e:	2300      	movne	r3, #0
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	461a      	mov	r2, r3
 8009c54:	79fb      	ldrb	r3, [r7, #7]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	f43f af4a 	beq.w	8009af0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3770      	adds	r7, #112	; 0x70
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
	...

08009c68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b096      	sub	sp, #88	; 0x58
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	4613      	mov	r3, r2
 8009c74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	88fa      	ldrh	r2, [r7, #6]
 8009c80:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2222      	movs	r2, #34	; 0x22
 8009c90:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d02b      	beq.n	8009cf2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c9e:	4a42      	ldr	r2, [pc, #264]	; (8009da8 <UART_Start_Receive_DMA+0x140>)
 8009ca0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca6:	4a41      	ldr	r2, [pc, #260]	; (8009dac <UART_Start_Receive_DMA+0x144>)
 8009ca8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cae:	4a40      	ldr	r2, [pc, #256]	; (8009db0 <UART_Start_Receive_DMA+0x148>)
 8009cb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3324      	adds	r3, #36	; 0x24
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cca:	461a      	mov	r2, r3
 8009ccc:	88fb      	ldrh	r3, [r7, #6]
 8009cce:	f7fc ff23 	bl	8006b18 <HAL_DMA_Start_IT>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00c      	beq.n	8009cf2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2210      	movs	r2, #16
 8009cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2220      	movs	r2, #32
 8009cec:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e055      	b.n	8009d9e <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d018      	beq.n	8009d34 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d0a:	e853 3f00 	ldrex	r3, [r3]
 8009d0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d16:	657b      	str	r3, [r7, #84]	; 0x54
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d20:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d22:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d28:	e841 2300 	strex	r3, r2, [r1]
 8009d2c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e6      	bne.n	8009d02 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	3308      	adds	r3, #8
 8009d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3e:	e853 3f00 	ldrex	r3, [r3]
 8009d42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	f043 0301 	orr.w	r3, r3, #1
 8009d4a:	653b      	str	r3, [r7, #80]	; 0x50
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3308      	adds	r3, #8
 8009d52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009d54:	637a      	str	r2, [r7, #52]	; 0x34
 8009d56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d5c:	e841 2300 	strex	r3, r2, [r1]
 8009d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1e5      	bne.n	8009d34 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	3308      	adds	r3, #8
 8009d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	e853 3f00 	ldrex	r3, [r3]
 8009d76:	613b      	str	r3, [r7, #16]
   return(result);
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	3308      	adds	r3, #8
 8009d86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d88:	623a      	str	r2, [r7, #32]
 8009d8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8c:	69f9      	ldr	r1, [r7, #28]
 8009d8e:	6a3a      	ldr	r2, [r7, #32]
 8009d90:	e841 2300 	strex	r3, r2, [r1]
 8009d94:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1e5      	bne.n	8009d68 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3758      	adds	r7, #88	; 0x58
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	08009f7d 	.word	0x08009f7d
 8009dac:	0800a0a1 	.word	0x0800a0a1
 8009db0:	0800a0d9 	.word	0x0800a0d9

08009db4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b089      	sub	sp, #36	; 0x24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	e853 3f00 	ldrex	r3, [r3]
 8009dc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009dd0:	61fb      	str	r3, [r7, #28]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	61bb      	str	r3, [r7, #24]
 8009ddc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dde:	6979      	ldr	r1, [r7, #20]
 8009de0:	69ba      	ldr	r2, [r7, #24]
 8009de2:	e841 2300 	strex	r3, r2, [r1]
 8009de6:	613b      	str	r3, [r7, #16]
   return(result);
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1e6      	bne.n	8009dbc <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2220      	movs	r2, #32
 8009df2:	679a      	str	r2, [r3, #120]	; 0x78
}
 8009df4:	bf00      	nop
 8009df6:	3724      	adds	r7, #36	; 0x24
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b095      	sub	sp, #84	; 0x54
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e10:	e853 3f00 	ldrex	r3, [r3]
 8009e14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e26:	643b      	str	r3, [r7, #64]	; 0x40
 8009e28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e2e:	e841 2300 	strex	r3, r2, [r1]
 8009e32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1e6      	bne.n	8009e08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	3308      	adds	r3, #8
 8009e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e42:	6a3b      	ldr	r3, [r7, #32]
 8009e44:	e853 3f00 	ldrex	r3, [r3]
 8009e48:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	f023 0301 	bic.w	r3, r3, #1
 8009e50:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3308      	adds	r3, #8
 8009e58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e62:	e841 2300 	strex	r3, r2, [r1]
 8009e66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1e5      	bne.n	8009e3a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d118      	bne.n	8009ea8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	e853 3f00 	ldrex	r3, [r3]
 8009e82:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	f023 0310 	bic.w	r3, r3, #16
 8009e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	461a      	mov	r2, r3
 8009e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e94:	61bb      	str	r3, [r7, #24]
 8009e96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e98:	6979      	ldr	r1, [r7, #20]
 8009e9a:	69ba      	ldr	r2, [r7, #24]
 8009e9c:	e841 2300 	strex	r3, r2, [r1]
 8009ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d1e6      	bne.n	8009e76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2220      	movs	r2, #32
 8009eac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009eba:	bf00      	nop
 8009ebc:	3754      	adds	r7, #84	; 0x54
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b090      	sub	sp, #64	; 0x40
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 0320 	and.w	r3, r3, #32
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d137      	bne.n	8009f52 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	3308      	adds	r3, #8
 8009ef0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef4:	e853 3f00 	ldrex	r3, [r3]
 8009ef8:	623b      	str	r3, [r7, #32]
   return(result);
 8009efa:	6a3b      	ldr	r3, [r7, #32]
 8009efc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f00:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	3308      	adds	r3, #8
 8009f08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f0a:	633a      	str	r2, [r7, #48]	; 0x30
 8009f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f12:	e841 2300 	strex	r3, r2, [r1]
 8009f16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1e5      	bne.n	8009eea <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	e853 3f00 	ldrex	r3, [r3]
 8009f2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f32:	637b      	str	r3, [r7, #52]	; 0x34
 8009f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	461a      	mov	r2, r3
 8009f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f3c:	61fb      	str	r3, [r7, #28]
 8009f3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f40:	69b9      	ldr	r1, [r7, #24]
 8009f42:	69fa      	ldr	r2, [r7, #28]
 8009f44:	e841 2300 	strex	r3, r2, [r1]
 8009f48:	617b      	str	r3, [r7, #20]
   return(result);
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d1e6      	bne.n	8009f1e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f50:	e002      	b.n	8009f58 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009f52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009f54:	f7fb ffe8 	bl	8005f28 <HAL_UART_TxCpltCallback>
}
 8009f58:	bf00      	nop
 8009f5a:	3740      	adds	r7, #64	; 0x40
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f6c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f7ff f9e8 	bl	8009344 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f74:	bf00      	nop
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b09c      	sub	sp, #112	; 0x70
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f88:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f003 0320 	and.w	r3, r3, #32
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d170      	bne.n	800a07a <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8009f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fa8:	e853 3f00 	ldrex	r3, [r3]
 8009fac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8009fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8009fc0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009fc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009fc6:	e841 2300 	strex	r3, r2, [r1]
 8009fca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1e6      	bne.n	8009fa0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	3308      	adds	r3, #8
 8009fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fdc:	e853 3f00 	ldrex	r3, [r3]
 8009fe0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe4:	f023 0301 	bic.w	r3, r3, #1
 8009fe8:	667b      	str	r3, [r7, #100]	; 0x64
 8009fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	3308      	adds	r3, #8
 8009ff0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009ff2:	647a      	str	r2, [r7, #68]	; 0x44
 8009ff4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ff8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ffa:	e841 2300 	strex	r3, r2, [r1]
 8009ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a002:	2b00      	cmp	r3, #0
 800a004:	d1e5      	bne.n	8009fd2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	3308      	adds	r3, #8
 800a00c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a010:	e853 3f00 	ldrex	r3, [r3]
 800a014:	623b      	str	r3, [r7, #32]
   return(result);
 800a016:	6a3b      	ldr	r3, [r7, #32]
 800a018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a01c:	663b      	str	r3, [r7, #96]	; 0x60
 800a01e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	3308      	adds	r3, #8
 800a024:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a026:	633a      	str	r2, [r7, #48]	; 0x30
 800a028:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a02c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a02e:	e841 2300 	strex	r3, r2, [r1]
 800a032:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a036:	2b00      	cmp	r3, #0
 800a038:	d1e5      	bne.n	800a006 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a03a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a03c:	2220      	movs	r2, #32
 800a03e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a044:	2b01      	cmp	r3, #1
 800a046:	d118      	bne.n	800a07a <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	e853 3f00 	ldrex	r3, [r3]
 800a054:	60fb      	str	r3, [r7, #12]
   return(result);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f023 0310 	bic.w	r3, r3, #16
 800a05c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a05e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	461a      	mov	r2, r3
 800a064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a066:	61fb      	str	r3, [r7, #28]
 800a068:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06a:	69b9      	ldr	r1, [r7, #24]
 800a06c:	69fa      	ldr	r2, [r7, #28]
 800a06e:	e841 2300 	strex	r3, r2, [r1]
 800a072:	617b      	str	r3, [r7, #20]
   return(result);
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1e6      	bne.n	800a048 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a07a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a07c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d107      	bne.n	800a092 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a084:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a088:	4619      	mov	r1, r3
 800a08a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a08c:	f7ff f978 	bl	8009380 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a090:	e002      	b.n	800a098 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800a092:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a094:	f7fb ff58 	bl	8005f48 <HAL_UART_RxCpltCallback>
}
 800a098:	bf00      	nop
 800a09a:	3770      	adds	r7, #112	; 0x70
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ac:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d109      	bne.n	800a0ca <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a0bc:	085b      	lsrs	r3, r3, #1
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f7ff f95c 	bl	8009380 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a0c8:	e002      	b.n	800a0d0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f7ff f944 	bl	8009358 <HAL_UART_RxHalfCpltCallback>
}
 800a0d0:	bf00      	nop
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b086      	sub	sp, #24
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0ea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0f0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0fc:	2b80      	cmp	r3, #128	; 0x80
 800a0fe:	d109      	bne.n	800a114 <UART_DMAError+0x3c>
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	2b21      	cmp	r3, #33	; 0x21
 800a104:	d106      	bne.n	800a114 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	2200      	movs	r2, #0
 800a10a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a10e:	6978      	ldr	r0, [r7, #20]
 800a110:	f7ff fe50 	bl	8009db4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a11e:	2b40      	cmp	r3, #64	; 0x40
 800a120:	d109      	bne.n	800a136 <UART_DMAError+0x5e>
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2b22      	cmp	r3, #34	; 0x22
 800a126:	d106      	bne.n	800a136 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a130:	6978      	ldr	r0, [r7, #20]
 800a132:	f7ff fe65 	bl	8009e00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a13c:	f043 0210 	orr.w	r2, r3, #16
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a146:	6978      	ldr	r0, [r7, #20]
 800a148:	f7ff f910 	bl	800936c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a14c:	bf00      	nop
 800a14e:	3718      	adds	r7, #24
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a160:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2200      	movs	r2, #0
 800a166:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f7ff f8fa 	bl	800936c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a178:	bf00      	nop
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b088      	sub	sp, #32
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	e853 3f00 	ldrex	r3, [r3]
 800a194:	60bb      	str	r3, [r7, #8]
   return(result);
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a19c:	61fb      	str	r3, [r7, #28]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	61bb      	str	r3, [r7, #24]
 800a1a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1aa:	6979      	ldr	r1, [r7, #20]
 800a1ac:	69ba      	ldr	r2, [r7, #24]
 800a1ae:	e841 2300 	strex	r3, r2, [r1]
 800a1b2:	613b      	str	r3, [r7, #16]
   return(result);
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1e6      	bne.n	800a188 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2220      	movs	r2, #32
 800a1be:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7fb feae 	bl	8005f28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1cc:	bf00      	nop
 800a1ce:	3720      	adds	r7, #32
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800a1e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a220 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a1ec:	f7fc f8dc 	bl	80063a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a1f0:	480c      	ldr	r0, [pc, #48]	; (800a224 <LoopForever+0x6>)
  ldr r1, =_edata
 800a1f2:	490d      	ldr	r1, [pc, #52]	; (800a228 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a1f4:	4a0d      	ldr	r2, [pc, #52]	; (800a22c <LoopForever+0xe>)
  movs r3, #0
 800a1f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a1f8:	e002      	b.n	800a200 <LoopCopyDataInit>

0800a1fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a1fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a1fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a1fe:	3304      	adds	r3, #4

0800a200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a204:	d3f9      	bcc.n	800a1fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a206:	4a0a      	ldr	r2, [pc, #40]	; (800a230 <LoopForever+0x12>)
  ldr r4, =_ebss
 800a208:	4c0a      	ldr	r4, [pc, #40]	; (800a234 <LoopForever+0x16>)
  movs r3, #0
 800a20a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a20c:	e001      	b.n	800a212 <LoopFillZerobss>

0800a20e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a20e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a210:	3204      	adds	r2, #4

0800a212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a214:	d3fb      	bcc.n	800a20e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a216:	f000 f817 	bl	800a248 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a21a:	f7fb fc51 	bl	8005ac0 <main>

0800a21e <LoopForever>:

LoopForever:
    b LoopForever
 800a21e:	e7fe      	b.n	800a21e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800a220:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800a224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a228:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800a22c:	0800ac88 	.word	0x0800ac88
  ldr r2, =_sbss
 800a230:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800a234:	200002b0 	.word	0x200002b0

0800a238 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a238:	e7fe      	b.n	800a238 <ADC1_2_IRQHandler>
	...

0800a23c <__errno>:
 800a23c:	4b01      	ldr	r3, [pc, #4]	; (800a244 <__errno+0x8>)
 800a23e:	6818      	ldr	r0, [r3, #0]
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	20000028 	.word	0x20000028

0800a248 <__libc_init_array>:
 800a248:	b570      	push	{r4, r5, r6, lr}
 800a24a:	4d0d      	ldr	r5, [pc, #52]	; (800a280 <__libc_init_array+0x38>)
 800a24c:	4c0d      	ldr	r4, [pc, #52]	; (800a284 <__libc_init_array+0x3c>)
 800a24e:	1b64      	subs	r4, r4, r5
 800a250:	10a4      	asrs	r4, r4, #2
 800a252:	2600      	movs	r6, #0
 800a254:	42a6      	cmp	r6, r4
 800a256:	d109      	bne.n	800a26c <__libc_init_array+0x24>
 800a258:	4d0b      	ldr	r5, [pc, #44]	; (800a288 <__libc_init_array+0x40>)
 800a25a:	4c0c      	ldr	r4, [pc, #48]	; (800a28c <__libc_init_array+0x44>)
 800a25c:	f000 fca0 	bl	800aba0 <_init>
 800a260:	1b64      	subs	r4, r4, r5
 800a262:	10a4      	asrs	r4, r4, #2
 800a264:	2600      	movs	r6, #0
 800a266:	42a6      	cmp	r6, r4
 800a268:	d105      	bne.n	800a276 <__libc_init_array+0x2e>
 800a26a:	bd70      	pop	{r4, r5, r6, pc}
 800a26c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a270:	4798      	blx	r3
 800a272:	3601      	adds	r6, #1
 800a274:	e7ee      	b.n	800a254 <__libc_init_array+0xc>
 800a276:	f855 3b04 	ldr.w	r3, [r5], #4
 800a27a:	4798      	blx	r3
 800a27c:	3601      	adds	r6, #1
 800a27e:	e7f2      	b.n	800a266 <__libc_init_array+0x1e>
 800a280:	0800ac80 	.word	0x0800ac80
 800a284:	0800ac80 	.word	0x0800ac80
 800a288:	0800ac80 	.word	0x0800ac80
 800a28c:	0800ac84 	.word	0x0800ac84

0800a290 <memcpy>:
 800a290:	440a      	add	r2, r1
 800a292:	4291      	cmp	r1, r2
 800a294:	f100 33ff 	add.w	r3, r0, #4294967295
 800a298:	d100      	bne.n	800a29c <memcpy+0xc>
 800a29a:	4770      	bx	lr
 800a29c:	b510      	push	{r4, lr}
 800a29e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2a6:	4291      	cmp	r1, r2
 800a2a8:	d1f9      	bne.n	800a29e <memcpy+0xe>
 800a2aa:	bd10      	pop	{r4, pc}

0800a2ac <memset>:
 800a2ac:	4402      	add	r2, r0
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d100      	bne.n	800a2b6 <memset+0xa>
 800a2b4:	4770      	bx	lr
 800a2b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a2ba:	e7f9      	b.n	800a2b0 <memset+0x4>

0800a2bc <siprintf>:
 800a2bc:	b40e      	push	{r1, r2, r3}
 800a2be:	b500      	push	{lr}
 800a2c0:	b09c      	sub	sp, #112	; 0x70
 800a2c2:	ab1d      	add	r3, sp, #116	; 0x74
 800a2c4:	9002      	str	r0, [sp, #8]
 800a2c6:	9006      	str	r0, [sp, #24]
 800a2c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a2cc:	4809      	ldr	r0, [pc, #36]	; (800a2f4 <siprintf+0x38>)
 800a2ce:	9107      	str	r1, [sp, #28]
 800a2d0:	9104      	str	r1, [sp, #16]
 800a2d2:	4909      	ldr	r1, [pc, #36]	; (800a2f8 <siprintf+0x3c>)
 800a2d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2d8:	9105      	str	r1, [sp, #20]
 800a2da:	6800      	ldr	r0, [r0, #0]
 800a2dc:	9301      	str	r3, [sp, #4]
 800a2de:	a902      	add	r1, sp, #8
 800a2e0:	f000 f87a 	bl	800a3d8 <_svfiprintf_r>
 800a2e4:	9b02      	ldr	r3, [sp, #8]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	701a      	strb	r2, [r3, #0]
 800a2ea:	b01c      	add	sp, #112	; 0x70
 800a2ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2f0:	b003      	add	sp, #12
 800a2f2:	4770      	bx	lr
 800a2f4:	20000028 	.word	0x20000028
 800a2f8:	ffff0208 	.word	0xffff0208

0800a2fc <strncpy>:
 800a2fc:	b510      	push	{r4, lr}
 800a2fe:	3901      	subs	r1, #1
 800a300:	4603      	mov	r3, r0
 800a302:	b132      	cbz	r2, 800a312 <strncpy+0x16>
 800a304:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a308:	f803 4b01 	strb.w	r4, [r3], #1
 800a30c:	3a01      	subs	r2, #1
 800a30e:	2c00      	cmp	r4, #0
 800a310:	d1f7      	bne.n	800a302 <strncpy+0x6>
 800a312:	441a      	add	r2, r3
 800a314:	2100      	movs	r1, #0
 800a316:	4293      	cmp	r3, r2
 800a318:	d100      	bne.n	800a31c <strncpy+0x20>
 800a31a:	bd10      	pop	{r4, pc}
 800a31c:	f803 1b01 	strb.w	r1, [r3], #1
 800a320:	e7f9      	b.n	800a316 <strncpy+0x1a>

0800a322 <__ssputs_r>:
 800a322:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a326:	688e      	ldr	r6, [r1, #8]
 800a328:	429e      	cmp	r6, r3
 800a32a:	4682      	mov	sl, r0
 800a32c:	460c      	mov	r4, r1
 800a32e:	4690      	mov	r8, r2
 800a330:	461f      	mov	r7, r3
 800a332:	d838      	bhi.n	800a3a6 <__ssputs_r+0x84>
 800a334:	898a      	ldrh	r2, [r1, #12]
 800a336:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a33a:	d032      	beq.n	800a3a2 <__ssputs_r+0x80>
 800a33c:	6825      	ldr	r5, [r4, #0]
 800a33e:	6909      	ldr	r1, [r1, #16]
 800a340:	eba5 0901 	sub.w	r9, r5, r1
 800a344:	6965      	ldr	r5, [r4, #20]
 800a346:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a34a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a34e:	3301      	adds	r3, #1
 800a350:	444b      	add	r3, r9
 800a352:	106d      	asrs	r5, r5, #1
 800a354:	429d      	cmp	r5, r3
 800a356:	bf38      	it	cc
 800a358:	461d      	movcc	r5, r3
 800a35a:	0553      	lsls	r3, r2, #21
 800a35c:	d531      	bpl.n	800a3c2 <__ssputs_r+0xa0>
 800a35e:	4629      	mov	r1, r5
 800a360:	f000 fb54 	bl	800aa0c <_malloc_r>
 800a364:	4606      	mov	r6, r0
 800a366:	b950      	cbnz	r0, 800a37e <__ssputs_r+0x5c>
 800a368:	230c      	movs	r3, #12
 800a36a:	f8ca 3000 	str.w	r3, [sl]
 800a36e:	89a3      	ldrh	r3, [r4, #12]
 800a370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a374:	81a3      	strh	r3, [r4, #12]
 800a376:	f04f 30ff 	mov.w	r0, #4294967295
 800a37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a37e:	6921      	ldr	r1, [r4, #16]
 800a380:	464a      	mov	r2, r9
 800a382:	f7ff ff85 	bl	800a290 <memcpy>
 800a386:	89a3      	ldrh	r3, [r4, #12]
 800a388:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a38c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a390:	81a3      	strh	r3, [r4, #12]
 800a392:	6126      	str	r6, [r4, #16]
 800a394:	6165      	str	r5, [r4, #20]
 800a396:	444e      	add	r6, r9
 800a398:	eba5 0509 	sub.w	r5, r5, r9
 800a39c:	6026      	str	r6, [r4, #0]
 800a39e:	60a5      	str	r5, [r4, #8]
 800a3a0:	463e      	mov	r6, r7
 800a3a2:	42be      	cmp	r6, r7
 800a3a4:	d900      	bls.n	800a3a8 <__ssputs_r+0x86>
 800a3a6:	463e      	mov	r6, r7
 800a3a8:	6820      	ldr	r0, [r4, #0]
 800a3aa:	4632      	mov	r2, r6
 800a3ac:	4641      	mov	r1, r8
 800a3ae:	f000 faa7 	bl	800a900 <memmove>
 800a3b2:	68a3      	ldr	r3, [r4, #8]
 800a3b4:	1b9b      	subs	r3, r3, r6
 800a3b6:	60a3      	str	r3, [r4, #8]
 800a3b8:	6823      	ldr	r3, [r4, #0]
 800a3ba:	4433      	add	r3, r6
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	2000      	movs	r0, #0
 800a3c0:	e7db      	b.n	800a37a <__ssputs_r+0x58>
 800a3c2:	462a      	mov	r2, r5
 800a3c4:	f000 fb96 	bl	800aaf4 <_realloc_r>
 800a3c8:	4606      	mov	r6, r0
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	d1e1      	bne.n	800a392 <__ssputs_r+0x70>
 800a3ce:	6921      	ldr	r1, [r4, #16]
 800a3d0:	4650      	mov	r0, sl
 800a3d2:	f000 faaf 	bl	800a934 <_free_r>
 800a3d6:	e7c7      	b.n	800a368 <__ssputs_r+0x46>

0800a3d8 <_svfiprintf_r>:
 800a3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3dc:	4698      	mov	r8, r3
 800a3de:	898b      	ldrh	r3, [r1, #12]
 800a3e0:	061b      	lsls	r3, r3, #24
 800a3e2:	b09d      	sub	sp, #116	; 0x74
 800a3e4:	4607      	mov	r7, r0
 800a3e6:	460d      	mov	r5, r1
 800a3e8:	4614      	mov	r4, r2
 800a3ea:	d50e      	bpl.n	800a40a <_svfiprintf_r+0x32>
 800a3ec:	690b      	ldr	r3, [r1, #16]
 800a3ee:	b963      	cbnz	r3, 800a40a <_svfiprintf_r+0x32>
 800a3f0:	2140      	movs	r1, #64	; 0x40
 800a3f2:	f000 fb0b 	bl	800aa0c <_malloc_r>
 800a3f6:	6028      	str	r0, [r5, #0]
 800a3f8:	6128      	str	r0, [r5, #16]
 800a3fa:	b920      	cbnz	r0, 800a406 <_svfiprintf_r+0x2e>
 800a3fc:	230c      	movs	r3, #12
 800a3fe:	603b      	str	r3, [r7, #0]
 800a400:	f04f 30ff 	mov.w	r0, #4294967295
 800a404:	e0d1      	b.n	800a5aa <_svfiprintf_r+0x1d2>
 800a406:	2340      	movs	r3, #64	; 0x40
 800a408:	616b      	str	r3, [r5, #20]
 800a40a:	2300      	movs	r3, #0
 800a40c:	9309      	str	r3, [sp, #36]	; 0x24
 800a40e:	2320      	movs	r3, #32
 800a410:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a414:	f8cd 800c 	str.w	r8, [sp, #12]
 800a418:	2330      	movs	r3, #48	; 0x30
 800a41a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5c4 <_svfiprintf_r+0x1ec>
 800a41e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a422:	f04f 0901 	mov.w	r9, #1
 800a426:	4623      	mov	r3, r4
 800a428:	469a      	mov	sl, r3
 800a42a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a42e:	b10a      	cbz	r2, 800a434 <_svfiprintf_r+0x5c>
 800a430:	2a25      	cmp	r2, #37	; 0x25
 800a432:	d1f9      	bne.n	800a428 <_svfiprintf_r+0x50>
 800a434:	ebba 0b04 	subs.w	fp, sl, r4
 800a438:	d00b      	beq.n	800a452 <_svfiprintf_r+0x7a>
 800a43a:	465b      	mov	r3, fp
 800a43c:	4622      	mov	r2, r4
 800a43e:	4629      	mov	r1, r5
 800a440:	4638      	mov	r0, r7
 800a442:	f7ff ff6e 	bl	800a322 <__ssputs_r>
 800a446:	3001      	adds	r0, #1
 800a448:	f000 80aa 	beq.w	800a5a0 <_svfiprintf_r+0x1c8>
 800a44c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a44e:	445a      	add	r2, fp
 800a450:	9209      	str	r2, [sp, #36]	; 0x24
 800a452:	f89a 3000 	ldrb.w	r3, [sl]
 800a456:	2b00      	cmp	r3, #0
 800a458:	f000 80a2 	beq.w	800a5a0 <_svfiprintf_r+0x1c8>
 800a45c:	2300      	movs	r3, #0
 800a45e:	f04f 32ff 	mov.w	r2, #4294967295
 800a462:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a466:	f10a 0a01 	add.w	sl, sl, #1
 800a46a:	9304      	str	r3, [sp, #16]
 800a46c:	9307      	str	r3, [sp, #28]
 800a46e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a472:	931a      	str	r3, [sp, #104]	; 0x68
 800a474:	4654      	mov	r4, sl
 800a476:	2205      	movs	r2, #5
 800a478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a47c:	4851      	ldr	r0, [pc, #324]	; (800a5c4 <_svfiprintf_r+0x1ec>)
 800a47e:	f7f5 feb7 	bl	80001f0 <memchr>
 800a482:	9a04      	ldr	r2, [sp, #16]
 800a484:	b9d8      	cbnz	r0, 800a4be <_svfiprintf_r+0xe6>
 800a486:	06d0      	lsls	r0, r2, #27
 800a488:	bf44      	itt	mi
 800a48a:	2320      	movmi	r3, #32
 800a48c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a490:	0711      	lsls	r1, r2, #28
 800a492:	bf44      	itt	mi
 800a494:	232b      	movmi	r3, #43	; 0x2b
 800a496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a49a:	f89a 3000 	ldrb.w	r3, [sl]
 800a49e:	2b2a      	cmp	r3, #42	; 0x2a
 800a4a0:	d015      	beq.n	800a4ce <_svfiprintf_r+0xf6>
 800a4a2:	9a07      	ldr	r2, [sp, #28]
 800a4a4:	4654      	mov	r4, sl
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	f04f 0c0a 	mov.w	ip, #10
 800a4ac:	4621      	mov	r1, r4
 800a4ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4b2:	3b30      	subs	r3, #48	; 0x30
 800a4b4:	2b09      	cmp	r3, #9
 800a4b6:	d94e      	bls.n	800a556 <_svfiprintf_r+0x17e>
 800a4b8:	b1b0      	cbz	r0, 800a4e8 <_svfiprintf_r+0x110>
 800a4ba:	9207      	str	r2, [sp, #28]
 800a4bc:	e014      	b.n	800a4e8 <_svfiprintf_r+0x110>
 800a4be:	eba0 0308 	sub.w	r3, r0, r8
 800a4c2:	fa09 f303 	lsl.w	r3, r9, r3
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	9304      	str	r3, [sp, #16]
 800a4ca:	46a2      	mov	sl, r4
 800a4cc:	e7d2      	b.n	800a474 <_svfiprintf_r+0x9c>
 800a4ce:	9b03      	ldr	r3, [sp, #12]
 800a4d0:	1d19      	adds	r1, r3, #4
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	9103      	str	r1, [sp, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	bfbb      	ittet	lt
 800a4da:	425b      	neglt	r3, r3
 800a4dc:	f042 0202 	orrlt.w	r2, r2, #2
 800a4e0:	9307      	strge	r3, [sp, #28]
 800a4e2:	9307      	strlt	r3, [sp, #28]
 800a4e4:	bfb8      	it	lt
 800a4e6:	9204      	strlt	r2, [sp, #16]
 800a4e8:	7823      	ldrb	r3, [r4, #0]
 800a4ea:	2b2e      	cmp	r3, #46	; 0x2e
 800a4ec:	d10c      	bne.n	800a508 <_svfiprintf_r+0x130>
 800a4ee:	7863      	ldrb	r3, [r4, #1]
 800a4f0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4f2:	d135      	bne.n	800a560 <_svfiprintf_r+0x188>
 800a4f4:	9b03      	ldr	r3, [sp, #12]
 800a4f6:	1d1a      	adds	r2, r3, #4
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	9203      	str	r2, [sp, #12]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	bfb8      	it	lt
 800a500:	f04f 33ff 	movlt.w	r3, #4294967295
 800a504:	3402      	adds	r4, #2
 800a506:	9305      	str	r3, [sp, #20]
 800a508:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5d4 <_svfiprintf_r+0x1fc>
 800a50c:	7821      	ldrb	r1, [r4, #0]
 800a50e:	2203      	movs	r2, #3
 800a510:	4650      	mov	r0, sl
 800a512:	f7f5 fe6d 	bl	80001f0 <memchr>
 800a516:	b140      	cbz	r0, 800a52a <_svfiprintf_r+0x152>
 800a518:	2340      	movs	r3, #64	; 0x40
 800a51a:	eba0 000a 	sub.w	r0, r0, sl
 800a51e:	fa03 f000 	lsl.w	r0, r3, r0
 800a522:	9b04      	ldr	r3, [sp, #16]
 800a524:	4303      	orrs	r3, r0
 800a526:	3401      	adds	r4, #1
 800a528:	9304      	str	r3, [sp, #16]
 800a52a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a52e:	4826      	ldr	r0, [pc, #152]	; (800a5c8 <_svfiprintf_r+0x1f0>)
 800a530:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a534:	2206      	movs	r2, #6
 800a536:	f7f5 fe5b 	bl	80001f0 <memchr>
 800a53a:	2800      	cmp	r0, #0
 800a53c:	d038      	beq.n	800a5b0 <_svfiprintf_r+0x1d8>
 800a53e:	4b23      	ldr	r3, [pc, #140]	; (800a5cc <_svfiprintf_r+0x1f4>)
 800a540:	bb1b      	cbnz	r3, 800a58a <_svfiprintf_r+0x1b2>
 800a542:	9b03      	ldr	r3, [sp, #12]
 800a544:	3307      	adds	r3, #7
 800a546:	f023 0307 	bic.w	r3, r3, #7
 800a54a:	3308      	adds	r3, #8
 800a54c:	9303      	str	r3, [sp, #12]
 800a54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a550:	4433      	add	r3, r6
 800a552:	9309      	str	r3, [sp, #36]	; 0x24
 800a554:	e767      	b.n	800a426 <_svfiprintf_r+0x4e>
 800a556:	fb0c 3202 	mla	r2, ip, r2, r3
 800a55a:	460c      	mov	r4, r1
 800a55c:	2001      	movs	r0, #1
 800a55e:	e7a5      	b.n	800a4ac <_svfiprintf_r+0xd4>
 800a560:	2300      	movs	r3, #0
 800a562:	3401      	adds	r4, #1
 800a564:	9305      	str	r3, [sp, #20]
 800a566:	4619      	mov	r1, r3
 800a568:	f04f 0c0a 	mov.w	ip, #10
 800a56c:	4620      	mov	r0, r4
 800a56e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a572:	3a30      	subs	r2, #48	; 0x30
 800a574:	2a09      	cmp	r2, #9
 800a576:	d903      	bls.n	800a580 <_svfiprintf_r+0x1a8>
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d0c5      	beq.n	800a508 <_svfiprintf_r+0x130>
 800a57c:	9105      	str	r1, [sp, #20]
 800a57e:	e7c3      	b.n	800a508 <_svfiprintf_r+0x130>
 800a580:	fb0c 2101 	mla	r1, ip, r1, r2
 800a584:	4604      	mov	r4, r0
 800a586:	2301      	movs	r3, #1
 800a588:	e7f0      	b.n	800a56c <_svfiprintf_r+0x194>
 800a58a:	ab03      	add	r3, sp, #12
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	462a      	mov	r2, r5
 800a590:	4b0f      	ldr	r3, [pc, #60]	; (800a5d0 <_svfiprintf_r+0x1f8>)
 800a592:	a904      	add	r1, sp, #16
 800a594:	4638      	mov	r0, r7
 800a596:	f3af 8000 	nop.w
 800a59a:	1c42      	adds	r2, r0, #1
 800a59c:	4606      	mov	r6, r0
 800a59e:	d1d6      	bne.n	800a54e <_svfiprintf_r+0x176>
 800a5a0:	89ab      	ldrh	r3, [r5, #12]
 800a5a2:	065b      	lsls	r3, r3, #25
 800a5a4:	f53f af2c 	bmi.w	800a400 <_svfiprintf_r+0x28>
 800a5a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5aa:	b01d      	add	sp, #116	; 0x74
 800a5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5b0:	ab03      	add	r3, sp, #12
 800a5b2:	9300      	str	r3, [sp, #0]
 800a5b4:	462a      	mov	r2, r5
 800a5b6:	4b06      	ldr	r3, [pc, #24]	; (800a5d0 <_svfiprintf_r+0x1f8>)
 800a5b8:	a904      	add	r1, sp, #16
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	f000 f87a 	bl	800a6b4 <_printf_i>
 800a5c0:	e7eb      	b.n	800a59a <_svfiprintf_r+0x1c2>
 800a5c2:	bf00      	nop
 800a5c4:	0800ac42 	.word	0x0800ac42
 800a5c8:	0800ac4c 	.word	0x0800ac4c
 800a5cc:	00000000 	.word	0x00000000
 800a5d0:	0800a323 	.word	0x0800a323
 800a5d4:	0800ac48 	.word	0x0800ac48

0800a5d8 <_printf_common>:
 800a5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5dc:	4616      	mov	r6, r2
 800a5de:	4699      	mov	r9, r3
 800a5e0:	688a      	ldr	r2, [r1, #8]
 800a5e2:	690b      	ldr	r3, [r1, #16]
 800a5e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	bfb8      	it	lt
 800a5ec:	4613      	movlt	r3, r2
 800a5ee:	6033      	str	r3, [r6, #0]
 800a5f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5f4:	4607      	mov	r7, r0
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	b10a      	cbz	r2, 800a5fe <_printf_common+0x26>
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	6033      	str	r3, [r6, #0]
 800a5fe:	6823      	ldr	r3, [r4, #0]
 800a600:	0699      	lsls	r1, r3, #26
 800a602:	bf42      	ittt	mi
 800a604:	6833      	ldrmi	r3, [r6, #0]
 800a606:	3302      	addmi	r3, #2
 800a608:	6033      	strmi	r3, [r6, #0]
 800a60a:	6825      	ldr	r5, [r4, #0]
 800a60c:	f015 0506 	ands.w	r5, r5, #6
 800a610:	d106      	bne.n	800a620 <_printf_common+0x48>
 800a612:	f104 0a19 	add.w	sl, r4, #25
 800a616:	68e3      	ldr	r3, [r4, #12]
 800a618:	6832      	ldr	r2, [r6, #0]
 800a61a:	1a9b      	subs	r3, r3, r2
 800a61c:	42ab      	cmp	r3, r5
 800a61e:	dc26      	bgt.n	800a66e <_printf_common+0x96>
 800a620:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a624:	1e13      	subs	r3, r2, #0
 800a626:	6822      	ldr	r2, [r4, #0]
 800a628:	bf18      	it	ne
 800a62a:	2301      	movne	r3, #1
 800a62c:	0692      	lsls	r2, r2, #26
 800a62e:	d42b      	bmi.n	800a688 <_printf_common+0xb0>
 800a630:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a634:	4649      	mov	r1, r9
 800a636:	4638      	mov	r0, r7
 800a638:	47c0      	blx	r8
 800a63a:	3001      	adds	r0, #1
 800a63c:	d01e      	beq.n	800a67c <_printf_common+0xa4>
 800a63e:	6823      	ldr	r3, [r4, #0]
 800a640:	68e5      	ldr	r5, [r4, #12]
 800a642:	6832      	ldr	r2, [r6, #0]
 800a644:	f003 0306 	and.w	r3, r3, #6
 800a648:	2b04      	cmp	r3, #4
 800a64a:	bf08      	it	eq
 800a64c:	1aad      	subeq	r5, r5, r2
 800a64e:	68a3      	ldr	r3, [r4, #8]
 800a650:	6922      	ldr	r2, [r4, #16]
 800a652:	bf0c      	ite	eq
 800a654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a658:	2500      	movne	r5, #0
 800a65a:	4293      	cmp	r3, r2
 800a65c:	bfc4      	itt	gt
 800a65e:	1a9b      	subgt	r3, r3, r2
 800a660:	18ed      	addgt	r5, r5, r3
 800a662:	2600      	movs	r6, #0
 800a664:	341a      	adds	r4, #26
 800a666:	42b5      	cmp	r5, r6
 800a668:	d11a      	bne.n	800a6a0 <_printf_common+0xc8>
 800a66a:	2000      	movs	r0, #0
 800a66c:	e008      	b.n	800a680 <_printf_common+0xa8>
 800a66e:	2301      	movs	r3, #1
 800a670:	4652      	mov	r2, sl
 800a672:	4649      	mov	r1, r9
 800a674:	4638      	mov	r0, r7
 800a676:	47c0      	blx	r8
 800a678:	3001      	adds	r0, #1
 800a67a:	d103      	bne.n	800a684 <_printf_common+0xac>
 800a67c:	f04f 30ff 	mov.w	r0, #4294967295
 800a680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a684:	3501      	adds	r5, #1
 800a686:	e7c6      	b.n	800a616 <_printf_common+0x3e>
 800a688:	18e1      	adds	r1, r4, r3
 800a68a:	1c5a      	adds	r2, r3, #1
 800a68c:	2030      	movs	r0, #48	; 0x30
 800a68e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a692:	4422      	add	r2, r4
 800a694:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a698:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a69c:	3302      	adds	r3, #2
 800a69e:	e7c7      	b.n	800a630 <_printf_common+0x58>
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	4622      	mov	r2, r4
 800a6a4:	4649      	mov	r1, r9
 800a6a6:	4638      	mov	r0, r7
 800a6a8:	47c0      	blx	r8
 800a6aa:	3001      	adds	r0, #1
 800a6ac:	d0e6      	beq.n	800a67c <_printf_common+0xa4>
 800a6ae:	3601      	adds	r6, #1
 800a6b0:	e7d9      	b.n	800a666 <_printf_common+0x8e>
	...

0800a6b4 <_printf_i>:
 800a6b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b8:	7e0f      	ldrb	r7, [r1, #24]
 800a6ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6bc:	2f78      	cmp	r7, #120	; 0x78
 800a6be:	4691      	mov	r9, r2
 800a6c0:	4680      	mov	r8, r0
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	469a      	mov	sl, r3
 800a6c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6ca:	d807      	bhi.n	800a6dc <_printf_i+0x28>
 800a6cc:	2f62      	cmp	r7, #98	; 0x62
 800a6ce:	d80a      	bhi.n	800a6e6 <_printf_i+0x32>
 800a6d0:	2f00      	cmp	r7, #0
 800a6d2:	f000 80d8 	beq.w	800a886 <_printf_i+0x1d2>
 800a6d6:	2f58      	cmp	r7, #88	; 0x58
 800a6d8:	f000 80a3 	beq.w	800a822 <_printf_i+0x16e>
 800a6dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6e4:	e03a      	b.n	800a75c <_printf_i+0xa8>
 800a6e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6ea:	2b15      	cmp	r3, #21
 800a6ec:	d8f6      	bhi.n	800a6dc <_printf_i+0x28>
 800a6ee:	a101      	add	r1, pc, #4	; (adr r1, 800a6f4 <_printf_i+0x40>)
 800a6f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6f4:	0800a74d 	.word	0x0800a74d
 800a6f8:	0800a761 	.word	0x0800a761
 800a6fc:	0800a6dd 	.word	0x0800a6dd
 800a700:	0800a6dd 	.word	0x0800a6dd
 800a704:	0800a6dd 	.word	0x0800a6dd
 800a708:	0800a6dd 	.word	0x0800a6dd
 800a70c:	0800a761 	.word	0x0800a761
 800a710:	0800a6dd 	.word	0x0800a6dd
 800a714:	0800a6dd 	.word	0x0800a6dd
 800a718:	0800a6dd 	.word	0x0800a6dd
 800a71c:	0800a6dd 	.word	0x0800a6dd
 800a720:	0800a86d 	.word	0x0800a86d
 800a724:	0800a791 	.word	0x0800a791
 800a728:	0800a84f 	.word	0x0800a84f
 800a72c:	0800a6dd 	.word	0x0800a6dd
 800a730:	0800a6dd 	.word	0x0800a6dd
 800a734:	0800a88f 	.word	0x0800a88f
 800a738:	0800a6dd 	.word	0x0800a6dd
 800a73c:	0800a791 	.word	0x0800a791
 800a740:	0800a6dd 	.word	0x0800a6dd
 800a744:	0800a6dd 	.word	0x0800a6dd
 800a748:	0800a857 	.word	0x0800a857
 800a74c:	682b      	ldr	r3, [r5, #0]
 800a74e:	1d1a      	adds	r2, r3, #4
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	602a      	str	r2, [r5, #0]
 800a754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a75c:	2301      	movs	r3, #1
 800a75e:	e0a3      	b.n	800a8a8 <_printf_i+0x1f4>
 800a760:	6820      	ldr	r0, [r4, #0]
 800a762:	6829      	ldr	r1, [r5, #0]
 800a764:	0606      	lsls	r6, r0, #24
 800a766:	f101 0304 	add.w	r3, r1, #4
 800a76a:	d50a      	bpl.n	800a782 <_printf_i+0xce>
 800a76c:	680e      	ldr	r6, [r1, #0]
 800a76e:	602b      	str	r3, [r5, #0]
 800a770:	2e00      	cmp	r6, #0
 800a772:	da03      	bge.n	800a77c <_printf_i+0xc8>
 800a774:	232d      	movs	r3, #45	; 0x2d
 800a776:	4276      	negs	r6, r6
 800a778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a77c:	485e      	ldr	r0, [pc, #376]	; (800a8f8 <_printf_i+0x244>)
 800a77e:	230a      	movs	r3, #10
 800a780:	e019      	b.n	800a7b6 <_printf_i+0x102>
 800a782:	680e      	ldr	r6, [r1, #0]
 800a784:	602b      	str	r3, [r5, #0]
 800a786:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a78a:	bf18      	it	ne
 800a78c:	b236      	sxthne	r6, r6
 800a78e:	e7ef      	b.n	800a770 <_printf_i+0xbc>
 800a790:	682b      	ldr	r3, [r5, #0]
 800a792:	6820      	ldr	r0, [r4, #0]
 800a794:	1d19      	adds	r1, r3, #4
 800a796:	6029      	str	r1, [r5, #0]
 800a798:	0601      	lsls	r1, r0, #24
 800a79a:	d501      	bpl.n	800a7a0 <_printf_i+0xec>
 800a79c:	681e      	ldr	r6, [r3, #0]
 800a79e:	e002      	b.n	800a7a6 <_printf_i+0xf2>
 800a7a0:	0646      	lsls	r6, r0, #25
 800a7a2:	d5fb      	bpl.n	800a79c <_printf_i+0xe8>
 800a7a4:	881e      	ldrh	r6, [r3, #0]
 800a7a6:	4854      	ldr	r0, [pc, #336]	; (800a8f8 <_printf_i+0x244>)
 800a7a8:	2f6f      	cmp	r7, #111	; 0x6f
 800a7aa:	bf0c      	ite	eq
 800a7ac:	2308      	moveq	r3, #8
 800a7ae:	230a      	movne	r3, #10
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7b6:	6865      	ldr	r5, [r4, #4]
 800a7b8:	60a5      	str	r5, [r4, #8]
 800a7ba:	2d00      	cmp	r5, #0
 800a7bc:	bfa2      	ittt	ge
 800a7be:	6821      	ldrge	r1, [r4, #0]
 800a7c0:	f021 0104 	bicge.w	r1, r1, #4
 800a7c4:	6021      	strge	r1, [r4, #0]
 800a7c6:	b90e      	cbnz	r6, 800a7cc <_printf_i+0x118>
 800a7c8:	2d00      	cmp	r5, #0
 800a7ca:	d04d      	beq.n	800a868 <_printf_i+0x1b4>
 800a7cc:	4615      	mov	r5, r2
 800a7ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800a7d2:	fb03 6711 	mls	r7, r3, r1, r6
 800a7d6:	5dc7      	ldrb	r7, [r0, r7]
 800a7d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7dc:	4637      	mov	r7, r6
 800a7de:	42bb      	cmp	r3, r7
 800a7e0:	460e      	mov	r6, r1
 800a7e2:	d9f4      	bls.n	800a7ce <_printf_i+0x11a>
 800a7e4:	2b08      	cmp	r3, #8
 800a7e6:	d10b      	bne.n	800a800 <_printf_i+0x14c>
 800a7e8:	6823      	ldr	r3, [r4, #0]
 800a7ea:	07de      	lsls	r6, r3, #31
 800a7ec:	d508      	bpl.n	800a800 <_printf_i+0x14c>
 800a7ee:	6923      	ldr	r3, [r4, #16]
 800a7f0:	6861      	ldr	r1, [r4, #4]
 800a7f2:	4299      	cmp	r1, r3
 800a7f4:	bfde      	ittt	le
 800a7f6:	2330      	movle	r3, #48	; 0x30
 800a7f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a800:	1b52      	subs	r2, r2, r5
 800a802:	6122      	str	r2, [r4, #16]
 800a804:	f8cd a000 	str.w	sl, [sp]
 800a808:	464b      	mov	r3, r9
 800a80a:	aa03      	add	r2, sp, #12
 800a80c:	4621      	mov	r1, r4
 800a80e:	4640      	mov	r0, r8
 800a810:	f7ff fee2 	bl	800a5d8 <_printf_common>
 800a814:	3001      	adds	r0, #1
 800a816:	d14c      	bne.n	800a8b2 <_printf_i+0x1fe>
 800a818:	f04f 30ff 	mov.w	r0, #4294967295
 800a81c:	b004      	add	sp, #16
 800a81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a822:	4835      	ldr	r0, [pc, #212]	; (800a8f8 <_printf_i+0x244>)
 800a824:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a828:	6829      	ldr	r1, [r5, #0]
 800a82a:	6823      	ldr	r3, [r4, #0]
 800a82c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a830:	6029      	str	r1, [r5, #0]
 800a832:	061d      	lsls	r5, r3, #24
 800a834:	d514      	bpl.n	800a860 <_printf_i+0x1ac>
 800a836:	07df      	lsls	r7, r3, #31
 800a838:	bf44      	itt	mi
 800a83a:	f043 0320 	orrmi.w	r3, r3, #32
 800a83e:	6023      	strmi	r3, [r4, #0]
 800a840:	b91e      	cbnz	r6, 800a84a <_printf_i+0x196>
 800a842:	6823      	ldr	r3, [r4, #0]
 800a844:	f023 0320 	bic.w	r3, r3, #32
 800a848:	6023      	str	r3, [r4, #0]
 800a84a:	2310      	movs	r3, #16
 800a84c:	e7b0      	b.n	800a7b0 <_printf_i+0xfc>
 800a84e:	6823      	ldr	r3, [r4, #0]
 800a850:	f043 0320 	orr.w	r3, r3, #32
 800a854:	6023      	str	r3, [r4, #0]
 800a856:	2378      	movs	r3, #120	; 0x78
 800a858:	4828      	ldr	r0, [pc, #160]	; (800a8fc <_printf_i+0x248>)
 800a85a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a85e:	e7e3      	b.n	800a828 <_printf_i+0x174>
 800a860:	0659      	lsls	r1, r3, #25
 800a862:	bf48      	it	mi
 800a864:	b2b6      	uxthmi	r6, r6
 800a866:	e7e6      	b.n	800a836 <_printf_i+0x182>
 800a868:	4615      	mov	r5, r2
 800a86a:	e7bb      	b.n	800a7e4 <_printf_i+0x130>
 800a86c:	682b      	ldr	r3, [r5, #0]
 800a86e:	6826      	ldr	r6, [r4, #0]
 800a870:	6961      	ldr	r1, [r4, #20]
 800a872:	1d18      	adds	r0, r3, #4
 800a874:	6028      	str	r0, [r5, #0]
 800a876:	0635      	lsls	r5, r6, #24
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	d501      	bpl.n	800a880 <_printf_i+0x1cc>
 800a87c:	6019      	str	r1, [r3, #0]
 800a87e:	e002      	b.n	800a886 <_printf_i+0x1d2>
 800a880:	0670      	lsls	r0, r6, #25
 800a882:	d5fb      	bpl.n	800a87c <_printf_i+0x1c8>
 800a884:	8019      	strh	r1, [r3, #0]
 800a886:	2300      	movs	r3, #0
 800a888:	6123      	str	r3, [r4, #16]
 800a88a:	4615      	mov	r5, r2
 800a88c:	e7ba      	b.n	800a804 <_printf_i+0x150>
 800a88e:	682b      	ldr	r3, [r5, #0]
 800a890:	1d1a      	adds	r2, r3, #4
 800a892:	602a      	str	r2, [r5, #0]
 800a894:	681d      	ldr	r5, [r3, #0]
 800a896:	6862      	ldr	r2, [r4, #4]
 800a898:	2100      	movs	r1, #0
 800a89a:	4628      	mov	r0, r5
 800a89c:	f7f5 fca8 	bl	80001f0 <memchr>
 800a8a0:	b108      	cbz	r0, 800a8a6 <_printf_i+0x1f2>
 800a8a2:	1b40      	subs	r0, r0, r5
 800a8a4:	6060      	str	r0, [r4, #4]
 800a8a6:	6863      	ldr	r3, [r4, #4]
 800a8a8:	6123      	str	r3, [r4, #16]
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8b0:	e7a8      	b.n	800a804 <_printf_i+0x150>
 800a8b2:	6923      	ldr	r3, [r4, #16]
 800a8b4:	462a      	mov	r2, r5
 800a8b6:	4649      	mov	r1, r9
 800a8b8:	4640      	mov	r0, r8
 800a8ba:	47d0      	blx	sl
 800a8bc:	3001      	adds	r0, #1
 800a8be:	d0ab      	beq.n	800a818 <_printf_i+0x164>
 800a8c0:	6823      	ldr	r3, [r4, #0]
 800a8c2:	079b      	lsls	r3, r3, #30
 800a8c4:	d413      	bmi.n	800a8ee <_printf_i+0x23a>
 800a8c6:	68e0      	ldr	r0, [r4, #12]
 800a8c8:	9b03      	ldr	r3, [sp, #12]
 800a8ca:	4298      	cmp	r0, r3
 800a8cc:	bfb8      	it	lt
 800a8ce:	4618      	movlt	r0, r3
 800a8d0:	e7a4      	b.n	800a81c <_printf_i+0x168>
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	4632      	mov	r2, r6
 800a8d6:	4649      	mov	r1, r9
 800a8d8:	4640      	mov	r0, r8
 800a8da:	47d0      	blx	sl
 800a8dc:	3001      	adds	r0, #1
 800a8de:	d09b      	beq.n	800a818 <_printf_i+0x164>
 800a8e0:	3501      	adds	r5, #1
 800a8e2:	68e3      	ldr	r3, [r4, #12]
 800a8e4:	9903      	ldr	r1, [sp, #12]
 800a8e6:	1a5b      	subs	r3, r3, r1
 800a8e8:	42ab      	cmp	r3, r5
 800a8ea:	dcf2      	bgt.n	800a8d2 <_printf_i+0x21e>
 800a8ec:	e7eb      	b.n	800a8c6 <_printf_i+0x212>
 800a8ee:	2500      	movs	r5, #0
 800a8f0:	f104 0619 	add.w	r6, r4, #25
 800a8f4:	e7f5      	b.n	800a8e2 <_printf_i+0x22e>
 800a8f6:	bf00      	nop
 800a8f8:	0800ac53 	.word	0x0800ac53
 800a8fc:	0800ac64 	.word	0x0800ac64

0800a900 <memmove>:
 800a900:	4288      	cmp	r0, r1
 800a902:	b510      	push	{r4, lr}
 800a904:	eb01 0402 	add.w	r4, r1, r2
 800a908:	d902      	bls.n	800a910 <memmove+0x10>
 800a90a:	4284      	cmp	r4, r0
 800a90c:	4623      	mov	r3, r4
 800a90e:	d807      	bhi.n	800a920 <memmove+0x20>
 800a910:	1e43      	subs	r3, r0, #1
 800a912:	42a1      	cmp	r1, r4
 800a914:	d008      	beq.n	800a928 <memmove+0x28>
 800a916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a91a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a91e:	e7f8      	b.n	800a912 <memmove+0x12>
 800a920:	4402      	add	r2, r0
 800a922:	4601      	mov	r1, r0
 800a924:	428a      	cmp	r2, r1
 800a926:	d100      	bne.n	800a92a <memmove+0x2a>
 800a928:	bd10      	pop	{r4, pc}
 800a92a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a92e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a932:	e7f7      	b.n	800a924 <memmove+0x24>

0800a934 <_free_r>:
 800a934:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a936:	2900      	cmp	r1, #0
 800a938:	d044      	beq.n	800a9c4 <_free_r+0x90>
 800a93a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a93e:	9001      	str	r0, [sp, #4]
 800a940:	2b00      	cmp	r3, #0
 800a942:	f1a1 0404 	sub.w	r4, r1, #4
 800a946:	bfb8      	it	lt
 800a948:	18e4      	addlt	r4, r4, r3
 800a94a:	f000 f913 	bl	800ab74 <__malloc_lock>
 800a94e:	4a1e      	ldr	r2, [pc, #120]	; (800a9c8 <_free_r+0x94>)
 800a950:	9801      	ldr	r0, [sp, #4]
 800a952:	6813      	ldr	r3, [r2, #0]
 800a954:	b933      	cbnz	r3, 800a964 <_free_r+0x30>
 800a956:	6063      	str	r3, [r4, #4]
 800a958:	6014      	str	r4, [r2, #0]
 800a95a:	b003      	add	sp, #12
 800a95c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a960:	f000 b90e 	b.w	800ab80 <__malloc_unlock>
 800a964:	42a3      	cmp	r3, r4
 800a966:	d908      	bls.n	800a97a <_free_r+0x46>
 800a968:	6825      	ldr	r5, [r4, #0]
 800a96a:	1961      	adds	r1, r4, r5
 800a96c:	428b      	cmp	r3, r1
 800a96e:	bf01      	itttt	eq
 800a970:	6819      	ldreq	r1, [r3, #0]
 800a972:	685b      	ldreq	r3, [r3, #4]
 800a974:	1949      	addeq	r1, r1, r5
 800a976:	6021      	streq	r1, [r4, #0]
 800a978:	e7ed      	b.n	800a956 <_free_r+0x22>
 800a97a:	461a      	mov	r2, r3
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	b10b      	cbz	r3, 800a984 <_free_r+0x50>
 800a980:	42a3      	cmp	r3, r4
 800a982:	d9fa      	bls.n	800a97a <_free_r+0x46>
 800a984:	6811      	ldr	r1, [r2, #0]
 800a986:	1855      	adds	r5, r2, r1
 800a988:	42a5      	cmp	r5, r4
 800a98a:	d10b      	bne.n	800a9a4 <_free_r+0x70>
 800a98c:	6824      	ldr	r4, [r4, #0]
 800a98e:	4421      	add	r1, r4
 800a990:	1854      	adds	r4, r2, r1
 800a992:	42a3      	cmp	r3, r4
 800a994:	6011      	str	r1, [r2, #0]
 800a996:	d1e0      	bne.n	800a95a <_free_r+0x26>
 800a998:	681c      	ldr	r4, [r3, #0]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	6053      	str	r3, [r2, #4]
 800a99e:	4421      	add	r1, r4
 800a9a0:	6011      	str	r1, [r2, #0]
 800a9a2:	e7da      	b.n	800a95a <_free_r+0x26>
 800a9a4:	d902      	bls.n	800a9ac <_free_r+0x78>
 800a9a6:	230c      	movs	r3, #12
 800a9a8:	6003      	str	r3, [r0, #0]
 800a9aa:	e7d6      	b.n	800a95a <_free_r+0x26>
 800a9ac:	6825      	ldr	r5, [r4, #0]
 800a9ae:	1961      	adds	r1, r4, r5
 800a9b0:	428b      	cmp	r3, r1
 800a9b2:	bf04      	itt	eq
 800a9b4:	6819      	ldreq	r1, [r3, #0]
 800a9b6:	685b      	ldreq	r3, [r3, #4]
 800a9b8:	6063      	str	r3, [r4, #4]
 800a9ba:	bf04      	itt	eq
 800a9bc:	1949      	addeq	r1, r1, r5
 800a9be:	6021      	streq	r1, [r4, #0]
 800a9c0:	6054      	str	r4, [r2, #4]
 800a9c2:	e7ca      	b.n	800a95a <_free_r+0x26>
 800a9c4:	b003      	add	sp, #12
 800a9c6:	bd30      	pop	{r4, r5, pc}
 800a9c8:	200002a0 	.word	0x200002a0

0800a9cc <sbrk_aligned>:
 800a9cc:	b570      	push	{r4, r5, r6, lr}
 800a9ce:	4e0e      	ldr	r6, [pc, #56]	; (800aa08 <sbrk_aligned+0x3c>)
 800a9d0:	460c      	mov	r4, r1
 800a9d2:	6831      	ldr	r1, [r6, #0]
 800a9d4:	4605      	mov	r5, r0
 800a9d6:	b911      	cbnz	r1, 800a9de <sbrk_aligned+0x12>
 800a9d8:	f000 f8bc 	bl	800ab54 <_sbrk_r>
 800a9dc:	6030      	str	r0, [r6, #0]
 800a9de:	4621      	mov	r1, r4
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	f000 f8b7 	bl	800ab54 <_sbrk_r>
 800a9e6:	1c43      	adds	r3, r0, #1
 800a9e8:	d00a      	beq.n	800aa00 <sbrk_aligned+0x34>
 800a9ea:	1cc4      	adds	r4, r0, #3
 800a9ec:	f024 0403 	bic.w	r4, r4, #3
 800a9f0:	42a0      	cmp	r0, r4
 800a9f2:	d007      	beq.n	800aa04 <sbrk_aligned+0x38>
 800a9f4:	1a21      	subs	r1, r4, r0
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f000 f8ac 	bl	800ab54 <_sbrk_r>
 800a9fc:	3001      	adds	r0, #1
 800a9fe:	d101      	bne.n	800aa04 <sbrk_aligned+0x38>
 800aa00:	f04f 34ff 	mov.w	r4, #4294967295
 800aa04:	4620      	mov	r0, r4
 800aa06:	bd70      	pop	{r4, r5, r6, pc}
 800aa08:	200002a4 	.word	0x200002a4

0800aa0c <_malloc_r>:
 800aa0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa10:	1ccd      	adds	r5, r1, #3
 800aa12:	f025 0503 	bic.w	r5, r5, #3
 800aa16:	3508      	adds	r5, #8
 800aa18:	2d0c      	cmp	r5, #12
 800aa1a:	bf38      	it	cc
 800aa1c:	250c      	movcc	r5, #12
 800aa1e:	2d00      	cmp	r5, #0
 800aa20:	4607      	mov	r7, r0
 800aa22:	db01      	blt.n	800aa28 <_malloc_r+0x1c>
 800aa24:	42a9      	cmp	r1, r5
 800aa26:	d905      	bls.n	800aa34 <_malloc_r+0x28>
 800aa28:	230c      	movs	r3, #12
 800aa2a:	603b      	str	r3, [r7, #0]
 800aa2c:	2600      	movs	r6, #0
 800aa2e:	4630      	mov	r0, r6
 800aa30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa34:	4e2e      	ldr	r6, [pc, #184]	; (800aaf0 <_malloc_r+0xe4>)
 800aa36:	f000 f89d 	bl	800ab74 <__malloc_lock>
 800aa3a:	6833      	ldr	r3, [r6, #0]
 800aa3c:	461c      	mov	r4, r3
 800aa3e:	bb34      	cbnz	r4, 800aa8e <_malloc_r+0x82>
 800aa40:	4629      	mov	r1, r5
 800aa42:	4638      	mov	r0, r7
 800aa44:	f7ff ffc2 	bl	800a9cc <sbrk_aligned>
 800aa48:	1c43      	adds	r3, r0, #1
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	d14d      	bne.n	800aaea <_malloc_r+0xde>
 800aa4e:	6834      	ldr	r4, [r6, #0]
 800aa50:	4626      	mov	r6, r4
 800aa52:	2e00      	cmp	r6, #0
 800aa54:	d140      	bne.n	800aad8 <_malloc_r+0xcc>
 800aa56:	6823      	ldr	r3, [r4, #0]
 800aa58:	4631      	mov	r1, r6
 800aa5a:	4638      	mov	r0, r7
 800aa5c:	eb04 0803 	add.w	r8, r4, r3
 800aa60:	f000 f878 	bl	800ab54 <_sbrk_r>
 800aa64:	4580      	cmp	r8, r0
 800aa66:	d13a      	bne.n	800aade <_malloc_r+0xd2>
 800aa68:	6821      	ldr	r1, [r4, #0]
 800aa6a:	3503      	adds	r5, #3
 800aa6c:	1a6d      	subs	r5, r5, r1
 800aa6e:	f025 0503 	bic.w	r5, r5, #3
 800aa72:	3508      	adds	r5, #8
 800aa74:	2d0c      	cmp	r5, #12
 800aa76:	bf38      	it	cc
 800aa78:	250c      	movcc	r5, #12
 800aa7a:	4629      	mov	r1, r5
 800aa7c:	4638      	mov	r0, r7
 800aa7e:	f7ff ffa5 	bl	800a9cc <sbrk_aligned>
 800aa82:	3001      	adds	r0, #1
 800aa84:	d02b      	beq.n	800aade <_malloc_r+0xd2>
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	442b      	add	r3, r5
 800aa8a:	6023      	str	r3, [r4, #0]
 800aa8c:	e00e      	b.n	800aaac <_malloc_r+0xa0>
 800aa8e:	6822      	ldr	r2, [r4, #0]
 800aa90:	1b52      	subs	r2, r2, r5
 800aa92:	d41e      	bmi.n	800aad2 <_malloc_r+0xc6>
 800aa94:	2a0b      	cmp	r2, #11
 800aa96:	d916      	bls.n	800aac6 <_malloc_r+0xba>
 800aa98:	1961      	adds	r1, r4, r5
 800aa9a:	42a3      	cmp	r3, r4
 800aa9c:	6025      	str	r5, [r4, #0]
 800aa9e:	bf18      	it	ne
 800aaa0:	6059      	strne	r1, [r3, #4]
 800aaa2:	6863      	ldr	r3, [r4, #4]
 800aaa4:	bf08      	it	eq
 800aaa6:	6031      	streq	r1, [r6, #0]
 800aaa8:	5162      	str	r2, [r4, r5]
 800aaaa:	604b      	str	r3, [r1, #4]
 800aaac:	4638      	mov	r0, r7
 800aaae:	f104 060b 	add.w	r6, r4, #11
 800aab2:	f000 f865 	bl	800ab80 <__malloc_unlock>
 800aab6:	f026 0607 	bic.w	r6, r6, #7
 800aaba:	1d23      	adds	r3, r4, #4
 800aabc:	1af2      	subs	r2, r6, r3
 800aabe:	d0b6      	beq.n	800aa2e <_malloc_r+0x22>
 800aac0:	1b9b      	subs	r3, r3, r6
 800aac2:	50a3      	str	r3, [r4, r2]
 800aac4:	e7b3      	b.n	800aa2e <_malloc_r+0x22>
 800aac6:	6862      	ldr	r2, [r4, #4]
 800aac8:	42a3      	cmp	r3, r4
 800aaca:	bf0c      	ite	eq
 800aacc:	6032      	streq	r2, [r6, #0]
 800aace:	605a      	strne	r2, [r3, #4]
 800aad0:	e7ec      	b.n	800aaac <_malloc_r+0xa0>
 800aad2:	4623      	mov	r3, r4
 800aad4:	6864      	ldr	r4, [r4, #4]
 800aad6:	e7b2      	b.n	800aa3e <_malloc_r+0x32>
 800aad8:	4634      	mov	r4, r6
 800aada:	6876      	ldr	r6, [r6, #4]
 800aadc:	e7b9      	b.n	800aa52 <_malloc_r+0x46>
 800aade:	230c      	movs	r3, #12
 800aae0:	603b      	str	r3, [r7, #0]
 800aae2:	4638      	mov	r0, r7
 800aae4:	f000 f84c 	bl	800ab80 <__malloc_unlock>
 800aae8:	e7a1      	b.n	800aa2e <_malloc_r+0x22>
 800aaea:	6025      	str	r5, [r4, #0]
 800aaec:	e7de      	b.n	800aaac <_malloc_r+0xa0>
 800aaee:	bf00      	nop
 800aaf0:	200002a0 	.word	0x200002a0

0800aaf4 <_realloc_r>:
 800aaf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf8:	4680      	mov	r8, r0
 800aafa:	4614      	mov	r4, r2
 800aafc:	460e      	mov	r6, r1
 800aafe:	b921      	cbnz	r1, 800ab0a <_realloc_r+0x16>
 800ab00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab04:	4611      	mov	r1, r2
 800ab06:	f7ff bf81 	b.w	800aa0c <_malloc_r>
 800ab0a:	b92a      	cbnz	r2, 800ab18 <_realloc_r+0x24>
 800ab0c:	f7ff ff12 	bl	800a934 <_free_r>
 800ab10:	4625      	mov	r5, r4
 800ab12:	4628      	mov	r0, r5
 800ab14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab18:	f000 f838 	bl	800ab8c <_malloc_usable_size_r>
 800ab1c:	4284      	cmp	r4, r0
 800ab1e:	4607      	mov	r7, r0
 800ab20:	d802      	bhi.n	800ab28 <_realloc_r+0x34>
 800ab22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab26:	d812      	bhi.n	800ab4e <_realloc_r+0x5a>
 800ab28:	4621      	mov	r1, r4
 800ab2a:	4640      	mov	r0, r8
 800ab2c:	f7ff ff6e 	bl	800aa0c <_malloc_r>
 800ab30:	4605      	mov	r5, r0
 800ab32:	2800      	cmp	r0, #0
 800ab34:	d0ed      	beq.n	800ab12 <_realloc_r+0x1e>
 800ab36:	42bc      	cmp	r4, r7
 800ab38:	4622      	mov	r2, r4
 800ab3a:	4631      	mov	r1, r6
 800ab3c:	bf28      	it	cs
 800ab3e:	463a      	movcs	r2, r7
 800ab40:	f7ff fba6 	bl	800a290 <memcpy>
 800ab44:	4631      	mov	r1, r6
 800ab46:	4640      	mov	r0, r8
 800ab48:	f7ff fef4 	bl	800a934 <_free_r>
 800ab4c:	e7e1      	b.n	800ab12 <_realloc_r+0x1e>
 800ab4e:	4635      	mov	r5, r6
 800ab50:	e7df      	b.n	800ab12 <_realloc_r+0x1e>
	...

0800ab54 <_sbrk_r>:
 800ab54:	b538      	push	{r3, r4, r5, lr}
 800ab56:	4d06      	ldr	r5, [pc, #24]	; (800ab70 <_sbrk_r+0x1c>)
 800ab58:	2300      	movs	r3, #0
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	4608      	mov	r0, r1
 800ab5e:	602b      	str	r3, [r5, #0]
 800ab60:	f7fb fbec 	bl	800633c <_sbrk>
 800ab64:	1c43      	adds	r3, r0, #1
 800ab66:	d102      	bne.n	800ab6e <_sbrk_r+0x1a>
 800ab68:	682b      	ldr	r3, [r5, #0]
 800ab6a:	b103      	cbz	r3, 800ab6e <_sbrk_r+0x1a>
 800ab6c:	6023      	str	r3, [r4, #0]
 800ab6e:	bd38      	pop	{r3, r4, r5, pc}
 800ab70:	200002a8 	.word	0x200002a8

0800ab74 <__malloc_lock>:
 800ab74:	4801      	ldr	r0, [pc, #4]	; (800ab7c <__malloc_lock+0x8>)
 800ab76:	f000 b811 	b.w	800ab9c <__retarget_lock_acquire_recursive>
 800ab7a:	bf00      	nop
 800ab7c:	200002ac 	.word	0x200002ac

0800ab80 <__malloc_unlock>:
 800ab80:	4801      	ldr	r0, [pc, #4]	; (800ab88 <__malloc_unlock+0x8>)
 800ab82:	f000 b80c 	b.w	800ab9e <__retarget_lock_release_recursive>
 800ab86:	bf00      	nop
 800ab88:	200002ac 	.word	0x200002ac

0800ab8c <_malloc_usable_size_r>:
 800ab8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab90:	1f18      	subs	r0, r3, #4
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	bfbc      	itt	lt
 800ab96:	580b      	ldrlt	r3, [r1, r0]
 800ab98:	18c0      	addlt	r0, r0, r3
 800ab9a:	4770      	bx	lr

0800ab9c <__retarget_lock_acquire_recursive>:
 800ab9c:	4770      	bx	lr

0800ab9e <__retarget_lock_release_recursive>:
 800ab9e:	4770      	bx	lr

0800aba0 <_init>:
 800aba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aba2:	bf00      	nop
 800aba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aba6:	bc08      	pop	{r3}
 800aba8:	469e      	mov	lr, r3
 800abaa:	4770      	bx	lr

0800abac <_fini>:
 800abac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abae:	bf00      	nop
 800abb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abb2:	bc08      	pop	{r3}
 800abb4:	469e      	mov	lr, r3
 800abb6:	4770      	bx	lr
